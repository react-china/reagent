if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2356";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__5837__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__5837 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__5837__delegate.call(this, args);
    };
    G__5837.cljs$lang$maxFixedArity = 0;
    G__5837.cljs$lang$applyTo = function(arglist__5838) {
      var args = cljs.core.seq(arglist__5838);
      return G__5837__delegate(args);
    };
    G__5837.cljs$core$IFn$_invoke$arity$variadic = G__5837__delegate;
    return G__5837;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3746__auto__ = ty;
    if (cljs.core.truth_(and__3746__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3746__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4627__auto___5839 = len;
  var i_5840 = 0;
  while (true) {
    if (i_5840 < n__4627__auto___5839) {
      new_arr[i_5840] = arr[i_5840];
      var G__5841 = i_5840 + 1;
      i_5840 = G__5841;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__5842__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__5842 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5842__delegate.call(this, array, i, idxs);
    };
    G__5842.cljs$lang$maxFixedArity = 2;
    G__5842.cljs$lang$applyTo = function(arglist__5843) {
      var array = cljs.core.first(arglist__5843);
      arglist__5843 = cljs.core.next(arglist__5843);
      var i = cljs.core.first(arglist__5843);
      var idxs = cljs.core.rest(arglist__5843);
      return G__5842__delegate(array, i, idxs);
    };
    G__5842.cljs$core$IFn$_invoke$arity$variadic = G__5842__delegate;
    return G__5842;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__5844__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__5844 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__5844__delegate.call(this, array, idx, idx2, idxv);
    };
    G__5844.cljs$lang$maxFixedArity = 3;
    G__5844.cljs$lang$applyTo = function(arglist__5845) {
      var array = cljs.core.first(arglist__5845);
      arglist__5845 = cljs.core.next(arglist__5845);
      var idx = cljs.core.first(arglist__5845);
      arglist__5845 = cljs.core.next(arglist__5845);
      var idx2 = cljs.core.first(arglist__5845);
      var idxv = cljs.core.rest(arglist__5845);
      return G__5844__delegate(array, idx, idx2, idxv);
    };
    G__5844.cljs$core$IFn$_invoke$arity$variadic = G__5844__delegate;
    return G__5844;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj5847 = {};
  return obj5847;
}();
cljs.core.IFn = function() {
  var obj5849 = {};
  return obj5849;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3746__auto__ = this$;
      if (and__3746__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4394__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3758__auto__ = cljs.core._invoke[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._invoke["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj5851 = {};
  return obj5851;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3746__auto__ = value;
    if (and__3746__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4394__auto__ = value == null ? null : value;
    return function() {
      var or__3758__auto__ = cljs.core._clone[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._clone["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj5853 = {};
  return obj5853;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._count[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._count["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj5855 = {};
  return obj5855;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._empty[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._empty["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj5857 = {};
  return obj5857;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._conj[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._conj["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj5859 = {};
  return obj5859;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3746__auto__ = coll;
      if (and__3746__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4394__auto__ = coll == null ? null : coll;
      return function() {
        var or__3758__auto__ = cljs.core._nth[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._nth["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3746__auto__ = coll;
      if (and__3746__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4394__auto__ = coll == null ? null : coll;
      return function() {
        var or__3758__auto__ = cljs.core._nth[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._nth["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj5861 = {};
  return obj5861;
}();
cljs.core.ISeq = function() {
  var obj5863 = {};
  return obj5863;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._first[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._first["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._rest[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._rest["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj5865 = {};
  return obj5865;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._next[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._next["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj5867 = {};
  return obj5867;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3746__auto__ = o;
      if (and__3746__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4394__auto__ = o == null ? null : o;
      return function() {
        var or__3758__auto__ = cljs.core._lookup[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._lookup["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3746__auto__ = o;
      if (and__3746__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4394__auto__ = o == null ? null : o;
      return function() {
        var or__3758__auto__ = cljs.core._lookup[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._lookup["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj5869 = {};
  return obj5869;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._assoc[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._assoc["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj5871 = {};
  return obj5871;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._dissoc[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._dissoc["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj5873 = {};
  return obj5873;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._key[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._key["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._val[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._val["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj5875 = {};
  return obj5875;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._disjoin[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._disjoin["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj5877 = {};
  return obj5877;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._peek[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._peek["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._pop[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._pop["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj5879 = {};
  return obj5879;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._assoc_n[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj5881 = {};
  return obj5881;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3746__auto__ = o;
    if (and__3746__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4394__auto__ = o == null ? null : o;
    return function() {
      var or__3758__auto__ = cljs.core._deref[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._deref["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj5883 = {};
  return obj5883;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3746__auto__ = o;
    if (and__3746__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4394__auto__ = o == null ? null : o;
    return function() {
      var or__3758__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj5885 = {};
  return obj5885;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3746__auto__ = o;
    if (and__3746__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4394__auto__ = o == null ? null : o;
    return function() {
      var or__3758__auto__ = cljs.core._meta[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._meta["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj5887 = {};
  return obj5887;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3746__auto__ = o;
    if (and__3746__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4394__auto__ = o == null ? null : o;
    return function() {
      var or__3758__auto__ = cljs.core._with_meta[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._with_meta["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj5889 = {};
  return obj5889;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3746__auto__ = coll;
      if (and__3746__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4394__auto__ = coll == null ? null : coll;
      return function() {
        var or__3758__auto__ = cljs.core._reduce[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._reduce["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3746__auto__ = coll;
      if (and__3746__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4394__auto__ = coll == null ? null : coll;
      return function() {
        var or__3758__auto__ = cljs.core._reduce[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._reduce["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj5891 = {};
  return obj5891;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj5893 = {};
  return obj5893;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3746__auto__ = o;
    if (and__3746__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4394__auto__ = o == null ? null : o;
    return function() {
      var or__3758__auto__ = cljs.core._equiv[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._equiv["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj5895 = {};
  return obj5895;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3746__auto__ = o;
    if (and__3746__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4394__auto__ = o == null ? null : o;
    return function() {
      var or__3758__auto__ = cljs.core._hash[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._hash["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj5897 = {};
  return obj5897;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3746__auto__ = o;
    if (and__3746__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4394__auto__ = o == null ? null : o;
    return function() {
      var or__3758__auto__ = cljs.core._seq[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._seq["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj5899 = {};
  return obj5899;
}();
cljs.core.IList = function() {
  var obj5901 = {};
  return obj5901;
}();
cljs.core.IRecord = function() {
  var obj5903 = {};
  return obj5903;
}();
cljs.core.IReversible = function() {
  var obj5905 = {};
  return obj5905;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._rseq[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._rseq["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj5907 = {};
  return obj5907;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._entry_key[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._entry_key["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._comparator[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._comparator["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj5909 = {};
  return obj5909;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3746__auto__ = writer;
    if (and__3746__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4394__auto__ = writer == null ? null : writer;
    return function() {
      var or__3758__auto__ = cljs.core._write[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._write["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3746__auto__ = writer;
    if (and__3746__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4394__auto__ = writer == null ? null : writer;
    return function() {
      var or__3758__auto__ = cljs.core._flush[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._flush["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj5911 = {};
  return obj5911;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3746__auto__ = o;
    if (and__3746__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4394__auto__ = o == null ? null : o;
    return function() {
      var or__3758__auto__ = cljs.core._pr_writer[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj5913 = {};
  return obj5913;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3746__auto__ = d;
    if (and__3746__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4394__auto__ = d == null ? null : d;
    return function() {
      var or__3758__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj5915 = {};
  return obj5915;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3746__auto__ = this$;
    if (and__3746__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4394__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3758__auto__ = cljs.core._notify_watches[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3746__auto__ = this$;
    if (and__3746__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4394__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3758__auto__ = cljs.core._add_watch[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._add_watch["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3746__auto__ = this$;
    if (and__3746__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4394__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3758__auto__ = cljs.core._remove_watch[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj5917 = {};
  return obj5917;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._as_transient[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._as_transient["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj5919 = {};
  return obj5919;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3746__auto__ = tcoll;
    if (and__3746__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4394__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3758__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3746__auto__ = tcoll;
    if (and__3746__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4394__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3758__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj5921 = {};
  return obj5921;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3746__auto__ = tcoll;
    if (and__3746__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4394__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3758__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj5923 = {};
  return obj5923;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3746__auto__ = tcoll;
    if (and__3746__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4394__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3758__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj5925 = {};
  return obj5925;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3746__auto__ = tcoll;
    if (and__3746__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4394__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3758__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3746__auto__ = tcoll;
    if (and__3746__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4394__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3758__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj5927 = {};
  return obj5927;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3746__auto__ = tcoll;
    if (and__3746__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4394__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3758__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj5929 = {};
  return obj5929;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3746__auto__ = x;
    if (and__3746__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4394__auto__ = x == null ? null : x;
    return function() {
      var or__3758__auto__ = cljs.core._compare[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._compare["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj5931 = {};
  return obj5931;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._drop_first[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._drop_first["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj5933 = {};
  return obj5933;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._chunked_first[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj5935 = {};
  return obj5935;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._chunked_next[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj5937 = {};
  return obj5937;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3746__auto__ = x;
    if (and__3746__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4394__auto__ = x == null ? null : x;
    return function() {
      var or__3758__auto__ = cljs.core._name[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._name["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3746__auto__ = x;
    if (and__3746__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4394__auto__ = x == null ? null : x;
    return function() {
      var or__3758__auto__ = cljs.core._namespace[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._namespace["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj5939 = {};
  return obj5939;
}();
cljs.core.IReset = function() {
  var obj5941 = {};
  return obj5941;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3746__auto__ = o;
    if (and__3746__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4394__auto__ = o == null ? null : o;
    return function() {
      var or__3758__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj5943 = {};
  return obj5943;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3746__auto__ = o;
      if (and__3746__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4394__auto__ = o == null ? null : o;
      return function() {
        var or__3758__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3746__auto__ = o;
      if (and__3746__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4394__auto__ = o == null ? null : o;
      return function() {
        var or__3758__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3746__auto__ = o;
      if (and__3746__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4394__auto__ = o == null ? null : o;
      return function() {
        var or__3758__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3746__auto__ = o;
      if (and__3746__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3746__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4394__auto__ = o == null ? null : o;
      return function() {
        var or__3758__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4394__auto__)];
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3758__auto____$1) {
            return or__3758__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj5945 = {};
  return obj5945;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3746__auto__ = coll;
    if (and__3746__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4394__auto__ = coll == null ? null : coll;
    return function() {
      var or__3758__auto__ = cljs.core._iterator[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._iterator["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__5946 = i + 2;
        var G__5947 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__5946;
        h1 = G__5947;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj5949 = {};
  return obj5949;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__5950 = i + 1;
          var G__5951 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__5950;
          hash = G__5951;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj5955 = {};
      return obj5955;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__5957 = o;
    if (G__5957) {
      var bit__4414__auto__ = G__5957.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4414__auto__ || G__5957.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              return cljs.core._hash.call(null, o);
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3746__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3746__auto__) {
        return b.ns;
      } else {
        return and__3746__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4169__auto__ = self__._hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__5959 = null;
  var G__5959__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__5959__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__5959 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5959__2.call(this, self__, coll);
      case 3:
        return G__5959__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__5959.cljs$core$IFn$_invoke$arity$2 = G__5959__2;
  G__5959.cljs$core$IFn$_invoke$arity$3 = G__5959__3;
  return G__5959;
}();
cljs.core.Symbol.prototype.apply = function(self__, args5958) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5958)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__5961 = x;
  if (G__5961) {
    var bit__4421__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3758__auto__ = bit__4421__auto__;
      if (cljs.core.truth_(or__3758__auto__)) {
        return or__3758__auto__;
      } else {
        return G__5961.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__5961.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__5961);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__5961);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__5963 = value;
  if (G__5963) {
    var bit__4421__auto__ = G__5963.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4421__auto__ || G__5963.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__5963.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__5963);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__5963);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__5965 = coll;
      if (G__5965) {
        var bit__4414__auto__ = G__5965.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4414__auto__ || G__5965.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__5967 = coll;
      if (G__5967) {
        var bit__4414__auto__ = G__5967.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4414__auto__ || G__5967.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__5969 = coll;
      if (G__5969) {
        var bit__4414__auto__ = G__5969.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4414__auto__ || G__5969.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__5971 = coll;
      if (G__5971) {
        var bit__4414__auto__ = G__5971.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4414__auto__ || G__5971.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__5972__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__5973 = y;
            var G__5974 = cljs.core.first.call(null, more);
            var G__5975 = cljs.core.next.call(null, more);
            x = G__5973;
            y = G__5974;
            more = G__5975;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__5972 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5972__delegate.call(this, x, y, more);
    };
    G__5972.cljs$lang$maxFixedArity = 2;
    G__5972.cljs$lang$applyTo = function(arglist__5976) {
      var x = cljs.core.first(arglist__5976);
      arglist__5976 = cljs.core.next(arglist__5976);
      var y = cljs.core.first(arglist__5976);
      var more = cljs.core.rest(arglist__5976);
      return G__5972__delegate(x, y, more);
    };
    G__5972.cljs$core$IFn$_invoke$arity$variadic = G__5972__delegate;
    return G__5972;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__5977 = n + 1;
      var G__5978 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__5979 = cljs.core.next.call(null, coll__$1);
      n = G__5977;
      hash_code = G__5978;
      coll__$1 = G__5979;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__5980 = n + 1;
      var G__5981 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__5982 = cljs.core.next.call(null, coll__$1);
      n = G__5980;
      hash_code = G__5981;
      coll__$1 = G__5982;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__5983 = nval;
            var G__5984 = n + 1;
            val = G__5983;
            n = G__5984;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__5985 = nval;
          var G__5986 = n + 1;
          val__$1 = G__5985;
          n = G__5986;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__5987 = nval;
          var G__5988 = n + 1;
          val__$1 = G__5987;
          n = G__5988;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__5989 = nval;
            var G__5990 = n + 1;
            val = G__5989;
            n = G__5990;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__5991 = nval;
          var G__5992 = n + 1;
          val__$1 = G__5991;
          n = G__5992;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__5993 = nval;
          var G__5994 = n + 1;
          val__$1 = G__5993;
          n = G__5994;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__5996 = x;
  if (G__5996) {
    var bit__4421__auto__ = G__5996.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4421__auto__ || G__5996.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__5996.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__5996);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__5996);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__5998 = x;
  if (G__5998) {
    var bit__4421__auto__ = G__5998.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4421__auto__ || G__5998.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__5998.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__5998);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__5998);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__5999 = sn;
      s = G__5999;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__6000__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__6001 = conj.call(null, coll, x);
          var G__6002 = cljs.core.first.call(null, xs);
          var G__6003 = cljs.core.next.call(null, xs);
          coll = G__6001;
          x = G__6002;
          xs = G__6003;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__6000 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6000__delegate.call(this, coll, x, xs);
    };
    G__6000.cljs$lang$maxFixedArity = 2;
    G__6000.cljs$lang$applyTo = function(arglist__6004) {
      var coll = cljs.core.first(arglist__6004);
      arglist__6004 = cljs.core.next(arglist__6004);
      var x = cljs.core.first(arglist__6004);
      var xs = cljs.core.rest(arglist__6004);
      return G__6000__delegate(coll, x, xs);
    };
    G__6000.cljs$core$IFn$_invoke$arity$variadic = G__6000__delegate;
    return G__6000;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__6005 = cljs.core.next.call(null, s);
      var G__6006 = acc + 1;
      s = G__6005;
      acc = G__6006;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6008 = coll;
      if (G__6008) {
        var bit__4414__auto__ = G__6008.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4414__auto__ || G__6008.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__6009 = cljs.core.next.call(null, coll);
              var G__6010 = n - 1;
              coll = G__6009;
              n = G__6010;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__6011 = cljs.core.next.call(null, coll);
              var G__6012 = n - 1;
              var G__6013 = not_found;
              coll = G__6011;
              n = G__6012;
              not_found = G__6013;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__6018 = coll;
          if (G__6018) {
            var bit__4414__auto__ = G__6018.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4414__auto__ || G__6018.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__6019 = coll;
                  if (G__6019) {
                    var bit__4421__auto__ = G__6019.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4421__auto__ || G__6019.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6019.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6019);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6019);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__6020 = coll;
          if (G__6020) {
            var bit__4414__auto__ = G__6020.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4414__auto__ || G__6020.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__6021 = coll;
                  if (G__6021) {
                    var bit__4421__auto__ = G__6021.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4421__auto__ || G__6021.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6021.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6021);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6021);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__6024 = o;
        if (G__6024) {
          var bit__4414__auto__ = G__6024.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4414__auto__ || G__6024.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__6025 = o;
        if (G__6025) {
          var bit__4414__auto__ = G__6025.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4414__auto__ || G__6025.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__6026__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__6027 = ret;
          var G__6028 = cljs.core.first.call(null, kvs);
          var G__6029 = cljs.core.second.call(null, kvs);
          var G__6030 = cljs.core.nnext.call(null, kvs);
          coll = G__6027;
          k = G__6028;
          v = G__6029;
          kvs = G__6030;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__6026 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6026__delegate.call(this, coll, k, v, kvs);
    };
    G__6026.cljs$lang$maxFixedArity = 3;
    G__6026.cljs$lang$applyTo = function(arglist__6031) {
      var coll = cljs.core.first(arglist__6031);
      arglist__6031 = cljs.core.next(arglist__6031);
      var k = cljs.core.first(arglist__6031);
      arglist__6031 = cljs.core.next(arglist__6031);
      var v = cljs.core.first(arglist__6031);
      var kvs = cljs.core.rest(arglist__6031);
      return G__6026__delegate(coll, k, v, kvs);
    };
    G__6026.cljs$core$IFn$_invoke$arity$variadic = G__6026__delegate;
    return G__6026;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__6032__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6033 = ret;
            var G__6034 = cljs.core.first.call(null, ks);
            var G__6035 = cljs.core.next.call(null, ks);
            coll = G__6033;
            k = G__6034;
            ks = G__6035;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6032 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6032__delegate.call(this, coll, k, ks);
    };
    G__6032.cljs$lang$maxFixedArity = 2;
    G__6032.cljs$lang$applyTo = function(arglist__6036) {
      var coll = cljs.core.first(arglist__6036);
      arglist__6036 = cljs.core.next(arglist__6036);
      var k = cljs.core.first(arglist__6036);
      var ks = cljs.core.rest(arglist__6036);
      return G__6032__delegate(coll, k, ks);
    };
    G__6032.cljs$core$IFn$_invoke$arity$variadic = G__6032__delegate;
    return G__6032;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3758__auto__ = goog.isFunction(f);
  if (or__3758__auto__) {
    return or__3758__auto__;
  } else {
    var G__6040 = f;
    if (G__6040) {
      var bit__4421__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3758__auto____$1 = bit__4421__auto__;
        if (cljs.core.truth_(or__3758__auto____$1)) {
          return or__3758__auto____$1;
        } else {
          return G__6040.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__6040.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__6040);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__6040);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__6042 = null;
  var G__6042__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__6042__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__6042__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__6042__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__6042__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__6042__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__6042__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__6042__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__6042__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__6042__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__6042__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__6042__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__6042__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__6042__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__6042__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__6042__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__6042__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__6042__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__6042__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__6042__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__6042__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__6042__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__6042 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6042__1.call(this, self__);
      case 2:
        return G__6042__2.call(this, self__, a);
      case 3:
        return G__6042__3.call(this, self__, a, b);
      case 4:
        return G__6042__4.call(this, self__, a, b, c);
      case 5:
        return G__6042__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6042__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6042__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6042__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6042__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6042__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6042__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6042__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6042__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6042__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6042__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6042__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6042__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6042__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6042__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6042__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6042__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6042__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6042.cljs$core$IFn$_invoke$arity$1 = G__6042__1;
  G__6042.cljs$core$IFn$_invoke$arity$2 = G__6042__2;
  G__6042.cljs$core$IFn$_invoke$arity$3 = G__6042__3;
  G__6042.cljs$core$IFn$_invoke$arity$4 = G__6042__4;
  G__6042.cljs$core$IFn$_invoke$arity$5 = G__6042__5;
  G__6042.cljs$core$IFn$_invoke$arity$6 = G__6042__6;
  G__6042.cljs$core$IFn$_invoke$arity$7 = G__6042__7;
  G__6042.cljs$core$IFn$_invoke$arity$8 = G__6042__8;
  G__6042.cljs$core$IFn$_invoke$arity$9 = G__6042__9;
  G__6042.cljs$core$IFn$_invoke$arity$10 = G__6042__10;
  G__6042.cljs$core$IFn$_invoke$arity$11 = G__6042__11;
  G__6042.cljs$core$IFn$_invoke$arity$12 = G__6042__12;
  G__6042.cljs$core$IFn$_invoke$arity$13 = G__6042__13;
  G__6042.cljs$core$IFn$_invoke$arity$14 = G__6042__14;
  G__6042.cljs$core$IFn$_invoke$arity$15 = G__6042__15;
  G__6042.cljs$core$IFn$_invoke$arity$16 = G__6042__16;
  G__6042.cljs$core$IFn$_invoke$arity$17 = G__6042__17;
  G__6042.cljs$core$IFn$_invoke$arity$18 = G__6042__18;
  G__6042.cljs$core$IFn$_invoke$arity$19 = G__6042__19;
  G__6042.cljs$core$IFn$_invoke$arity$20 = G__6042__20;
  G__6042.cljs$core$IFn$_invoke$arity$21 = G__6042__21;
  G__6042.cljs$core$IFn$_invoke$arity$22 = G__6042__22;
  return G__6042;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args6041) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6041)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__6046 = o;
    if (G__6046) {
      var bit__4421__auto__ = G__6046.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4421__auto__ || G__6046.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__6046.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__6046);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__6046);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3746__auto__ = !(o == null);
    if (and__3746__auto__) {
      var G__6050 = o;
      if (G__6050) {
        var bit__4421__auto__ = G__6050.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4421__auto__ || G__6050.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__6050.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__6050);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__6050);
      }
    } else {
      return and__3746__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__6051__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6052 = ret;
            var G__6053 = cljs.core.first.call(null, ks);
            var G__6054 = cljs.core.next.call(null, ks);
            coll = G__6052;
            k = G__6053;
            ks = G__6054;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6051 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6051__delegate.call(this, coll, k, ks);
    };
    G__6051.cljs$lang$maxFixedArity = 2;
    G__6051.cljs$lang$applyTo = function(arglist__6055) {
      var coll = cljs.core.first(arglist__6055);
      arglist__6055 = cljs.core.next(arglist__6055);
      var k = cljs.core.first(arglist__6055);
      var ks = cljs.core.rest(arglist__6055);
      return G__6051__delegate(coll, k, ks);
    };
    G__6051.cljs$core$IFn$_invoke$arity$variadic = G__6051__delegate;
    return G__6051;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6057 = x;
    if (G__6057) {
      var bit__4421__auto__ = G__6057.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4421__auto__ || G__6057.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__6057.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__6057);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__6057);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6059 = x;
    if (G__6059) {
      var bit__4421__auto__ = G__6059.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4421__auto__ || G__6059.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__6059.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__6059);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__6059);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__6061 = x;
  if (G__6061) {
    var bit__4421__auto__ = G__6061.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4421__auto__ || G__6061.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__6061.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__6061);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__6061);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__6063 = x;
  if (G__6063) {
    var bit__4421__auto__ = G__6063.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4421__auto__ || G__6063.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__6063.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__6063);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__6063);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__6065 = x;
  if (G__6065) {
    var bit__4421__auto__ = G__6065.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4421__auto__ || G__6065.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__6065.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__6065);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__6065);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__6067 = x;
  if (G__6067) {
    var bit__4421__auto__ = G__6067.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4421__auto__ || G__6067.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__6067.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__6067);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__6067);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6069 = x;
    if (G__6069) {
      var bit__4421__auto__ = G__6069.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4421__auto__ || G__6069.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__6069.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__6069);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__6069);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__6071 = x;
  if (G__6071) {
    var bit__4421__auto__ = G__6071.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4421__auto__ || G__6071.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__6071.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__6071);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__6071);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__6073 = x;
  if (G__6073) {
    var bit__4414__auto__ = G__6073.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4414__auto__ || G__6073.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj6077 = {};
    return obj6077;
  };
  var js_obj__1 = function() {
    var G__6078__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__6078 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__6078__delegate.call(this, keyvals);
    };
    G__6078.cljs$lang$maxFixedArity = 0;
    G__6078.cljs$lang$applyTo = function(arglist__6079) {
      var keyvals = cljs.core.seq(arglist__6079);
      return G__6078__delegate(keyvals);
    };
    G__6078.cljs$core$IFn$_invoke$arity$variadic = G__6078__delegate;
    return G__6078;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6080 = i__$1 + 1;
      var G__6081 = j__$1 + 1;
      var G__6082 = len__$1 - 1;
      i__$1 = G__6080;
      j__$1 = G__6081;
      len__$1 = G__6082;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6083 = i__$1 - 1;
      var G__6084 = j__$1 - 1;
      var G__6085 = len__$1 - 1;
      i__$1 = G__6083;
      j__$1 = G__6084;
      len__$1 = G__6085;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj6087 = {};
  return obj6087;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__6089 = s;
    if (G__6089) {
      var bit__4421__auto__ = G__6089.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4421__auto__ || G__6089.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__6089.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6089);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6089);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__6091 = s;
  if (G__6091) {
    var bit__4421__auto__ = G__6091.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4421__auto__ || G__6091.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__6091.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__6091);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__6091);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3758__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3758__auto__) {
    return or__3758__auto__;
  } else {
    var G__6095 = f;
    if (G__6095) {
      var bit__4421__auto__ = G__6095.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4421__auto__ || G__6095.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__6095.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__6095);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__6095);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__6096__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__6097 = cljs.core.conj.call(null, s, x__$1);
              var G__6098 = etc;
              s = G__6097;
              xs = G__6098;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__6096 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6096__delegate.call(this, x, y, more);
    };
    G__6096.cljs$lang$maxFixedArity = 2;
    G__6096.cljs$lang$applyTo = function(arglist__6099) {
      var x = cljs.core.first(arglist__6099);
      arglist__6099 = cljs.core.next(arglist__6099);
      var y = cljs.core.first(arglist__6099);
      var more = cljs.core.rest(arglist__6099);
      return G__6096__delegate(x, y, more);
    };
    G__6096.cljs$core$IFn$_invoke$arity$variadic = G__6096__delegate;
    return G__6096;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3758__auto__ = cljs.core.seq.call(null, coll);
    if (or__3758__auto__) {
      return or__3758__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__6101 = x;
            if (G__6101) {
              var bit__4414__auto__ = G__6101.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4414__auto__ || G__6101.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__6102 = xs;
        var G__6103 = ys;
        var G__6104 = len;
        var G__6105 = n + 1;
        xs = G__6102;
        ys = G__6103;
        len = G__6104;
        n = G__6105;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6106 = nval;
          var G__6107 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__6106;
          coll__$1 = G__6107;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__6110 = coll;
      if (G__6110) {
        var bit__4414__auto__ = G__6110.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4414__auto__ || G__6110.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__6111 = coll;
      if (G__6111) {
        var bit__4414__auto__ = G__6111.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4414__auto__ || G__6111.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__6112 = null;
      var G__6112__0 = function() {
        return f.call(null);
      };
      var G__6112__1 = function(x) {
        return cf.call(null, x);
      };
      var G__6112__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__6112 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__6112__0.call(this);
          case 1:
            return G__6112__1.call(this, x);
          case 2:
            return G__6112__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6112.cljs$core$IFn$_invoke$arity$0 = G__6112__0;
      G__6112.cljs$core$IFn$_invoke$arity$1 = G__6112__1;
      G__6112.cljs$core$IFn$_invoke$arity$2 = G__6112__2;
      return G__6112;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__6113__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__6113 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6113__delegate.call(this, x, y, more);
    };
    G__6113.cljs$lang$maxFixedArity = 2;
    G__6113.cljs$lang$applyTo = function(arglist__6114) {
      var x = cljs.core.first(arglist__6114);
      arglist__6114 = cljs.core.next(arglist__6114);
      var y = cljs.core.first(arglist__6114);
      var more = cljs.core.rest(arglist__6114);
      return G__6113__delegate(x, y, more);
    };
    G__6113.cljs$core$IFn$_invoke$arity$variadic = G__6113__delegate;
    return G__6113;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__6115__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__6115 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6115__delegate.call(this, x, y, more);
    };
    G__6115.cljs$lang$maxFixedArity = 2;
    G__6115.cljs$lang$applyTo = function(arglist__6116) {
      var x = cljs.core.first(arglist__6116);
      arglist__6116 = cljs.core.next(arglist__6116);
      var y = cljs.core.first(arglist__6116);
      var more = cljs.core.rest(arglist__6116);
      return G__6115__delegate(x, y, more);
    };
    G__6115.cljs$core$IFn$_invoke$arity$variadic = G__6115__delegate;
    return G__6115;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__6117__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__6117 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6117__delegate.call(this, x, y, more);
    };
    G__6117.cljs$lang$maxFixedArity = 2;
    G__6117.cljs$lang$applyTo = function(arglist__6118) {
      var x = cljs.core.first(arglist__6118);
      arglist__6118 = cljs.core.next(arglist__6118);
      var y = cljs.core.first(arglist__6118);
      var more = cljs.core.rest(arglist__6118);
      return G__6117__delegate(x, y, more);
    };
    G__6117.cljs$core$IFn$_invoke$arity$variadic = G__6117__delegate;
    return G__6117;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__6119__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__6119 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6119__delegate.call(this, x, y, more);
    };
    G__6119.cljs$lang$maxFixedArity = 2;
    G__6119.cljs$lang$applyTo = function(arglist__6120) {
      var x = cljs.core.first(arglist__6120);
      arglist__6120 = cljs.core.next(arglist__6120);
      var y = cljs.core.first(arglist__6120);
      var more = cljs.core.rest(arglist__6120);
      return G__6119__delegate(x, y, more);
    };
    G__6119.cljs$core$IFn$_invoke$arity$variadic = G__6119__delegate;
    return G__6119;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__6121__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__6122 = y;
            var G__6123 = cljs.core.first.call(null, more);
            var G__6124 = cljs.core.next.call(null, more);
            x = G__6122;
            y = G__6123;
            more = G__6124;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6121 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6121__delegate.call(this, x, y, more);
    };
    G__6121.cljs$lang$maxFixedArity = 2;
    G__6121.cljs$lang$applyTo = function(arglist__6125) {
      var x = cljs.core.first(arglist__6125);
      arglist__6125 = cljs.core.next(arglist__6125);
      var y = cljs.core.first(arglist__6125);
      var more = cljs.core.rest(arglist__6125);
      return G__6121__delegate(x, y, more);
    };
    G__6121.cljs$core$IFn$_invoke$arity$variadic = G__6121__delegate;
    return G__6121;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__6126__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__6127 = y;
            var G__6128 = cljs.core.first.call(null, more);
            var G__6129 = cljs.core.next.call(null, more);
            x = G__6127;
            y = G__6128;
            more = G__6129;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6126 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6126__delegate.call(this, x, y, more);
    };
    G__6126.cljs$lang$maxFixedArity = 2;
    G__6126.cljs$lang$applyTo = function(arglist__6130) {
      var x = cljs.core.first(arglist__6130);
      arglist__6130 = cljs.core.next(arglist__6130);
      var y = cljs.core.first(arglist__6130);
      var more = cljs.core.rest(arglist__6130);
      return G__6126__delegate(x, y, more);
    };
    G__6126.cljs$core$IFn$_invoke$arity$variadic = G__6126__delegate;
    return G__6126;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__6131__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__6132 = y;
            var G__6133 = cljs.core.first.call(null, more);
            var G__6134 = cljs.core.next.call(null, more);
            x = G__6132;
            y = G__6133;
            more = G__6134;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6131 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6131__delegate.call(this, x, y, more);
    };
    G__6131.cljs$lang$maxFixedArity = 2;
    G__6131.cljs$lang$applyTo = function(arglist__6135) {
      var x = cljs.core.first(arglist__6135);
      arglist__6135 = cljs.core.next(arglist__6135);
      var y = cljs.core.first(arglist__6135);
      var more = cljs.core.rest(arglist__6135);
      return G__6131__delegate(x, y, more);
    };
    G__6131.cljs$core$IFn$_invoke$arity$variadic = G__6131__delegate;
    return G__6131;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__6136__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__6137 = y;
            var G__6138 = cljs.core.first.call(null, more);
            var G__6139 = cljs.core.next.call(null, more);
            x = G__6137;
            y = G__6138;
            more = G__6139;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6136 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6136__delegate.call(this, x, y, more);
    };
    G__6136.cljs$lang$maxFixedArity = 2;
    G__6136.cljs$lang$applyTo = function(arglist__6140) {
      var x = cljs.core.first(arglist__6140);
      arglist__6140 = cljs.core.next(arglist__6140);
      var y = cljs.core.first(arglist__6140);
      var more = cljs.core.rest(arglist__6140);
      return G__6136__delegate(x, y, more);
    };
    G__6136.cljs$core$IFn$_invoke$arity$variadic = G__6136__delegate;
    return G__6136;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__4065__auto__ = x;
    var y__4066__auto__ = y;
    return x__4065__auto__ > y__4066__auto__ ? x__4065__auto__ : y__4066__auto__;
  };
  var max__3 = function() {
    var G__6141__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__4065__auto__ = x;
        var y__4066__auto__ = y;
        return x__4065__auto__ > y__4066__auto__ ? x__4065__auto__ : y__4066__auto__;
      }(), more);
    };
    var G__6141 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6141__delegate.call(this, x, y, more);
    };
    G__6141.cljs$lang$maxFixedArity = 2;
    G__6141.cljs$lang$applyTo = function(arglist__6142) {
      var x = cljs.core.first(arglist__6142);
      arglist__6142 = cljs.core.next(arglist__6142);
      var y = cljs.core.first(arglist__6142);
      var more = cljs.core.rest(arglist__6142);
      return G__6141__delegate(x, y, more);
    };
    G__6141.cljs$core$IFn$_invoke$arity$variadic = G__6141__delegate;
    return G__6141;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__4072__auto__ = x;
    var y__4073__auto__ = y;
    return x__4072__auto__ < y__4073__auto__ ? x__4072__auto__ : y__4073__auto__;
  };
  var min__3 = function() {
    var G__6143__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__4072__auto__ = x;
        var y__4073__auto__ = y;
        return x__4072__auto__ < y__4073__auto__ ? x__4072__auto__ : y__4073__auto__;
      }(), more);
    };
    var G__6143 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6143__delegate.call(this, x, y, more);
    };
    G__6143.cljs$lang$maxFixedArity = 2;
    G__6143.cljs$lang$applyTo = function(arglist__6144) {
      var x = cljs.core.first(arglist__6144);
      arglist__6144 = cljs.core.next(arglist__6144);
      var y = cljs.core.first(arglist__6144);
      var more = cljs.core.rest(arglist__6144);
      return G__6143__delegate(x, y, more);
    };
    G__6143.cljs$core$IFn$_invoke$arity$variadic = G__6143__delegate;
    return G__6143;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__6145__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__6145 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6145__delegate.call(this, x, y, more);
    };
    G__6145.cljs$lang$maxFixedArity = 2;
    G__6145.cljs$lang$applyTo = function(arglist__6146) {
      var x = cljs.core.first(arglist__6146);
      arglist__6146 = cljs.core.next(arglist__6146);
      var y = cljs.core.first(arglist__6146);
      var more = cljs.core.rest(arglist__6146);
      return G__6145__delegate(x, y, more);
    };
    G__6145.cljs$core$IFn$_invoke$arity$variadic = G__6145__delegate;
    return G__6145;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__6147__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__6147 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6147__delegate.call(this, x, y, more);
    };
    G__6147.cljs$lang$maxFixedArity = 2;
    G__6147.cljs$lang$applyTo = function(arglist__6148) {
      var x = cljs.core.first(arglist__6148);
      arglist__6148 = cljs.core.next(arglist__6148);
      var y = cljs.core.first(arglist__6148);
      var more = cljs.core.rest(arglist__6148);
      return G__6147__delegate(x, y, more);
    };
    G__6147.cljs$core$IFn$_invoke$arity$variadic = G__6147__delegate;
    return G__6147;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__6149__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__6149 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6149__delegate.call(this, x, y, more);
    };
    G__6149.cljs$lang$maxFixedArity = 2;
    G__6149.cljs$lang$applyTo = function(arglist__6150) {
      var x = cljs.core.first(arglist__6150);
      arglist__6150 = cljs.core.next(arglist__6150);
      var y = cljs.core.first(arglist__6150);
      var more = cljs.core.rest(arglist__6150);
      return G__6149__delegate(x, y, more);
    };
    G__6149.cljs$core$IFn$_invoke$arity$variadic = G__6149__delegate;
    return G__6149;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__6151__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__6151 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6151__delegate.call(this, x, y, more);
    };
    G__6151.cljs$lang$maxFixedArity = 2;
    G__6151.cljs$lang$applyTo = function(arglist__6152) {
      var x = cljs.core.first(arglist__6152);
      arglist__6152 = cljs.core.next(arglist__6152);
      var y = cljs.core.first(arglist__6152);
      var more = cljs.core.rest(arglist__6152);
      return G__6151__delegate(x, y, more);
    };
    G__6151.cljs$core$IFn$_invoke$arity$variadic = G__6151__delegate;
    return G__6151;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__6153__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__6153 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6153__delegate.call(this, x, y, more);
    };
    G__6153.cljs$lang$maxFixedArity = 2;
    G__6153.cljs$lang$applyTo = function(arglist__6154) {
      var x = cljs.core.first(arglist__6154);
      arglist__6154 = cljs.core.next(arglist__6154);
      var y = cljs.core.first(arglist__6154);
      var more = cljs.core.rest(arglist__6154);
      return G__6153__delegate(x, y, more);
    };
    G__6153.cljs$core$IFn$_invoke$arity$variadic = G__6153__delegate;
    return G__6153;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__6155__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__6155 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6155__delegate.call(this, x, y, more);
    };
    G__6155.cljs$lang$maxFixedArity = 2;
    G__6155.cljs$lang$applyTo = function(arglist__6156) {
      var x = cljs.core.first(arglist__6156);
      arglist__6156 = cljs.core.next(arglist__6156);
      var y = cljs.core.first(arglist__6156);
      var more = cljs.core.rest(arglist__6156);
      return G__6155__delegate(x, y, more);
    };
    G__6155.cljs$core$IFn$_invoke$arity$variadic = G__6155__delegate;
    return G__6155;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__6157__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__6157 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6157__delegate.call(this, x, y, more);
    };
    G__6157.cljs$lang$maxFixedArity = 2;
    G__6157.cljs$lang$applyTo = function(arglist__6158) {
      var x = cljs.core.first(arglist__6158);
      arglist__6158 = cljs.core.next(arglist__6158);
      var y = cljs.core.first(arglist__6158);
      var more = cljs.core.rest(arglist__6158);
      return G__6157__delegate(x, y, more);
    };
    G__6157.cljs$core$IFn$_invoke$arity$variadic = G__6157__delegate;
    return G__6157;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__6159__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__6160 = y;
            var G__6161 = cljs.core.first.call(null, more);
            var G__6162 = cljs.core.next.call(null, more);
            x = G__6160;
            y = G__6161;
            more = G__6162;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6159 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6159__delegate.call(this, x, y, more);
    };
    G__6159.cljs$lang$maxFixedArity = 2;
    G__6159.cljs$lang$applyTo = function(arglist__6163) {
      var x = cljs.core.first(arglist__6163);
      arglist__6163 = cljs.core.next(arglist__6163);
      var y = cljs.core.first(arglist__6163);
      var more = cljs.core.rest(arglist__6163);
      return G__6159__delegate(x, y, more);
    };
    G__6159.cljs$core$IFn$_invoke$arity$variadic = G__6159__delegate;
    return G__6159;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__6164 = n__$1 - 1;
      var G__6165 = cljs.core.next.call(null, xs);
      n__$1 = G__6164;
      xs = G__6165;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__6166__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__6167 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__6168 = cljs.core.next.call(null, more);
          sb = G__6167;
          more = G__6168;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__6166 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__6166__delegate.call(this, x, ys);
    };
    G__6166.cljs$lang$maxFixedArity = 1;
    G__6166.cljs$lang$applyTo = function(arglist__6169) {
      var x = cljs.core.first(arglist__6169);
      var ys = cljs.core.rest(arglist__6169);
      return G__6166__delegate(x, ys);
    };
    G__6166.cljs$core$IFn$_invoke$arity$variadic = G__6166__delegate;
    return G__6166;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__6170 = cljs.core.next.call(null, xs);
            var G__6171 = cljs.core.next.call(null, ys);
            xs = G__6170;
            ys = G__6171;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__6172 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__6173 = cljs.core.next.call(null, s);
        res = G__6172;
        s = G__6173;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__6174 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__6175 = cljs.core.next.call(null, s);
      h = G__6174;
      s = G__6175;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__6176 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__6177 = cljs.core.next.call(null, s__$1);
      h = G__6176;
      s__$1 = G__6177;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__6184_6190 = cljs.core.seq.call(null, fn_map);
  var chunk__6185_6191 = null;
  var count__6186_6192 = 0;
  var i__6187_6193 = 0;
  while (true) {
    if (i__6187_6193 < count__6186_6192) {
      var vec__6188_6194 = cljs.core._nth.call(null, chunk__6185_6191, i__6187_6193);
      var key_name_6195 = cljs.core.nth.call(null, vec__6188_6194, 0, null);
      var f_6196 = cljs.core.nth.call(null, vec__6188_6194, 1, null);
      var str_name_6197 = cljs.core.name.call(null, key_name_6195);
      obj[str_name_6197] = f_6196;
      var G__6198 = seq__6184_6190;
      var G__6199 = chunk__6185_6191;
      var G__6200 = count__6186_6192;
      var G__6201 = i__6187_6193 + 1;
      seq__6184_6190 = G__6198;
      chunk__6185_6191 = G__6199;
      count__6186_6192 = G__6200;
      i__6187_6193 = G__6201;
      continue;
    } else {
      var temp__4126__auto___6202 = cljs.core.seq.call(null, seq__6184_6190);
      if (temp__4126__auto___6202) {
        var seq__6184_6203__$1 = temp__4126__auto___6202;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6184_6203__$1)) {
          var c__4527__auto___6204 = cljs.core.chunk_first.call(null, seq__6184_6203__$1);
          var G__6205 = cljs.core.chunk_rest.call(null, seq__6184_6203__$1);
          var G__6206 = c__4527__auto___6204;
          var G__6207 = cljs.core.count.call(null, c__4527__auto___6204);
          var G__6208 = 0;
          seq__6184_6190 = G__6205;
          chunk__6185_6191 = G__6206;
          count__6186_6192 = G__6207;
          i__6187_6193 = G__6208;
          continue;
        } else {
          var vec__6189_6209 = cljs.core.first.call(null, seq__6184_6203__$1);
          var key_name_6210 = cljs.core.nth.call(null, vec__6189_6209, 0, null);
          var f_6211 = cljs.core.nth.call(null, vec__6189_6209, 1, null);
          var str_name_6212 = cljs.core.name.call(null, key_name_6210);
          obj[str_name_6212] = f_6211;
          var G__6213 = cljs.core.next.call(null, seq__6184_6203__$1);
          var G__6214 = null;
          var G__6215 = 0;
          var G__6216 = 0;
          seq__6184_6190 = G__6213;
          chunk__6185_6191 = G__6214;
          count__6186_6192 = G__6215;
          i__6187_6193 = G__6216;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__6218 = coll;
  if (G__6218) {
    var bit__4421__auto__ = G__6218.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4421__auto__ || G__6218.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__6218.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__6218);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__6218);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__6219 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__6219;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__6220 = i - 1;
        var G__6221 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__6220;
        r = G__6221;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__6222) {
    var xs = cljs.core.seq(arglist__6222);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3758__auto__ = coll == null;
    if (or__3758__auto__) {
      return or__3758__auto__;
    } else {
      var G__6226 = coll;
      if (G__6226) {
        var bit__4414__auto__ = G__6226.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4414__auto__ || G__6226.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__6228 = x;
  if (G__6228) {
    var bit__4421__auto__ = G__6228.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4421__auto__ || G__6228.cljs$core$IList$) {
      return true;
    } else {
      if (!G__6228.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__6228);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__6228);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4169__auto__ = self__._hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__6230 = null;
  var G__6230__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__6230__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__6230 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6230__2.call(this, self__, coll);
      case 3:
        return G__6230__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6230.cljs$core$IFn$_invoke$arity$2 = G__6230__2;
  G__6230.cljs$core$IFn$_invoke$arity$3 = G__6230__3;
  return G__6230;
}();
cljs.core.Keyword.prototype.apply = function(self__, args6229) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6229)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__6232 = x;
    if (G__6232) {
      var bit__4414__auto__ = G__6232.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4414__auto__ || G__6232.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__6233 = ls.sval();
        ls = G__6233;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__6235 = s;
    if (G__6235) {
      var bit__4414__auto__ = G__6235.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4414__auto__ || G__6235.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__6236 = cljs.core.next.call(null, s__$1);
      s__$1 = G__6236;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_6237 = 0;
  var xs_6238 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_6238) {
      ret[i_6237] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_6238));
      var G__6239 = i_6237 + 1;
      var G__6240 = cljs.core.next.call(null, xs_6238);
      i_6237 = G__6239;
      xs_6238 = G__6240;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__6241 = i + 1;
          var G__6242 = cljs.core.next.call(null, s__$1);
          i = G__6241;
          s__$1 = G__6242;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4627__auto___6243 = size;
      var i_6244 = 0;
      while (true) {
        if (i_6244 < n__4627__auto___6243) {
          a[i_6244] = init_val_or_seq;
          var G__6245 = i_6244 + 1;
          i_6244 = G__6245;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__6246 = i + 1;
          var G__6247 = cljs.core.next.call(null, s__$1);
          i = G__6246;
          s__$1 = G__6247;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4627__auto___6248 = size;
      var i_6249 = 0;
      while (true) {
        if (i_6249 < n__4627__auto___6248) {
          a[i_6249] = init_val_or_seq;
          var G__6250 = i_6249 + 1;
          i_6249 = G__6250;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__6251 = i + 1;
          var G__6252 = cljs.core.next.call(null, s__$1);
          i = G__6251;
          s__$1 = G__6252;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4627__auto___6253 = size;
      var i_6254 = 0;
      while (true) {
        if (i_6254 < n__4627__auto___6253) {
          a[i_6254] = init_val_or_seq;
          var G__6255 = i_6254 + 1;
          i_6254 = G__6255;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__6256 = i + 1;
          var G__6257 = cljs.core.next.call(null, s__$1);
          i = G__6256;
          s__$1 = G__6257;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4627__auto___6258 = size;
      var i_6259 = 0;
      while (true) {
        if (i_6259 < n__4627__auto___6258) {
          a[i_6259] = init_val_or_seq;
          var G__6260 = i_6259 + 1;
          i_6259 = G__6260;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__6261 = cljs.core.next.call(null, s__$1);
        var G__6262 = i - 1;
        var G__6263 = sum + 1;
        s__$1 = G__6261;
        i = G__6262;
        sum = G__6263;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__6264__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__6264 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6264__delegate.call(this, x, y, zs);
    };
    G__6264.cljs$lang$maxFixedArity = 2;
    G__6264.cljs$lang$applyTo = function(arglist__6265) {
      var x = cljs.core.first(arglist__6265);
      arglist__6265 = cljs.core.next(arglist__6265);
      var y = cljs.core.first(arglist__6265);
      var zs = cljs.core.rest(arglist__6265);
      return G__6264__delegate(x, y, zs);
    };
    G__6264.cljs$core$IFn$_invoke$arity$variadic = G__6264__delegate;
    return G__6264;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__6266__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__6266 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__6266__delegate.call(this, a, b, c, d, more);
    };
    G__6266.cljs$lang$maxFixedArity = 4;
    G__6266.cljs$lang$applyTo = function(arglist__6267) {
      var a = cljs.core.first(arglist__6267);
      arglist__6267 = cljs.core.next(arglist__6267);
      var b = cljs.core.first(arglist__6267);
      arglist__6267 = cljs.core.next(arglist__6267);
      var c = cljs.core.first(arglist__6267);
      arglist__6267 = cljs.core.next(arglist__6267);
      var d = cljs.core.first(arglist__6267);
      var more = cljs.core.rest(arglist__6267);
      return G__6266__delegate(a, b, c, d, more);
    };
    G__6266.cljs$core$IFn$_invoke$arity$variadic = G__6266__delegate;
    return G__6266;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__6268__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__6269 = ntcoll;
          var G__6270 = cljs.core.first.call(null, vals);
          var G__6271 = cljs.core.next.call(null, vals);
          tcoll = G__6269;
          val = G__6270;
          vals = G__6271;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__6268 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6268__delegate.call(this, tcoll, val, vals);
    };
    G__6268.cljs$lang$maxFixedArity = 2;
    G__6268.cljs$lang$applyTo = function(arglist__6272) {
      var tcoll = cljs.core.first(arglist__6272);
      arglist__6272 = cljs.core.next(arglist__6272);
      var val = cljs.core.first(arglist__6272);
      var vals = cljs.core.rest(arglist__6272);
      return G__6268__delegate(tcoll, val, vals);
    };
    G__6268.cljs$core$IFn$_invoke$arity$variadic = G__6268__delegate;
    return G__6268;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__6273__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__6274 = ntcoll;
          var G__6275 = cljs.core.first.call(null, kvs);
          var G__6276 = cljs.core.second.call(null, kvs);
          var G__6277 = cljs.core.nnext.call(null, kvs);
          tcoll = G__6274;
          key = G__6275;
          val = G__6276;
          kvs = G__6277;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__6273 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6273__delegate.call(this, tcoll, key, val, kvs);
    };
    G__6273.cljs$lang$maxFixedArity = 3;
    G__6273.cljs$lang$applyTo = function(arglist__6278) {
      var tcoll = cljs.core.first(arglist__6278);
      arglist__6278 = cljs.core.next(arglist__6278);
      var key = cljs.core.first(arglist__6278);
      arglist__6278 = cljs.core.next(arglist__6278);
      var val = cljs.core.first(arglist__6278);
      var kvs = cljs.core.rest(arglist__6278);
      return G__6273__delegate(tcoll, key, val, kvs);
    };
    G__6273.cljs$core$IFn$_invoke$arity$variadic = G__6273__delegate;
    return G__6273;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__6279__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__6280 = ntcoll;
          var G__6281 = cljs.core.first.call(null, ks);
          var G__6282 = cljs.core.next.call(null, ks);
          tcoll = G__6280;
          key = G__6281;
          ks = G__6282;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__6279 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6279__delegate.call(this, tcoll, key, ks);
    };
    G__6279.cljs$lang$maxFixedArity = 2;
    G__6279.cljs$lang$applyTo = function(arglist__6283) {
      var tcoll = cljs.core.first(arglist__6283);
      arglist__6283 = cljs.core.next(arglist__6283);
      var key = cljs.core.first(arglist__6283);
      var ks = cljs.core.rest(arglist__6283);
      return G__6279__delegate(tcoll, key, ks);
    };
    G__6279.cljs$core$IFn$_invoke$arity$variadic = G__6279__delegate;
    return G__6279;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__6284__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__6285 = ntcoll;
          var G__6286 = cljs.core.first.call(null, vals);
          var G__6287 = cljs.core.next.call(null, vals);
          tcoll = G__6285;
          val = G__6286;
          vals = G__6287;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__6284 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6284__delegate.call(this, tcoll, val, vals);
    };
    G__6284.cljs$lang$maxFixedArity = 2;
    G__6284.cljs$lang$applyTo = function(arglist__6288) {
      var tcoll = cljs.core.first(arglist__6288);
      arglist__6288 = cljs.core.next(arglist__6288);
      var val = cljs.core.first(arglist__6288);
      var vals = cljs.core.rest(arglist__6288);
      return G__6284__delegate(tcoll, val, vals);
    };
    G__6284.cljs$core$IFn$_invoke$arity$variadic = G__6284__delegate;
    return G__6284;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4671 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4671);
      } else {
        return f.call(null, a4671);
      }
    } else {
      var b4672 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4671, b4672);
        } else {
          return f.call(null, a4671, b4672);
        }
      } else {
        var c4673 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4671, b4672, c4673);
          } else {
            return f.call(null, a4671, b4672, c4673);
          }
        } else {
          var d4674 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4671, b4672, c4673, d4674);
            } else {
              return f.call(null, a4671, b4672, c4673, d4674);
            }
          } else {
            var e4675 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4671, b4672, c4673, d4674, e4675);
              } else {
                return f.call(null, a4671, b4672, c4673, d4674, e4675);
              }
            } else {
              var f4676 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4671, b4672, c4673, d4674, e4675, f4676);
                } else {
                  return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676);
                }
              } else {
                var g4677 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4671, b4672, c4673, d4674, e4675, f4676, g4677);
                  } else {
                    return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677);
                  }
                } else {
                  var h4678 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678);
                    } else {
                      return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678);
                    }
                  } else {
                    var i4679 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679);
                      } else {
                        return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679);
                      }
                    } else {
                      var j4680 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680);
                        } else {
                          return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680);
                        }
                      } else {
                        var k4681 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681);
                          } else {
                            return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681);
                          }
                        } else {
                          var l4682 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682);
                            } else {
                              return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682);
                            }
                          } else {
                            var m4683 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683);
                              } else {
                                return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683);
                              }
                            } else {
                              var n4684 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684);
                                } else {
                                  return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684);
                                }
                              } else {
                                var o4685 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685);
                                  } else {
                                    return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685);
                                  }
                                } else {
                                  var p4686 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685, p4686);
                                    } else {
                                      return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685, p4686);
                                    }
                                  } else {
                                    var q4687 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685, p4686, q4687);
                                      } else {
                                        return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685, p4686, q4687);
                                      }
                                    } else {
                                      var r4688 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685, p4686, q4687, r4688);
                                        } else {
                                          return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685, p4686, q4687, r4688);
                                        }
                                      } else {
                                        var s4689 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685, p4686, q4687, r4688, s4689);
                                          } else {
                                            return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685, p4686, q4687, r4688, s4689);
                                          }
                                        } else {
                                          var t4690 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685, p4686, q4687, r4688, s4689, t4690);
                                            } else {
                                              return f.call(null, a4671, b4672, c4673, d4674, e4675, f4676, g4677, h4678, i4679, j4680, k4681, l4682, m4683, n4684, o4685, p4686, q4687, r4688, s4689, t4690);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__6289__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__6289 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__6289__delegate.call(this, f, a, b, c, d, args);
    };
    G__6289.cljs$lang$maxFixedArity = 5;
    G__6289.cljs$lang$applyTo = function(arglist__6290) {
      var f = cljs.core.first(arglist__6290);
      arglist__6290 = cljs.core.next(arglist__6290);
      var a = cljs.core.first(arglist__6290);
      arglist__6290 = cljs.core.next(arglist__6290);
      var b = cljs.core.first(arglist__6290);
      arglist__6290 = cljs.core.next(arglist__6290);
      var c = cljs.core.first(arglist__6290);
      arglist__6290 = cljs.core.next(arglist__6290);
      var d = cljs.core.first(arglist__6290);
      var args = cljs.core.rest(arglist__6290);
      return G__6289__delegate(f, a, b, c, d, args);
    };
    G__6289.cljs$core$IFn$_invoke$arity$variadic = G__6289__delegate;
    return G__6289;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__6291__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__6291 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__6291__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__6291.cljs$lang$maxFixedArity = 6;
    G__6291.cljs$lang$applyTo = function(arglist__6292) {
      var obj = cljs.core.first(arglist__6292);
      arglist__6292 = cljs.core.next(arglist__6292);
      var f = cljs.core.first(arglist__6292);
      arglist__6292 = cljs.core.next(arglist__6292);
      var a = cljs.core.first(arglist__6292);
      arglist__6292 = cljs.core.next(arglist__6292);
      var b = cljs.core.first(arglist__6292);
      arglist__6292 = cljs.core.next(arglist__6292);
      var c = cljs.core.first(arglist__6292);
      arglist__6292 = cljs.core.next(arglist__6292);
      var d = cljs.core.first(arglist__6292);
      var args = cljs.core.rest(arglist__6292);
      return G__6291__delegate(obj, f, a, b, c, d, args);
    };
    G__6291.cljs$core$IFn$_invoke$arity$variadic = G__6291__delegate;
    return G__6291;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__6293__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__6293 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6293__delegate.call(this, x, y, more);
    };
    G__6293.cljs$lang$maxFixedArity = 2;
    G__6293.cljs$lang$applyTo = function(arglist__6294) {
      var x = cljs.core.first(arglist__6294);
      arglist__6294 = cljs.core.next(arglist__6294);
      var y = cljs.core.first(arglist__6294);
      var more = cljs.core.rest(arglist__6294);
      return G__6293__delegate(x, y, more);
    };
    G__6293.cljs$core$IFn$_invoke$arity$variadic = G__6293__delegate;
    return G__6293;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t6298 !== "undefined") {
  } else {
    cljs.core.t6298 = function(nil_iter, meta6299) {
      this.nil_iter = nil_iter;
      this.meta6299 = meta6299;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t6298.cljs$lang$type = true;
    cljs.core.t6298.cljs$lang$ctorStr = "cljs.core/t6298";
    cljs.core.t6298.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
      return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/t6298");
    };
    cljs.core.t6298.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t6298.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t6298.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t6298.prototype.cljs$core$IMeta$_meta$arity$1 = function(_6300) {
      var self__ = this;
      var _6300__$1 = this;
      return self__.meta6299;
    };
    cljs.core.t6298.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_6300, meta6299__$1) {
      var self__ = this;
      var _6300__$1 = this;
      return new cljs.core.t6298(self__.nil_iter, meta6299__$1);
    };
    cljs.core.__GT_t6298 = function __GT_t6298(nil_iter__$1, meta6299) {
      return new cljs.core.t6298(nil_iter__$1, meta6299);
    };
  }
  return new cljs.core.t6298(nil_iter, null);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/StringIter");
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/ArrayIter");
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/SeqIter");
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error("Cannot create iterator from " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Stepper");
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3746__auto__ = !(lt.stepper == null);
      if (and__3746__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3746__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/MultiStepper");
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__6301 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__6301;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4627__auto___6302 = self__.iters.length;
  var i_6303 = 0;
  while (true) {
    if (i_6303 < n__4627__auto___6302) {
      self__.nexts[i_6303] = self__.iters[i_6303].next();
      var G__6304 = i_6303 + 1;
      i_6303 = G__6304;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3746__auto__ = !(lt.stepper == null);
      if (and__3746__auto__) {
        return this$.hasNext();
      } else {
        return and__3746__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/LazyTransformer");
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__6305_6309 = cljs.core.seq.call(null, colls);
  var chunk__6306_6310 = null;
  var count__6307_6311 = 0;
  var i__6308_6312 = 0;
  while (true) {
    if (i__6308_6312 < count__6307_6311) {
      var coll_6313 = cljs.core._nth.call(null, chunk__6306_6310, i__6308_6312);
      iters.push(cljs.core.iter.call(null, coll_6313));
      var G__6314 = seq__6305_6309;
      var G__6315 = chunk__6306_6310;
      var G__6316 = count__6307_6311;
      var G__6317 = i__6308_6312 + 1;
      seq__6305_6309 = G__6314;
      chunk__6306_6310 = G__6315;
      count__6307_6311 = G__6316;
      i__6308_6312 = G__6317;
      continue;
    } else {
      var temp__4126__auto___6318 = cljs.core.seq.call(null, seq__6305_6309);
      if (temp__4126__auto___6318) {
        var seq__6305_6319__$1 = temp__4126__auto___6318;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6305_6319__$1)) {
          var c__4527__auto___6320 = cljs.core.chunk_first.call(null, seq__6305_6319__$1);
          var G__6321 = cljs.core.chunk_rest.call(null, seq__6305_6319__$1);
          var G__6322 = c__4527__auto___6320;
          var G__6323 = cljs.core.count.call(null, c__4527__auto___6320);
          var G__6324 = 0;
          seq__6305_6309 = G__6321;
          chunk__6306_6310 = G__6322;
          count__6307_6311 = G__6323;
          i__6308_6312 = G__6324;
          continue;
        } else {
          var coll_6325 = cljs.core.first.call(null, seq__6305_6319__$1);
          iters.push(cljs.core.iter.call(null, coll_6325));
          var G__6326 = cljs.core.next.call(null, seq__6305_6319__$1);
          var G__6327 = null;
          var G__6328 = 0;
          var G__6329 = 0;
          seq__6305_6309 = G__6326;
          chunk__6306_6310 = G__6327;
          count__6307_6311 = G__6328;
          i__6308_6312 = G__6329;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3758__auto__ = cljs.core.seq.call(null, coll);
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__6330__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__6330 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6330__delegate.call(this, xform, coll, colls);
    };
    G__6330.cljs$lang$maxFixedArity = 2;
    G__6330.cljs$lang$applyTo = function(arglist__6331) {
      var xform = cljs.core.first(arglist__6331);
      arglist__6331 = cljs.core.next(arglist__6331);
      var coll = cljs.core.first(arglist__6331);
      var colls = cljs.core.rest(arglist__6331);
      return G__6330__delegate(xform, coll, colls);
    };
    G__6330.cljs$core$IFn$_invoke$arity$variadic = G__6330__delegate;
    return G__6330;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__6332 = pred;
        var G__6333 = cljs.core.next.call(null, coll);
        pred = G__6332;
        coll = G__6333;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3758__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3758__auto__)) {
        return or__3758__auto__;
      } else {
        var G__6334 = pred;
        var G__6335 = cljs.core.next.call(null, coll);
        pred = G__6334;
        coll = G__6335;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__6336 = null;
    var G__6336__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__6336__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__6336__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__6336__3 = function() {
      var G__6337__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__6337 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__6337__delegate.call(this, x, y, zs);
      };
      G__6337.cljs$lang$maxFixedArity = 2;
      G__6337.cljs$lang$applyTo = function(arglist__6338) {
        var x = cljs.core.first(arglist__6338);
        arglist__6338 = cljs.core.next(arglist__6338);
        var y = cljs.core.first(arglist__6338);
        var zs = cljs.core.rest(arglist__6338);
        return G__6337__delegate(x, y, zs);
      };
      G__6337.cljs$core$IFn$_invoke$arity$variadic = G__6337__delegate;
      return G__6337;
    }();
    G__6336 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__6336__0.call(this);
        case 1:
          return G__6336__1.call(this, x);
        case 2:
          return G__6336__2.call(this, x, y);
        default:
          return G__6336__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__6336.cljs$lang$maxFixedArity = 2;
    G__6336.cljs$lang$applyTo = G__6336__3.cljs$lang$applyTo;
    G__6336.cljs$core$IFn$_invoke$arity$0 = G__6336__0;
    G__6336.cljs$core$IFn$_invoke$arity$1 = G__6336__1;
    G__6336.cljs$core$IFn$_invoke$arity$2 = G__6336__2;
    G__6336.cljs$core$IFn$_invoke$arity$variadic = G__6336__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__6336;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__6339__delegate = function(args) {
      return x;
    };
    var G__6339 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__6339__delegate.call(this, args);
    };
    G__6339.cljs$lang$maxFixedArity = 0;
    G__6339.cljs$lang$applyTo = function(arglist__6340) {
      var args = cljs.core.seq(arglist__6340);
      return G__6339__delegate(args);
    };
    G__6339.cljs$core$IFn$_invoke$arity$variadic = G__6339__delegate;
    return G__6339;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__6341 = null;
      var G__6341__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__6341__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__6341__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__6341__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__6341__4 = function() {
        var G__6342__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__6342 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6342__delegate.call(this, x, y, z, args);
        };
        G__6342.cljs$lang$maxFixedArity = 3;
        G__6342.cljs$lang$applyTo = function(arglist__6343) {
          var x = cljs.core.first(arglist__6343);
          arglist__6343 = cljs.core.next(arglist__6343);
          var y = cljs.core.first(arglist__6343);
          arglist__6343 = cljs.core.next(arglist__6343);
          var z = cljs.core.first(arglist__6343);
          var args = cljs.core.rest(arglist__6343);
          return G__6342__delegate(x, y, z, args);
        };
        G__6342.cljs$core$IFn$_invoke$arity$variadic = G__6342__delegate;
        return G__6342;
      }();
      G__6341 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__6341__0.call(this);
          case 1:
            return G__6341__1.call(this, x);
          case 2:
            return G__6341__2.call(this, x, y);
          case 3:
            return G__6341__3.call(this, x, y, z);
          default:
            return G__6341__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6341.cljs$lang$maxFixedArity = 3;
      G__6341.cljs$lang$applyTo = G__6341__4.cljs$lang$applyTo;
      G__6341.cljs$core$IFn$_invoke$arity$0 = G__6341__0;
      G__6341.cljs$core$IFn$_invoke$arity$1 = G__6341__1;
      G__6341.cljs$core$IFn$_invoke$arity$2 = G__6341__2;
      G__6341.cljs$core$IFn$_invoke$arity$3 = G__6341__3;
      G__6341.cljs$core$IFn$_invoke$arity$variadic = G__6341__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6341;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__6344 = null;
      var G__6344__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__6344__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__6344__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__6344__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__6344__4 = function() {
        var G__6345__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__6345 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6345__delegate.call(this, x, y, z, args);
        };
        G__6345.cljs$lang$maxFixedArity = 3;
        G__6345.cljs$lang$applyTo = function(arglist__6346) {
          var x = cljs.core.first(arglist__6346);
          arglist__6346 = cljs.core.next(arglist__6346);
          var y = cljs.core.first(arglist__6346);
          arglist__6346 = cljs.core.next(arglist__6346);
          var z = cljs.core.first(arglist__6346);
          var args = cljs.core.rest(arglist__6346);
          return G__6345__delegate(x, y, z, args);
        };
        G__6345.cljs$core$IFn$_invoke$arity$variadic = G__6345__delegate;
        return G__6345;
      }();
      G__6344 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__6344__0.call(this);
          case 1:
            return G__6344__1.call(this, x);
          case 2:
            return G__6344__2.call(this, x, y);
          case 3:
            return G__6344__3.call(this, x, y, z);
          default:
            return G__6344__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6344.cljs$lang$maxFixedArity = 3;
      G__6344.cljs$lang$applyTo = G__6344__4.cljs$lang$applyTo;
      G__6344.cljs$core$IFn$_invoke$arity$0 = G__6344__0;
      G__6344.cljs$core$IFn$_invoke$arity$1 = G__6344__1;
      G__6344.cljs$core$IFn$_invoke$arity$2 = G__6344__2;
      G__6344.cljs$core$IFn$_invoke$arity$3 = G__6344__3;
      G__6344.cljs$core$IFn$_invoke$arity$variadic = G__6344__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6344;
    }();
  };
  var comp__4 = function() {
    var G__6347__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__6348__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__6349 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__6350 = cljs.core.next.call(null, fs__$2);
                ret = G__6349;
                fs__$2 = G__6350;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__6348 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__6348__delegate.call(this, args);
          };
          G__6348.cljs$lang$maxFixedArity = 0;
          G__6348.cljs$lang$applyTo = function(arglist__6351) {
            var args = cljs.core.seq(arglist__6351);
            return G__6348__delegate(args);
          };
          G__6348.cljs$core$IFn$_invoke$arity$variadic = G__6348__delegate;
          return G__6348;
        }();
      }(fs__$1);
    };
    var G__6347 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6347__delegate.call(this, f1, f2, f3, fs);
    };
    G__6347.cljs$lang$maxFixedArity = 3;
    G__6347.cljs$lang$applyTo = function(arglist__6352) {
      var f1 = cljs.core.first(arglist__6352);
      arglist__6352 = cljs.core.next(arglist__6352);
      var f2 = cljs.core.first(arglist__6352);
      arglist__6352 = cljs.core.next(arglist__6352);
      var f3 = cljs.core.first(arglist__6352);
      var fs = cljs.core.rest(arglist__6352);
      return G__6347__delegate(f1, f2, f3, fs);
    };
    G__6347.cljs$core$IFn$_invoke$arity$variadic = G__6347__delegate;
    return G__6347;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__6353__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__6353 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__6353__delegate.call(this, args);
      };
      G__6353.cljs$lang$maxFixedArity = 0;
      G__6353.cljs$lang$applyTo = function(arglist__6354) {
        var args = cljs.core.seq(arglist__6354);
        return G__6353__delegate(args);
      };
      G__6353.cljs$core$IFn$_invoke$arity$variadic = G__6353__delegate;
      return G__6353;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__6355__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__6355 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__6355__delegate.call(this, args);
      };
      G__6355.cljs$lang$maxFixedArity = 0;
      G__6355.cljs$lang$applyTo = function(arglist__6356) {
        var args = cljs.core.seq(arglist__6356);
        return G__6355__delegate(args);
      };
      G__6355.cljs$core$IFn$_invoke$arity$variadic = G__6355__delegate;
      return G__6355;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__6357__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__6357 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__6357__delegate.call(this, args);
      };
      G__6357.cljs$lang$maxFixedArity = 0;
      G__6357.cljs$lang$applyTo = function(arglist__6358) {
        var args = cljs.core.seq(arglist__6358);
        return G__6357__delegate(args);
      };
      G__6357.cljs$core$IFn$_invoke$arity$variadic = G__6357__delegate;
      return G__6357;
    }();
  };
  var partial__5 = function() {
    var G__6359__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__6360__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__6360 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__6360__delegate.call(this, args);
        };
        G__6360.cljs$lang$maxFixedArity = 0;
        G__6360.cljs$lang$applyTo = function(arglist__6361) {
          var args = cljs.core.seq(arglist__6361);
          return G__6360__delegate(args);
        };
        G__6360.cljs$core$IFn$_invoke$arity$variadic = G__6360__delegate;
        return G__6360;
      }();
    };
    var G__6359 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__6359__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__6359.cljs$lang$maxFixedArity = 4;
    G__6359.cljs$lang$applyTo = function(arglist__6362) {
      var f = cljs.core.first(arglist__6362);
      arglist__6362 = cljs.core.next(arglist__6362);
      var arg1 = cljs.core.first(arglist__6362);
      arglist__6362 = cljs.core.next(arglist__6362);
      var arg2 = cljs.core.first(arglist__6362);
      arglist__6362 = cljs.core.next(arglist__6362);
      var arg3 = cljs.core.first(arglist__6362);
      var more = cljs.core.rest(arglist__6362);
      return G__6359__delegate(f, arg1, arg2, arg3, more);
    };
    G__6359.cljs$core$IFn$_invoke$arity$variadic = G__6359__delegate;
    return G__6359;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__6363 = null;
      var G__6363__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__6363__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__6363__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__6363__4 = function() {
        var G__6364__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__6364 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6364__delegate.call(this, a, b, c, ds);
        };
        G__6364.cljs$lang$maxFixedArity = 3;
        G__6364.cljs$lang$applyTo = function(arglist__6365) {
          var a = cljs.core.first(arglist__6365);
          arglist__6365 = cljs.core.next(arglist__6365);
          var b = cljs.core.first(arglist__6365);
          arglist__6365 = cljs.core.next(arglist__6365);
          var c = cljs.core.first(arglist__6365);
          var ds = cljs.core.rest(arglist__6365);
          return G__6364__delegate(a, b, c, ds);
        };
        G__6364.cljs$core$IFn$_invoke$arity$variadic = G__6364__delegate;
        return G__6364;
      }();
      G__6363 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__6363__1.call(this, a);
          case 2:
            return G__6363__2.call(this, a, b);
          case 3:
            return G__6363__3.call(this, a, b, c);
          default:
            return G__6363__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6363.cljs$lang$maxFixedArity = 3;
      G__6363.cljs$lang$applyTo = G__6363__4.cljs$lang$applyTo;
      G__6363.cljs$core$IFn$_invoke$arity$1 = G__6363__1;
      G__6363.cljs$core$IFn$_invoke$arity$2 = G__6363__2;
      G__6363.cljs$core$IFn$_invoke$arity$3 = G__6363__3;
      G__6363.cljs$core$IFn$_invoke$arity$variadic = G__6363__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6363;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__6366 = null;
      var G__6366__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__6366__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__6366__4 = function() {
        var G__6367__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__6367 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6367__delegate.call(this, a, b, c, ds);
        };
        G__6367.cljs$lang$maxFixedArity = 3;
        G__6367.cljs$lang$applyTo = function(arglist__6368) {
          var a = cljs.core.first(arglist__6368);
          arglist__6368 = cljs.core.next(arglist__6368);
          var b = cljs.core.first(arglist__6368);
          arglist__6368 = cljs.core.next(arglist__6368);
          var c = cljs.core.first(arglist__6368);
          var ds = cljs.core.rest(arglist__6368);
          return G__6367__delegate(a, b, c, ds);
        };
        G__6367.cljs$core$IFn$_invoke$arity$variadic = G__6367__delegate;
        return G__6367;
      }();
      G__6366 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__6366__2.call(this, a, b);
          case 3:
            return G__6366__3.call(this, a, b, c);
          default:
            return G__6366__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6366.cljs$lang$maxFixedArity = 3;
      G__6366.cljs$lang$applyTo = G__6366__4.cljs$lang$applyTo;
      G__6366.cljs$core$IFn$_invoke$arity$2 = G__6366__2;
      G__6366.cljs$core$IFn$_invoke$arity$3 = G__6366__3;
      G__6366.cljs$core$IFn$_invoke$arity$variadic = G__6366__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6366;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__6369 = null;
      var G__6369__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__6369__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__6369__4 = function() {
        var G__6370__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__6370 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6370__delegate.call(this, a, b, c, ds);
        };
        G__6370.cljs$lang$maxFixedArity = 3;
        G__6370.cljs$lang$applyTo = function(arglist__6371) {
          var a = cljs.core.first(arglist__6371);
          arglist__6371 = cljs.core.next(arglist__6371);
          var b = cljs.core.first(arglist__6371);
          arglist__6371 = cljs.core.next(arglist__6371);
          var c = cljs.core.first(arglist__6371);
          var ds = cljs.core.rest(arglist__6371);
          return G__6370__delegate(a, b, c, ds);
        };
        G__6370.cljs$core$IFn$_invoke$arity$variadic = G__6370__delegate;
        return G__6370;
      }();
      G__6369 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__6369__2.call(this, a, b);
          case 3:
            return G__6369__3.call(this, a, b, c);
          default:
            return G__6369__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6369.cljs$lang$maxFixedArity = 3;
      G__6369.cljs$lang$applyTo = G__6369__4.cljs$lang$applyTo;
      G__6369.cljs$core$IFn$_invoke$arity$2 = G__6369__2;
      G__6369.cljs$core$IFn$_invoke$arity$3 = G__6369__3;
      G__6369.cljs$core$IFn$_invoke$arity$variadic = G__6369__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6369;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4627__auto___6372 = size;
          var i_6373 = 0;
          while (true) {
            if (i_6373 < n__4627__auto___6372) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_6373, cljs.core._nth.call(null, c, i_6373)));
              var G__6374 = i_6373 + 1;
              i_6373 = G__6374;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(f1) {
      return function() {
        var G__6375 = null;
        var G__6375__0 = function() {
          return f1.call(null);
        };
        var G__6375__1 = function(result) {
          return f1.call(null, result);
        };
        var G__6375__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return f1.call(null, result, v);
          }
        };
        G__6375 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__6375__0.call(this);
            case 1:
              return G__6375__1.call(this, result);
            case 2:
              return G__6375__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__6375.cljs$core$IFn$_invoke$arity$0 = G__6375__0;
        G__6375.cljs$core$IFn$_invoke$arity$1 = G__6375__1;
        G__6375.cljs$core$IFn$_invoke$arity$2 = G__6375__2;
        return G__6375;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4627__auto___6376 = size;
          var i_6377 = 0;
          while (true) {
            if (i_6377 < n__4627__auto___6376) {
              var x_6378 = f.call(null, cljs.core._nth.call(null, c, i_6377));
              if (x_6378 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_6378);
              }
              var G__6379 = i_6377 + 1;
              i_6377 = G__6379;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__6380 = cljs.core.seq.call(null, self__.watches);
  var chunk__6381 = null;
  var count__6382 = 0;
  var i__6383 = 0;
  while (true) {
    if (i__6383 < count__6382) {
      var vec__6384 = cljs.core._nth.call(null, chunk__6381, i__6383);
      var key = cljs.core.nth.call(null, vec__6384, 0, null);
      var f = cljs.core.nth.call(null, vec__6384, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__6386 = seq__6380;
      var G__6387 = chunk__6381;
      var G__6388 = count__6382;
      var G__6389 = i__6383 + 1;
      seq__6380 = G__6386;
      chunk__6381 = G__6387;
      count__6382 = G__6388;
      i__6383 = G__6389;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6380);
      if (temp__4126__auto__) {
        var seq__6380__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6380__$1)) {
          var c__4527__auto__ = cljs.core.chunk_first.call(null, seq__6380__$1);
          var G__6390 = cljs.core.chunk_rest.call(null, seq__6380__$1);
          var G__6391 = c__4527__auto__;
          var G__6392 = cljs.core.count.call(null, c__4527__auto__);
          var G__6393 = 0;
          seq__6380 = G__6390;
          chunk__6381 = G__6391;
          count__6382 = G__6392;
          i__6383 = G__6393;
          continue;
        } else {
          var vec__6385 = cljs.core.first.call(null, seq__6380__$1);
          var key = cljs.core.nth.call(null, vec__6385, 0, null);
          var f = cljs.core.nth.call(null, vec__6385, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__6394 = cljs.core.next.call(null, seq__6380__$1);
          var G__6395 = null;
          var G__6396 = 0;
          var G__6397 = 0;
          seq__6380 = G__6394;
          chunk__6381 = G__6395;
          count__6382 = G__6396;
          i__6383 = G__6397;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__6401__delegate = function(x, p__6398) {
      var map__6400 = p__6398;
      var map__6400__$1 = cljs.core.seq_QMARK_.call(null, map__6400) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6400) : map__6400;
      var validator = cljs.core.get.call(null, map__6400__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__6400__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__6401 = function(x, var_args) {
      var p__6398 = null;
      if (arguments.length > 1) {
        p__6398 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__6401__delegate.call(this, x, p__6398);
    };
    G__6401.cljs$lang$maxFixedArity = 1;
    G__6401.cljs$lang$applyTo = function(arglist__6402) {
      var x = cljs.core.first(arglist__6402);
      var p__6398 = cljs.core.rest(arglist__6402);
      return G__6401__delegate(x, p__6398);
    };
    G__6401.cljs$core$IFn$_invoke$arity$variadic = G__6401__delegate;
    return G__6401;
  }();
  atom = function(x, var_args) {
    var p__6398 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__6403__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__6403 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__6403__delegate.call(this, a, f, x, y, more);
    };
    G__6403.cljs$lang$maxFixedArity = 4;
    G__6403.cljs$lang$applyTo = function(arglist__6404) {
      var a = cljs.core.first(arglist__6404);
      arglist__6404 = cljs.core.next(arglist__6404);
      var f = cljs.core.first(arglist__6404);
      arglist__6404 = cljs.core.next(arglist__6404);
      var x = cljs.core.first(arglist__6404);
      arglist__6404 = cljs.core.next(arglist__6404);
      var y = cljs.core.first(arglist__6404);
      var more = cljs.core.rest(arglist__6404);
      return G__6403__delegate(a, f, x, y, more);
    };
    G__6403.cljs$core$IFn$_invoke$arity$variadic = G__6403__delegate;
    return G__6403;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(f1) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__6405 = null;
          var G__6405__0 = function() {
            return f1.call(null);
          };
          var G__6405__1 = function(result) {
            return f1.call(null, result);
          };
          var G__6405__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return f1.call(null, result, v);
            }
          };
          G__6405 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6405__0.call(this);
              case 1:
                return G__6405__1.call(this, result);
              case 2:
                return G__6405__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6405.cljs$core$IFn$_invoke$arity$0 = G__6405__0;
          G__6405.cljs$core$IFn$_invoke$arity$1 = G__6405__1;
          G__6405.cljs$core$IFn$_invoke$arity$2 = G__6405__2;
          return G__6405;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4627__auto___6406 = size;
            var i_6407 = 0;
            while (true) {
              if (i_6407 < n__4627__auto___6406) {
                var x_6408 = f.call(null, idx + i_6407, cljs.core._nth.call(null, c, i_6407));
                if (x_6408 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_6408);
                }
                var G__6409 = i_6407 + 1;
                i_6407 = G__6409;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3746__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3746__auto__)) {
            return p.call(null, y);
          } else {
            return and__3746__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3746__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3746__auto__)) {
            var and__3746__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3746__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3746__auto____$1;
            }
          } else {
            return and__3746__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__6416__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__6416 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6416__delegate.call(this, x, y, z, args);
        };
        G__6416.cljs$lang$maxFixedArity = 3;
        G__6416.cljs$lang$applyTo = function(arglist__6417) {
          var x = cljs.core.first(arglist__6417);
          arglist__6417 = cljs.core.next(arglist__6417);
          var y = cljs.core.first(arglist__6417);
          arglist__6417 = cljs.core.next(arglist__6417);
          var z = cljs.core.first(arglist__6417);
          var args = cljs.core.rest(arglist__6417);
          return G__6416__delegate(x, y, z, args);
        };
        G__6416.cljs$core$IFn$_invoke$arity$variadic = G__6416__delegate;
        return G__6416;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3746__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3746__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3746__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3746__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3746__auto__)) {
            var and__3746__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3746__auto____$1)) {
              var and__3746__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3746__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3746__auto____$2;
              }
            } else {
              return and__3746__auto____$1;
            }
          } else {
            return and__3746__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3746__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3746__auto__)) {
            var and__3746__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3746__auto____$1)) {
              var and__3746__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3746__auto____$2)) {
                var and__3746__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3746__auto____$3)) {
                  var and__3746__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3746__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3746__auto____$4;
                  }
                } else {
                  return and__3746__auto____$3;
                }
              } else {
                return and__3746__auto____$2;
              }
            } else {
              return and__3746__auto____$1;
            }
          } else {
            return and__3746__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__6418__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__6410_SHARP_) {
            var and__3746__auto__ = p1.call(null, p1__6410_SHARP_);
            if (cljs.core.truth_(and__3746__auto__)) {
              return p2.call(null, p1__6410_SHARP_);
            } else {
              return and__3746__auto__;
            }
          }, args));
        };
        var G__6418 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6418__delegate.call(this, x, y, z, args);
        };
        G__6418.cljs$lang$maxFixedArity = 3;
        G__6418.cljs$lang$applyTo = function(arglist__6419) {
          var x = cljs.core.first(arglist__6419);
          arglist__6419 = cljs.core.next(arglist__6419);
          var y = cljs.core.first(arglist__6419);
          arglist__6419 = cljs.core.next(arglist__6419);
          var z = cljs.core.first(arglist__6419);
          var args = cljs.core.rest(arglist__6419);
          return G__6418__delegate(x, y, z, args);
        };
        G__6418.cljs$core$IFn$_invoke$arity$variadic = G__6418__delegate;
        return G__6418;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3746__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3746__auto__)) {
            var and__3746__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3746__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3746__auto____$1;
            }
          } else {
            return and__3746__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3746__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3746__auto__)) {
            var and__3746__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3746__auto____$1)) {
              var and__3746__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3746__auto____$2)) {
                var and__3746__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3746__auto____$3)) {
                  var and__3746__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3746__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3746__auto____$4;
                  }
                } else {
                  return and__3746__auto____$3;
                }
              } else {
                return and__3746__auto____$2;
              }
            } else {
              return and__3746__auto____$1;
            }
          } else {
            return and__3746__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3746__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3746__auto__)) {
            var and__3746__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3746__auto____$1)) {
              var and__3746__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3746__auto____$2)) {
                var and__3746__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3746__auto____$3)) {
                  var and__3746__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3746__auto____$4)) {
                    var and__3746__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3746__auto____$5)) {
                      var and__3746__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3746__auto____$6)) {
                        var and__3746__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3746__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3746__auto____$7;
                        }
                      } else {
                        return and__3746__auto____$6;
                      }
                    } else {
                      return and__3746__auto____$5;
                    }
                  } else {
                    return and__3746__auto____$4;
                  }
                } else {
                  return and__3746__auto____$3;
                }
              } else {
                return and__3746__auto____$2;
              }
            } else {
              return and__3746__auto____$1;
            }
          } else {
            return and__3746__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__6420__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__6411_SHARP_) {
            var and__3746__auto__ = p1.call(null, p1__6411_SHARP_);
            if (cljs.core.truth_(and__3746__auto__)) {
              var and__3746__auto____$1 = p2.call(null, p1__6411_SHARP_);
              if (cljs.core.truth_(and__3746__auto____$1)) {
                return p3.call(null, p1__6411_SHARP_);
              } else {
                return and__3746__auto____$1;
              }
            } else {
              return and__3746__auto__;
            }
          }, args));
        };
        var G__6420 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6420__delegate.call(this, x, y, z, args);
        };
        G__6420.cljs$lang$maxFixedArity = 3;
        G__6420.cljs$lang$applyTo = function(arglist__6421) {
          var x = cljs.core.first(arglist__6421);
          arglist__6421 = cljs.core.next(arglist__6421);
          var y = cljs.core.first(arglist__6421);
          arglist__6421 = cljs.core.next(arglist__6421);
          var z = cljs.core.first(arglist__6421);
          var args = cljs.core.rest(arglist__6421);
          return G__6420__delegate(x, y, z, args);
        };
        G__6420.cljs$core$IFn$_invoke$arity$variadic = G__6420__delegate;
        return G__6420;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__6422__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__6412_SHARP_) {
                return p1__6412_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__6413_SHARP_) {
                var and__3746__auto__ = p1__6413_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3746__auto__)) {
                  return p1__6413_SHARP_.call(null, y);
                } else {
                  return and__3746__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__6414_SHARP_) {
                var and__3746__auto__ = p1__6414_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3746__auto__)) {
                  var and__3746__auto____$1 = p1__6414_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3746__auto____$1)) {
                    return p1__6414_SHARP_.call(null, z);
                  } else {
                    return and__3746__auto____$1;
                  }
                } else {
                  return and__3746__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__6423__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__6415_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__6415_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__6423 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__6423__delegate.call(this, x, y, z, args);
            };
            G__6423.cljs$lang$maxFixedArity = 3;
            G__6423.cljs$lang$applyTo = function(arglist__6424) {
              var x = cljs.core.first(arglist__6424);
              arglist__6424 = cljs.core.next(arglist__6424);
              var y = cljs.core.first(arglist__6424);
              arglist__6424 = cljs.core.next(arglist__6424);
              var z = cljs.core.first(arglist__6424);
              var args = cljs.core.rest(arglist__6424);
              return G__6423__delegate(x, y, z, args);
            };
            G__6423.cljs$core$IFn$_invoke$arity$variadic = G__6423__delegate;
            return G__6423;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__6422 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6422__delegate.call(this, p1, p2, p3, ps);
    };
    G__6422.cljs$lang$maxFixedArity = 3;
    G__6422.cljs$lang$applyTo = function(arglist__6425) {
      var p1 = cljs.core.first(arglist__6425);
      arglist__6425 = cljs.core.next(arglist__6425);
      var p2 = cljs.core.first(arglist__6425);
      arglist__6425 = cljs.core.next(arglist__6425);
      var p3 = cljs.core.first(arglist__6425);
      var ps = cljs.core.rest(arglist__6425);
      return G__6422__delegate(p1, p2, p3, ps);
    };
    G__6422.cljs$core$IFn$_invoke$arity$variadic = G__6422__delegate;
    return G__6422;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3758__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3758__auto__)) {
          return or__3758__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3758__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3758__auto__)) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3758__auto____$1)) {
            return or__3758__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__6432__delegate = function(x, y, z, args) {
          var or__3758__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3758__auto__)) {
            return or__3758__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__6432 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6432__delegate.call(this, x, y, z, args);
        };
        G__6432.cljs$lang$maxFixedArity = 3;
        G__6432.cljs$lang$applyTo = function(arglist__6433) {
          var x = cljs.core.first(arglist__6433);
          arglist__6433 = cljs.core.next(arglist__6433);
          var y = cljs.core.first(arglist__6433);
          arglist__6433 = cljs.core.next(arglist__6433);
          var z = cljs.core.first(arglist__6433);
          var args = cljs.core.rest(arglist__6433);
          return G__6432__delegate(x, y, z, args);
        };
        G__6432.cljs$core$IFn$_invoke$arity$variadic = G__6432__delegate;
        return G__6432;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3758__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3758__auto__)) {
          return or__3758__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3758__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3758__auto__)) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3758__auto____$1)) {
            return or__3758__auto____$1;
          } else {
            var or__3758__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3758__auto____$2)) {
              return or__3758__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3758__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3758__auto__)) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3758__auto____$1)) {
            return or__3758__auto____$1;
          } else {
            var or__3758__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3758__auto____$2)) {
              return or__3758__auto____$2;
            } else {
              var or__3758__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3758__auto____$3)) {
                return or__3758__auto____$3;
              } else {
                var or__3758__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3758__auto____$4)) {
                  return or__3758__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__6434__delegate = function(x, y, z, args) {
          var or__3758__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3758__auto__)) {
            return or__3758__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3758__auto__) {
              return function(p1__6426_SHARP_) {
                var or__3758__auto____$1 = p1.call(null, p1__6426_SHARP_);
                if (cljs.core.truth_(or__3758__auto____$1)) {
                  return or__3758__auto____$1;
                } else {
                  return p2.call(null, p1__6426_SHARP_);
                }
              };
            }(or__3758__auto__), args);
          }
        };
        var G__6434 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6434__delegate.call(this, x, y, z, args);
        };
        G__6434.cljs$lang$maxFixedArity = 3;
        G__6434.cljs$lang$applyTo = function(arglist__6435) {
          var x = cljs.core.first(arglist__6435);
          arglist__6435 = cljs.core.next(arglist__6435);
          var y = cljs.core.first(arglist__6435);
          arglist__6435 = cljs.core.next(arglist__6435);
          var z = cljs.core.first(arglist__6435);
          var args = cljs.core.rest(arglist__6435);
          return G__6434__delegate(x, y, z, args);
        };
        G__6434.cljs$core$IFn$_invoke$arity$variadic = G__6434__delegate;
        return G__6434;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3758__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3758__auto__)) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3758__auto____$1)) {
            return or__3758__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3758__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3758__auto__)) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3758__auto____$1)) {
            return or__3758__auto____$1;
          } else {
            var or__3758__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3758__auto____$2)) {
              return or__3758__auto____$2;
            } else {
              var or__3758__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3758__auto____$3)) {
                return or__3758__auto____$3;
              } else {
                var or__3758__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3758__auto____$4)) {
                  return or__3758__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3758__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3758__auto__)) {
          return or__3758__auto__;
        } else {
          var or__3758__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3758__auto____$1)) {
            return or__3758__auto____$1;
          } else {
            var or__3758__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3758__auto____$2)) {
              return or__3758__auto____$2;
            } else {
              var or__3758__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3758__auto____$3)) {
                return or__3758__auto____$3;
              } else {
                var or__3758__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3758__auto____$4)) {
                  return or__3758__auto____$4;
                } else {
                  var or__3758__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3758__auto____$5)) {
                    return or__3758__auto____$5;
                  } else {
                    var or__3758__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3758__auto____$6)) {
                      return or__3758__auto____$6;
                    } else {
                      var or__3758__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3758__auto____$7)) {
                        return or__3758__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__6436__delegate = function(x, y, z, args) {
          var or__3758__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3758__auto__)) {
            return or__3758__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3758__auto__) {
              return function(p1__6427_SHARP_) {
                var or__3758__auto____$1 = p1.call(null, p1__6427_SHARP_);
                if (cljs.core.truth_(or__3758__auto____$1)) {
                  return or__3758__auto____$1;
                } else {
                  var or__3758__auto____$2 = p2.call(null, p1__6427_SHARP_);
                  if (cljs.core.truth_(or__3758__auto____$2)) {
                    return or__3758__auto____$2;
                  } else {
                    return p3.call(null, p1__6427_SHARP_);
                  }
                }
              };
            }(or__3758__auto__), args);
          }
        };
        var G__6436 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6436__delegate.call(this, x, y, z, args);
        };
        G__6436.cljs$lang$maxFixedArity = 3;
        G__6436.cljs$lang$applyTo = function(arglist__6437) {
          var x = cljs.core.first(arglist__6437);
          arglist__6437 = cljs.core.next(arglist__6437);
          var y = cljs.core.first(arglist__6437);
          arglist__6437 = cljs.core.next(arglist__6437);
          var z = cljs.core.first(arglist__6437);
          var args = cljs.core.rest(arglist__6437);
          return G__6436__delegate(x, y, z, args);
        };
        G__6436.cljs$core$IFn$_invoke$arity$variadic = G__6436__delegate;
        return G__6436;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__6438__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__6428_SHARP_) {
                return p1__6428_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__6429_SHARP_) {
                var or__3758__auto__ = p1__6429_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3758__auto__)) {
                  return or__3758__auto__;
                } else {
                  return p1__6429_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__6430_SHARP_) {
                var or__3758__auto__ = p1__6430_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3758__auto__)) {
                  return or__3758__auto__;
                } else {
                  var or__3758__auto____$1 = p1__6430_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3758__auto____$1)) {
                    return or__3758__auto____$1;
                  } else {
                    return p1__6430_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__6439__delegate = function(x, y, z, args) {
              var or__3758__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3758__auto__)) {
                return or__3758__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3758__auto__, ps__$1) {
                  return function(p1__6431_SHARP_) {
                    return cljs.core.some.call(null, p1__6431_SHARP_, args);
                  };
                }(or__3758__auto__, ps__$1), ps__$1);
              }
            };
            var G__6439 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__6439__delegate.call(this, x, y, z, args);
            };
            G__6439.cljs$lang$maxFixedArity = 3;
            G__6439.cljs$lang$applyTo = function(arglist__6440) {
              var x = cljs.core.first(arglist__6440);
              arglist__6440 = cljs.core.next(arglist__6440);
              var y = cljs.core.first(arglist__6440);
              arglist__6440 = cljs.core.next(arglist__6440);
              var z = cljs.core.first(arglist__6440);
              var args = cljs.core.rest(arglist__6440);
              return G__6439__delegate(x, y, z, args);
            };
            G__6439.cljs$core$IFn$_invoke$arity$variadic = G__6439__delegate;
            return G__6439;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__6438 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6438__delegate.call(this, p1, p2, p3, ps);
    };
    G__6438.cljs$lang$maxFixedArity = 3;
    G__6438.cljs$lang$applyTo = function(arglist__6441) {
      var p1 = cljs.core.first(arglist__6441);
      arglist__6441 = cljs.core.next(arglist__6441);
      var p2 = cljs.core.first(arglist__6441);
      arglist__6441 = cljs.core.next(arglist__6441);
      var p3 = cljs.core.first(arglist__6441);
      var ps = cljs.core.rest(arglist__6441);
      return G__6438__delegate(p1, p2, p3, ps);
    };
    G__6438.cljs$core$IFn$_invoke$arity$variadic = G__6438__delegate;
    return G__6438;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(f1) {
      return function() {
        var G__6443 = null;
        var G__6443__0 = function() {
          return f1.call(null);
        };
        var G__6443__1 = function(result) {
          return f1.call(null, result);
        };
        var G__6443__2 = function(result, input) {
          return f1.call(null, result, f.call(null, input));
        };
        var G__6443__3 = function() {
          var G__6444__delegate = function(result, input, inputs) {
            return f1.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__6444 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__6444__delegate.call(this, result, input, inputs);
          };
          G__6444.cljs$lang$maxFixedArity = 2;
          G__6444.cljs$lang$applyTo = function(arglist__6445) {
            var result = cljs.core.first(arglist__6445);
            arglist__6445 = cljs.core.next(arglist__6445);
            var input = cljs.core.first(arglist__6445);
            var inputs = cljs.core.rest(arglist__6445);
            return G__6444__delegate(result, input, inputs);
          };
          G__6444.cljs$core$IFn$_invoke$arity$variadic = G__6444__delegate;
          return G__6444;
        }();
        G__6443 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__6443__0.call(this);
            case 1:
              return G__6443__1.call(this, result);
            case 2:
              return G__6443__2.call(this, result, input);
            default:
              return G__6443__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__6443.cljs$lang$maxFixedArity = 2;
        G__6443.cljs$lang$applyTo = G__6443__3.cljs$lang$applyTo;
        G__6443.cljs$core$IFn$_invoke$arity$0 = G__6443__0;
        G__6443.cljs$core$IFn$_invoke$arity$1 = G__6443__1;
        G__6443.cljs$core$IFn$_invoke$arity$2 = G__6443__2;
        G__6443.cljs$core$IFn$_invoke$arity$variadic = G__6443__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__6443;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4627__auto___6446 = size;
          var i_6447 = 0;
          while (true) {
            if (i_6447 < n__4627__auto___6446) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_6447)));
              var G__6448 = i_6447 + 1;
              i_6447 = G__6448;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__6449__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__6442_SHARP_) {
          return cljs.core.apply.call(null, f, p1__6442_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__6449 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__6449__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__6449.cljs$lang$maxFixedArity = 4;
    G__6449.cljs$lang$applyTo = function(arglist__6450) {
      var f = cljs.core.first(arglist__6450);
      arglist__6450 = cljs.core.next(arglist__6450);
      var c1 = cljs.core.first(arglist__6450);
      arglist__6450 = cljs.core.next(arglist__6450);
      var c2 = cljs.core.first(arglist__6450);
      arglist__6450 = cljs.core.next(arglist__6450);
      var c3 = cljs.core.first(arglist__6450);
      var colls = cljs.core.rest(arglist__6450);
      return G__6449__delegate(f, c1, c2, c3, colls);
    };
    G__6449.cljs$core$IFn$_invoke$arity$variadic = G__6449__delegate;
    return G__6449;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(f1) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__6451 = null;
          var G__6451__0 = function() {
            return f1.call(null);
          };
          var G__6451__1 = function(result) {
            return f1.call(null, result);
          };
          var G__6451__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? f1.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__6451 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6451__0.call(this);
              case 1:
                return G__6451__1.call(this, result);
              case 2:
                return G__6451__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6451.cljs$core$IFn$_invoke$arity$0 = G__6451__0;
          G__6451.cljs$core$IFn$_invoke$arity$1 = G__6451__1;
          G__6451.cljs$core$IFn$_invoke$arity$2 = G__6451__2;
          return G__6451;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(f1) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__6452 = null;
          var G__6452__0 = function() {
            return f1.call(null);
          };
          var G__6452__1 = function(result) {
            return f1.call(null, result);
          };
          var G__6452__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return f1.call(null, result, input);
            }
          };
          G__6452 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6452__0.call(this);
              case 1:
                return G__6452__1.call(this, result);
              case 2:
                return G__6452__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6452.cljs$core$IFn$_invoke$arity$0 = G__6452__0;
          G__6452.cljs$core$IFn$_invoke$arity$1 = G__6452__1;
          G__6452.cljs$core$IFn$_invoke$arity$2 = G__6452__2;
          return G__6452;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__6453 = n__$1 - 1;
          var G__6454 = cljs.core.rest.call(null, s);
          n__$1 = G__6453;
          coll__$1 = G__6454;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__6455 = cljs.core.next.call(null, s);
      var G__6456 = cljs.core.next.call(null, lead);
      s = G__6455;
      lead = G__6456;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(f1) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__6457 = null;
          var G__6457__0 = function() {
            return f1.call(null);
          };
          var G__6457__1 = function(result) {
            return f1.call(null, result);
          };
          var G__6457__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3746__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3746__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3746__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return f1.call(null, result, input);
            }
          };
          G__6457 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6457__0.call(this);
              case 1:
                return G__6457__1.call(this, result);
              case 2:
                return G__6457__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6457.cljs$core$IFn$_invoke$arity$0 = G__6457__0;
          G__6457.cljs$core$IFn$_invoke$arity$1 = G__6457__1;
          G__6457.cljs$core$IFn$_invoke$arity$2 = G__6457__2;
          return G__6457;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3746__auto__ = s;
          if (and__3746__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3746__auto__;
          }
        }())) {
          var G__6458 = pred__$1;
          var G__6459 = cljs.core.rest.call(null, s);
          pred__$1 = G__6458;
          coll__$1 = G__6459;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__6460__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__6460 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6460__delegate.call(this, c1, c2, colls);
    };
    G__6460.cljs$lang$maxFixedArity = 2;
    G__6460.cljs$lang$applyTo = function(arglist__6461) {
      var c1 = cljs.core.first(arglist__6461);
      arglist__6461 = cljs.core.next(arglist__6461);
      var c2 = cljs.core.first(arglist__6461);
      var colls = cljs.core.rest(arglist__6461);
      return G__6460__delegate(c1, c2, colls);
    };
    G__6460.cljs$core$IFn$_invoke$arity$variadic = G__6460__delegate;
    return G__6460;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__6462__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__6462 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__6462__delegate.call(this, f, colls);
    };
    G__6462.cljs$lang$maxFixedArity = 1;
    G__6462.cljs$lang$applyTo = function(arglist__6463) {
      var f = cljs.core.first(arglist__6463);
      var colls = cljs.core.rest(arglist__6463);
      return G__6462__delegate(f, colls);
    };
    G__6462.cljs$core$IFn$_invoke$arity$variadic = G__6462__delegate;
    return G__6462;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(f1) {
      return function() {
        var G__6464 = null;
        var G__6464__0 = function() {
          return f1.call(null);
        };
        var G__6464__1 = function(result) {
          return f1.call(null, result);
        };
        var G__6464__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return f1.call(null, result, input);
          } else {
            return result;
          }
        };
        G__6464 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__6464__0.call(this);
            case 1:
              return G__6464__1.call(this, result);
            case 2:
              return G__6464__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__6464.cljs$core$IFn$_invoke$arity$0 = G__6464__0;
        G__6464.cljs$core$IFn$_invoke$arity$1 = G__6464__1;
        G__6464.cljs$core$IFn$_invoke$arity$2 = G__6464__2;
        return G__6464;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4627__auto___6465 = size;
          var i_6466 = 0;
          while (true) {
            if (i_6466 < n__4627__auto___6465) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_6466)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_6466));
              } else {
              }
              var G__6467 = i_6466 + 1;
              i_6466 = G__6467;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__6468_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__6468_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__6471 = to;
        if (G__6471) {
          var bit__4414__auto__ = G__6471.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4414__auto__ || G__6471.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__6472 = to;
      if (G__6472) {
        var bit__4414__auto__ = G__6472.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4414__auto__ || G__6472.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__6473__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__6473 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__6473__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__6473.cljs$lang$maxFixedArity = 4;
    G__6473.cljs$lang$applyTo = function(arglist__6474) {
      var f = cljs.core.first(arglist__6474);
      arglist__6474 = cljs.core.next(arglist__6474);
      var c1 = cljs.core.first(arglist__6474);
      arglist__6474 = cljs.core.next(arglist__6474);
      var c2 = cljs.core.first(arglist__6474);
      arglist__6474 = cljs.core.next(arglist__6474);
      var c3 = cljs.core.first(arglist__6474);
      var colls = cljs.core.rest(arglist__6474);
      return G__6473__delegate(f, c1, c2, c3, colls);
    };
    G__6473.cljs$core$IFn$_invoke$arity$variadic = G__6473__delegate;
    return G__6473;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__6476 = m__$1;
          if (G__6476) {
            var bit__4421__auto__ = G__6476.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4421__auto__ || G__6476.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__6476.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__6476);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__6476);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__6477 = sentinel;
            var G__6478 = m__$2;
            var G__6479 = cljs.core.next.call(null, ks__$1);
            sentinel = G__6477;
            m__$1 = G__6478;
            ks__$1 = G__6479;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__6480, v) {
  var vec__6482 = p__6480;
  var k = cljs.core.nth.call(null, vec__6482, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__6482, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__6483, f) {
    var vec__6493 = p__6483;
    var k = cljs.core.nth.call(null, vec__6493, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__6493, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__6484, f, a) {
    var vec__6494 = p__6484;
    var k = cljs.core.nth.call(null, vec__6494, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__6494, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__6485, f, a, b) {
    var vec__6495 = p__6485;
    var k = cljs.core.nth.call(null, vec__6495, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__6495, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__6486, f, a, b, c) {
    var vec__6496 = p__6486;
    var k = cljs.core.nth.call(null, vec__6496, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__6496, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__6498__delegate = function(m, p__6487, f, a, b, c, args) {
      var vec__6497 = p__6487;
      var k = cljs.core.nth.call(null, vec__6497, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__6497, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__6498 = function(m, p__6487, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__6498__delegate.call(this, m, p__6487, f, a, b, c, args);
    };
    G__6498.cljs$lang$maxFixedArity = 6;
    G__6498.cljs$lang$applyTo = function(arglist__6499) {
      var m = cljs.core.first(arglist__6499);
      arglist__6499 = cljs.core.next(arglist__6499);
      var p__6487 = cljs.core.first(arglist__6499);
      arglist__6499 = cljs.core.next(arglist__6499);
      var f = cljs.core.first(arglist__6499);
      arglist__6499 = cljs.core.next(arglist__6499);
      var a = cljs.core.first(arglist__6499);
      arglist__6499 = cljs.core.next(arglist__6499);
      var b = cljs.core.first(arglist__6499);
      arglist__6499 = cljs.core.next(arglist__6499);
      var c = cljs.core.first(arglist__6499);
      var args = cljs.core.rest(arglist__6499);
      return G__6498__delegate(m, p__6487, f, a, b, c, args);
    };
    G__6498.cljs$core$IFn$_invoke$arity$variadic = G__6498__delegate;
    return G__6498;
  }();
  update_in = function(m, p__6487, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__6487, f);
      case 4:
        return update_in__4.call(this, m, p__6487, f, a);
      case 5:
        return update_in__5.call(this, m, p__6487, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__6487, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__6487, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4337__auto__, writer__4338__auto__, opts__4339__auto__) {
  return cljs.core._write.call(null, writer__4338__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__6500 = ll - 5;
      var G__6501 = r;
      ll = G__6500;
      ret = G__6501;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__6502 = cljs.core.pv_aget.call(null, node, 0);
      var G__6503 = level - 5;
      node = G__6502;
      level = G__6503;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__6504 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__6505 = level - 5;
        node = G__6504;
        level = G__6505;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__6507 = j + 1;
              var G__6508 = init__$3;
              j = G__6507;
              init__$2 = G__6508;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__6509 = i + len;
        var G__6510 = init__$2;
        i = G__6509;
        init__$1 = G__6510;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__6511 = j + 1;
              var G__6512 = init__$3;
              j = G__6511;
              init__$2 = G__6512;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__6513 = i + len;
        var G__6514 = init__$2;
        i = G__6513;
        init__$1 = G__6514;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4627__auto___6515 = len;
    var i_6516 = 0;
    while (true) {
      if (i_6516 < n__4627__auto___6515) {
        new_tail[i_6516] = self__.tail[i_6516];
        var G__6517 = i_6516 + 1;
        i_6516 = G__6517;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__6518 = null;
  var G__6518__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__6518__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__6518 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6518__2.call(this, self__, k);
      case 3:
        return G__6518__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6518.cljs$core$IFn$_invoke$arity$2 = G__6518__2;
  G__6518.cljs$core$IFn$_invoke$arity$3 = G__6518__3;
  return G__6518;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args6506) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6506)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__6519 = i + 1;
        var G__6520 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__6519;
        out = G__6520;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__6521) {
    var args = cljs.core.seq(arglist__6521);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__4065__auto__ = self__.end;
    var y__4066__auto__ = v_pos + 1;
    return x__4065__auto__ > y__4066__auto__ ? x__4065__auto__ : y__4066__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__6523 = null;
  var G__6523__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__6523__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__6523 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6523__2.call(this, self__, k);
      case 3:
        return G__6523__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6523.cljs$core$IFn$_invoke$arity$2 = G__6523__2;
  G__6523.cljs$core$IFn$_invoke$arity$3 = G__6523__3;
  return G__6523;
}();
cljs.core.Subvec.prototype.apply = function(self__, args6522) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6522)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__6524 = meta;
      var G__6525 = v.v;
      var G__6526 = v.start + start;
      var G__6527 = v.start + end;
      var G__6528 = __hash;
      meta = G__6524;
      v = G__6525;
      start = G__6526;
      end = G__6527;
      __hash = G__6528;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj6532 = {};
    return obj6532;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__6533 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__6534 = level - 5;
        node = G__6533;
        level = G__6534;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__6536 = null;
  var G__6536__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6536__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6536 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6536__2.call(this, self__, k);
      case 3:
        return G__6536__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6536.cljs$core$IFn$_invoke$arity$2 = G__6536__2;
  G__6536.cljs$core$IFn$_invoke$arity$3 = G__6536__3;
  return G__6536;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args6535) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6535)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3758__auto__ = self__.front;
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3758__auto__ = self__.rear;
      if (cljs.core.truth_(or__3758__auto__)) {
        return or__3758__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__6537 = i + incr;
        i = G__6537;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__6538 = i + 1;
      var G__6539 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__6538;
      out = G__6539;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj6543 = {};
    return obj6543;
  }();
  var l = ks.length;
  var i_6544 = 0;
  while (true) {
    if (i_6544 < l) {
      var k_6545 = ks[i_6544];
      new_obj[k_6545] = obj[k_6545];
      var G__6546 = i_6544 + 1;
      i_6544 = G__6546;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__6549 = cljs.core.rest.call(null, keys__$1);
        var G__6550 = init__$2;
        keys__$1 = G__6549;
        init__$1 = G__6550;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__6547_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__6547_SHARP_, self__.strobj[p1__6547_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__6551 = null;
  var G__6551__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6551__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6551 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6551__2.call(this, self__, k);
      case 3:
        return G__6551__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6551.cljs$core$IFn$_invoke$arity$2 = G__6551__2;
  G__6551.cljs$core$IFn$_invoke$arity$3 = G__6551__3;
  return G__6551;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args6548) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6548)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj6553 = {};
  return obj6553;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.Iterator = function(s) {
  this.s = s;
};
cljs.core.Iterator.cljs$lang$type = true;
cljs.core.Iterator.cljs$lang$ctorStr = "cljs.core/Iterator";
cljs.core.Iterator.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Iterator");
};
cljs.core.Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_Iterator = function __GT_Iterator(s) {
  return new cljs.core.Iterator(s);
};
cljs.core.iterator = function iterator(coll) {
  return new cljs.core.Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.EntriesIterator.cljs$lang$type = true;
cljs.core.EntriesIterator.cljs$lang$ctorStr = "cljs.core/EntriesIterator";
cljs.core.EntriesIterator.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/EntriesIterator");
};
cljs.core.EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__6554 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__6554, 0, null);
    var v = cljs.core.nth.call(null, vec__6554, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_EntriesIterator = function __GT_EntriesIterator(s) {
  return new cljs.core.EntriesIterator(s);
};
cljs.core.entries_iterator = function entries_iterator(coll) {
  return new cljs.core.EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.SetEntriesIterator.cljs$lang$type = true;
cljs.core.SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/SetEntriesIterator";
cljs.core.SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/SetEntriesIterator");
};
cljs.core.SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_SetEntriesIterator = function __GT_SetEntriesIterator(s) {
  return new cljs.core.SetEntriesIterator(s);
};
cljs.core.set_entries_iterator = function set_entries_iterator(coll) {
  return new cljs.core.SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__6555 = i + 2;
        i = G__6555;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__6556 = i + 2;
        i = G__6556;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__6557 = i + 2;
        i = G__6557;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__6558 = i + 2;
        i = G__6558;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__6559 = i + 2;
        i = G__6559;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_6560 = 0;
  while (true) {
    if (i_6560 < l) {
      narr[i_6560] = arr[i_6560];
      var G__6561 = i_6560 + 1;
      i_6560 = G__6561;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__6563 = cljs.core.seq.call(null, coll);
  var chunk__6564 = null;
  var count__6565 = 0;
  var i__6566 = 0;
  while (true) {
    if (i__6566 < count__6565) {
      var vec__6567 = cljs.core._nth.call(null, chunk__6564, i__6566);
      var k = cljs.core.nth.call(null, vec__6567, 0, null);
      var v = cljs.core.nth.call(null, vec__6567, 1, null);
      f.call(null, v, k);
      var G__6572 = seq__6563;
      var G__6573 = chunk__6564;
      var G__6574 = count__6565;
      var G__6575 = i__6566 + 1;
      seq__6563 = G__6572;
      chunk__6564 = G__6573;
      count__6565 = G__6574;
      i__6566 = G__6575;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6563);
      if (temp__4126__auto__) {
        var seq__6563__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6563__$1)) {
          var c__4527__auto__ = cljs.core.chunk_first.call(null, seq__6563__$1);
          var G__6576 = cljs.core.chunk_rest.call(null, seq__6563__$1);
          var G__6577 = c__4527__auto__;
          var G__6578 = cljs.core.count.call(null, c__4527__auto__);
          var G__6579 = 0;
          seq__6563 = G__6576;
          chunk__6564 = G__6577;
          count__6565 = G__6578;
          i__6566 = G__6579;
          continue;
        } else {
          var vec__6568 = cljs.core.first.call(null, seq__6563__$1);
          var k = cljs.core.nth.call(null, vec__6568, 0, null);
          var v = cljs.core.nth.call(null, vec__6568, 1, null);
          f.call(null, v, k);
          var G__6580 = cljs.core.next.call(null, seq__6563__$1);
          var G__6581 = null;
          var G__6582 = 0;
          var G__6583 = 0;
          seq__6563 = G__6580;
          chunk__6564 = G__6581;
          count__6565 = G__6582;
          i__6566 = G__6583;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__6584 = i + 2;
        var G__6585 = init__$2;
        i = G__6584;
        init__$1 = G__6585;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj6570 = {};
    return obj6570;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__6586 = s + 2;
            var G__6587 = d;
            s = G__6586;
            d = G__6587;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__6588 = s + 2;
            var G__6589 = d + 2;
            s = G__6588;
            d = G__6589;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__6571 = cljs.core.aclone.call(null, self__.arr);
        G__6571[idx + 1] = v;
        return G__6571;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__6590 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__6591 = cljs.core.next.call(null, es);
          ret = G__6590;
          es = G__6591;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__6592 = null;
  var G__6592__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6592__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6592 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6592__2.call(this, self__, k);
      case 3:
        return G__6592__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6592.cljs$core$IFn$_invoke$arity$2 = G__6592__2;
  G__6592.cljs$core$IFn$_invoke$arity$3 = G__6592__3;
  return G__6592;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args6562) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6562)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__6593 = i + 2;
        var G__6594 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__6593;
        ret = G__6594;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__6595_6597 = self__.arr;
      G__6595_6597.pop();
      G__6595_6597.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__6596 = o;
      if (G__6596) {
        var bit__4421__auto__ = G__6596.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4421__auto__ || G__6596.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__6596.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__6596);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__6596);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__6598 = cljs.core.next.call(null, es);
          var G__6599 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__6598;
          tcoll__$2 = G__6599;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__6600 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__6601 = i + 2;
      out = G__6600;
      i = G__6601;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4337__auto__, writer__4338__auto__, opts__4339__auto__) {
  return cljs.core._write.call(null, writer__4338__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__6604 = cljs.core.aclone.call(null, arr);
    G__6604[i] = a;
    return G__6604;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__6605 = cljs.core.aclone.call(null, arr);
    G__6605[i] = a;
    G__6605[j] = b;
    return G__6605;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__6606 = i + 2;
        var G__6607 = init__$2;
        i = G__6606;
        init__$1 = G__6607;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_6608 = 0;
        var j_6609 = 0;
        while (true) {
          if (i_6608 < 32) {
            if ((self__.bitmap >>> i_6608 & 1) === 0) {
              var G__6610 = i_6608 + 1;
              var G__6611 = j_6609;
              i_6608 = G__6610;
              j_6609 = G__6611;
              continue;
            } else {
              nodes[i_6608] = !(self__.arr[j_6609] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_6609]), self__.arr[j_6609], self__.arr[j_6609 + 1], added_leaf_QMARK_) : self__.arr[j_6609 + 1];
              var G__6612 = i_6608 + 1;
              var G__6613 = j_6609 + 2;
              i_6608 = G__6612;
              j_6609 = G__6613;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_6614 = 0;
      var j_6615 = 0;
      while (true) {
        if (i_6614 < 32) {
          if ((self__.bitmap >>> i_6614 & 1) === 0) {
            var G__6616 = i_6614 + 1;
            var G__6617 = j_6615;
            i_6614 = G__6616;
            j_6615 = G__6617;
            continue;
          } else {
            nodes[i_6614] = !(self__.arr[j_6615] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_6615]), self__.arr[j_6615], self__.arr[j_6615 + 1], added_leaf_QMARK_) : self__.arr[j_6615 + 1];
            var G__6618 = i_6614 + 1;
            var G__6619 = j_6615 + 2;
            i_6614 = G__6618;
            j_6615 = G__6619;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__6620 = i + 1;
        var G__6621 = j + 2;
        var G__6622 = bitmap | 1 << i;
        i = G__6620;
        j = G__6621;
        bitmap = G__6622;
        continue;
      } else {
        var G__6623 = i + 1;
        var G__6624 = j;
        var G__6625 = bitmap;
        i = G__6623;
        j = G__6624;
        bitmap = G__6625;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__6626 = i + 1;
          var G__6627 = init__$2;
          i = G__6626;
          init__$1 = G__6627;
          continue;
        }
      } else {
        var G__6628 = i + 1;
        var G__6629 = init__$1;
        i = G__6628;
        init__$1 = G__6629;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__6630 = i + 2;
        i = G__6630;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__6631 = j + 2;
                j = G__6631;
                continue;
              }
            } else {
              var G__6632 = j + 2;
              j = G__6632;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__6633 = j + 1;
              j = G__6633;
              continue;
            }
          } else {
            var G__6634 = j + 1;
            j = G__6634;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__6636 = cljs.core.seq.call(null, coll);
  var chunk__6637 = null;
  var count__6638 = 0;
  var i__6639 = 0;
  while (true) {
    if (i__6639 < count__6638) {
      var vec__6640 = cljs.core._nth.call(null, chunk__6637, i__6639);
      var k = cljs.core.nth.call(null, vec__6640, 0, null);
      var v = cljs.core.nth.call(null, vec__6640, 1, null);
      f.call(null, v, k);
      var G__6644 = seq__6636;
      var G__6645 = chunk__6637;
      var G__6646 = count__6638;
      var G__6647 = i__6639 + 1;
      seq__6636 = G__6644;
      chunk__6637 = G__6645;
      count__6638 = G__6646;
      i__6639 = G__6647;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6636);
      if (temp__4126__auto__) {
        var seq__6636__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6636__$1)) {
          var c__4527__auto__ = cljs.core.chunk_first.call(null, seq__6636__$1);
          var G__6648 = cljs.core.chunk_rest.call(null, seq__6636__$1);
          var G__6649 = c__4527__auto__;
          var G__6650 = cljs.core.count.call(null, c__4527__auto__);
          var G__6651 = 0;
          seq__6636 = G__6648;
          chunk__6637 = G__6649;
          count__6638 = G__6650;
          i__6639 = G__6651;
          continue;
        } else {
          var vec__6641 = cljs.core.first.call(null, seq__6636__$1);
          var k = cljs.core.nth.call(null, vec__6641, 0, null);
          var v = cljs.core.nth.call(null, vec__6641, 1, null);
          f.call(null, v, k);
          var G__6652 = cljs.core.next.call(null, seq__6636__$1);
          var G__6653 = null;
          var G__6654 = 0;
          var G__6655 = 0;
          seq__6636 = G__6652;
          chunk__6637 = G__6653;
          count__6638 = G__6654;
          i__6639 = G__6655;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj6643 = {};
    return obj6643;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__6656 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__6657 = cljs.core.next.call(null, es);
          ret = G__6656;
          es = G__6657;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__6658 = null;
  var G__6658__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6658__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6658 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6658__2.call(this, self__, k);
      case 3:
        return G__6658__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6658.cljs$core$IFn$_invoke$arity$2 = G__6658__2;
  G__6658.cljs$core$IFn$_invoke$arity$3 = G__6658__3;
  return G__6658;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args6635) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6635)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__6659 = i + 1;
      var G__6660 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__6659;
      out = G__6660;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__6661 = o;
      if (G__6661) {
        var bit__4421__auto__ = G__6661.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4421__auto__ || G__6661.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__6661.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__6661);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__6661);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__6662 = cljs.core.next.call(null, es);
          var G__6663 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__6662;
          tcoll__$1 = G__6663;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__6664 = ascending_QMARK_ ? t.left : t.right;
      var G__6665 = cljs.core.conj.call(null, stack__$1, t);
      t = G__6664;
      stack__$1 = G__6665;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__6667 = null;
  var G__6667__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6667__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6667 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6667__2.call(this, self__, k);
      case 3:
        return G__6667__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6667.cljs$core$IFn$_invoke$arity$2 = G__6667__2;
  G__6667.cljs$core$IFn$_invoke$arity$3 = G__6667__3;
  return G__6667;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args6666) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6666)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__6669 = null;
  var G__6669__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6669__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6669 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6669__2.call(this, self__, k);
      case 3:
        return G__6669__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6669.cljs$core$IFn$_invoke$arity$2 = G__6669__2;
  G__6669.cljs$core$IFn$_invoke$arity$3 = G__6669__3;
  return G__6669;
}();
cljs.core.RedNode.prototype.apply = function(self__, args6668) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6668)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__6671 = cljs.core.seq.call(null, coll);
  var chunk__6672 = null;
  var count__6673 = 0;
  var i__6674 = 0;
  while (true) {
    if (i__6674 < count__6673) {
      var vec__6675 = cljs.core._nth.call(null, chunk__6672, i__6674);
      var k = cljs.core.nth.call(null, vec__6675, 0, null);
      var v = cljs.core.nth.call(null, vec__6675, 1, null);
      f.call(null, v, k);
      var G__6677 = seq__6671;
      var G__6678 = chunk__6672;
      var G__6679 = count__6673;
      var G__6680 = i__6674 + 1;
      seq__6671 = G__6677;
      chunk__6672 = G__6678;
      count__6673 = G__6679;
      i__6674 = G__6680;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6671);
      if (temp__4126__auto__) {
        var seq__6671__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6671__$1)) {
          var c__4527__auto__ = cljs.core.chunk_first.call(null, seq__6671__$1);
          var G__6681 = cljs.core.chunk_rest.call(null, seq__6671__$1);
          var G__6682 = c__4527__auto__;
          var G__6683 = cljs.core.count.call(null, c__4527__auto__);
          var G__6684 = 0;
          seq__6671 = G__6681;
          chunk__6672 = G__6682;
          count__6673 = G__6683;
          i__6674 = G__6684;
          continue;
        } else {
          var vec__6676 = cljs.core.first.call(null, seq__6671__$1);
          var k = cljs.core.nth.call(null, vec__6676, 0, null);
          var v = cljs.core.nth.call(null, vec__6676, 1, null);
          f.call(null, v, k);
          var G__6685 = cljs.core.next.call(null, seq__6671__$1);
          var G__6686 = null;
          var G__6687 = 0;
          var G__6688 = 0;
          seq__6671 = G__6685;
          chunk__6672 = G__6686;
          count__6673 = G__6687;
          i__6674 = G__6688;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__6689 = t.left;
          t = G__6689;
          continue;
        } else {
          var G__6690 = t.right;
          t = G__6690;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__6691 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__6692 = cljs.core.next.call(null, es);
          ret = G__6691;
          es = G__6692;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__6693 = null;
  var G__6693__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6693__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6693 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6693__2.call(this, self__, k);
      case 3:
        return G__6693__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6693.cljs$core$IFn$_invoke$arity$2 = G__6693__2;
  G__6693.cljs$core$IFn$_invoke$arity$3 = G__6693__3;
  return G__6693;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args6670) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6670)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__6694 = cljs.core.conj.call(null, stack, t);
              var G__6695 = t.left;
              stack = G__6694;
              t = G__6695;
              continue;
            } else {
              var G__6696 = stack;
              var G__6697 = t.right;
              stack = G__6696;
              t = G__6697;
              continue;
            }
          } else {
            if (c > 0) {
              var G__6698 = cljs.core.conj.call(null, stack, t);
              var G__6699 = t.right;
              stack = G__6698;
              t = G__6699;
              continue;
            } else {
              var G__6700 = stack;
              var G__6701 = t.left;
              stack = G__6700;
              t = G__6701;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__6702 = cljs.core.nnext.call(null, in$);
        var G__6703 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__6702;
        out = G__6703;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__6704) {
    var keyvals = cljs.core.seq(arglist__6704);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__6705) {
    var keyvals = cljs.core.seq(arglist__6705);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj6709 = {};
      return obj6709;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__6710 = cljs.core.nnext.call(null, kvs);
        kvs = G__6710;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__6711) {
    var keyvals = cljs.core.seq(arglist__6711);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__6712 = cljs.core.nnext.call(null, in$);
        var G__6713 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__6712;
        out = G__6713;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__6714) {
    var keyvals = cljs.core.seq(arglist__6714);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__6715 = cljs.core.nnext.call(null, in$);
        var G__6716 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__6715;
        out = G__6716;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__6717) {
    var comparator = cljs.core.first(arglist__6717);
    var keyvals = cljs.core.rest(arglist__6717);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__6718 = self__.mseq;
    if (G__6718) {
      var bit__4421__auto__ = G__6718.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4421__auto__ || G__6718.cljs$core$INext$) {
        return true;
      } else {
        if (!G__6718.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__6718);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__6718);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__6719 = self__.mseq;
    if (G__6719) {
      var bit__4421__auto__ = G__6719.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4421__auto__ || G__6719.cljs$core$INext$) {
        return true;
      } else {
        if (!G__6719.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__6719);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__6719);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__6720 = self__.mseq;
    if (G__6720) {
      var bit__4421__auto__ = G__6720.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4421__auto__ || G__6720.cljs$core$INext$) {
        return true;
      } else {
        if (!G__6720.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__6720);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__6720);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__6721 = self__.mseq;
    if (G__6721) {
      var bit__4421__auto__ = G__6721.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4421__auto__ || G__6721.cljs$core$INext$) {
        return true;
      } else {
        if (!G__6721.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__6721);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__6721);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__6722_SHARP_, p2__6723_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3758__auto__ = p1__6722_SHARP_;
          if (cljs.core.truth_(or__3758__auto__)) {
            return or__3758__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__6723_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__6724) {
    var maps = cljs.core.seq(arglist__6724);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3758__auto__ = m1;
            if (cljs.core.truth_(or__3758__auto__)) {
              return or__3758__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__6725) {
    var f = cljs.core.first(arglist__6725);
    var maps = cljs.core.rest(arglist__6725);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__6726 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__6727 = cljs.core.next.call(null, keys);
      ret = G__6726;
      keys = G__6727;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__6730 = cljs.core.seq.call(null, coll);
  var chunk__6731 = null;
  var count__6732 = 0;
  var i__6733 = 0;
  while (true) {
    if (i__6733 < count__6732) {
      var vec__6734 = cljs.core._nth.call(null, chunk__6731, i__6733);
      var k = cljs.core.nth.call(null, vec__6734, 0, null);
      var v = cljs.core.nth.call(null, vec__6734, 1, null);
      f.call(null, v, k);
      var G__6736 = seq__6730;
      var G__6737 = chunk__6731;
      var G__6738 = count__6732;
      var G__6739 = i__6733 + 1;
      seq__6730 = G__6736;
      chunk__6731 = G__6737;
      count__6732 = G__6738;
      i__6733 = G__6739;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6730);
      if (temp__4126__auto__) {
        var seq__6730__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6730__$1)) {
          var c__4527__auto__ = cljs.core.chunk_first.call(null, seq__6730__$1);
          var G__6740 = cljs.core.chunk_rest.call(null, seq__6730__$1);
          var G__6741 = c__4527__auto__;
          var G__6742 = cljs.core.count.call(null, c__4527__auto__);
          var G__6743 = 0;
          seq__6730 = G__6740;
          chunk__6731 = G__6741;
          count__6732 = G__6742;
          i__6733 = G__6743;
          continue;
        } else {
          var vec__6735 = cljs.core.first.call(null, seq__6730__$1);
          var k = cljs.core.nth.call(null, vec__6735, 0, null);
          var v = cljs.core.nth.call(null, vec__6735, 1, null);
          f.call(null, v, k);
          var G__6744 = cljs.core.next.call(null, seq__6730__$1);
          var G__6745 = null;
          var G__6746 = 0;
          var G__6747 = 0;
          seq__6730 = G__6744;
          chunk__6731 = G__6745;
          count__6732 = G__6746;
          i__6733 = G__6747;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__6728_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__6728_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__6748 = null;
  var G__6748__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6748__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6748 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6748__2.call(this, self__, k);
      case 3:
        return G__6748__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6748.cljs$core$IFn$_invoke$arity$2 = G__6748__2;
  G__6748.cljs$core$IFn$_invoke$arity$3 = G__6748__3;
  return G__6748;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args6729) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6729)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__6749 = i + 1;
        var G__6750 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__6749;
        out = G__6750;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__6751 = i + 1;
        var G__6752 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__6751;
        out = G__6752;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__6754 = null;
  var G__6754__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__6754__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__6754 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6754__2.call(this, self__, k);
      case 3:
        return G__6754__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6754.cljs$core$IFn$_invoke$arity$2 = G__6754__2;
  G__6754.cljs$core$IFn$_invoke$arity$3 = G__6754__3;
  return G__6754;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args6753) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6753)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__6757 = cljs.core.seq.call(null, coll);
  var chunk__6758 = null;
  var count__6759 = 0;
  var i__6760 = 0;
  while (true) {
    if (i__6760 < count__6759) {
      var vec__6761 = cljs.core._nth.call(null, chunk__6758, i__6760);
      var k = cljs.core.nth.call(null, vec__6761, 0, null);
      var v = cljs.core.nth.call(null, vec__6761, 1, null);
      f.call(null, v, k);
      var G__6763 = seq__6757;
      var G__6764 = chunk__6758;
      var G__6765 = count__6759;
      var G__6766 = i__6760 + 1;
      seq__6757 = G__6763;
      chunk__6758 = G__6764;
      count__6759 = G__6765;
      i__6760 = G__6766;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6757);
      if (temp__4126__auto__) {
        var seq__6757__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6757__$1)) {
          var c__4527__auto__ = cljs.core.chunk_first.call(null, seq__6757__$1);
          var G__6767 = cljs.core.chunk_rest.call(null, seq__6757__$1);
          var G__6768 = c__4527__auto__;
          var G__6769 = cljs.core.count.call(null, c__4527__auto__);
          var G__6770 = 0;
          seq__6757 = G__6767;
          chunk__6758 = G__6768;
          count__6759 = G__6769;
          i__6760 = G__6770;
          continue;
        } else {
          var vec__6762 = cljs.core.first.call(null, seq__6757__$1);
          var k = cljs.core.nth.call(null, vec__6762, 0, null);
          var v = cljs.core.nth.call(null, vec__6762, 1, null);
          f.call(null, v, k);
          var G__6771 = cljs.core.next.call(null, seq__6757__$1);
          var G__6772 = null;
          var G__6773 = 0;
          var G__6774 = 0;
          seq__6757 = G__6771;
          chunk__6758 = G__6772;
          count__6759 = G__6773;
          i__6760 = G__6774;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__6755_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__6755_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__6775 = null;
  var G__6775__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6775__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6775 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6775__2.call(this, self__, k);
      case 3:
        return G__6775__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6775.cljs$core$IFn$_invoke$arity$2 = G__6775__2;
  G__6775.cljs$core$IFn$_invoke$arity$3 = G__6775__3;
  return G__6775;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args6756) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6756)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4621__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4621__auto__.length) {
        var G__6776 = i + 1;
        var G__6777 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__6776;
        res = G__6777;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__6778 = cljs.core._next.call(null, in$__$1);
          var G__6779 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__6778;
          out = G__6779;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__6780__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__6780 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__6780__delegate.call(this, keys);
    };
    G__6780.cljs$lang$maxFixedArity = 0;
    G__6780.cljs$lang$applyTo = function(arglist__6781) {
      var keys = cljs.core.seq(arglist__6781);
      return G__6780__delegate(keys);
    };
    G__6780.cljs$core$IFn$_invoke$arity$variadic = G__6780__delegate;
    return G__6780;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__6782) {
    var keys = cljs.core.seq(arglist__6782);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__6783) {
    var comparator = cljs.core.first(arglist__6783);
    var keys = cljs.core.rest(arglist__6783);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__6784_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__6784_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__6784_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__6785_SHARP_) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__6785_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__6785_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__6792, seen__$1) {
        while (true) {
          var vec__6793 = p__6792;
          var f = cljs.core.nth.call(null, vec__6793, 0, null);
          var xs__$1 = vec__6793;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__6794 = cljs.core.rest.call(null, s);
              var G__6795 = seen__$1;
              p__6792 = G__6794;
              seen__$1 = G__6795;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__6796 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__6797 = cljs.core.next.call(null, s__$1);
      ret = G__6796;
      s__$1 = G__6797;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__6799 = x;
    if (G__6799) {
      var bit__4414__auto__ = G__6799.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4414__auto__ || G__6799.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__6800 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__6801 = cljs.core.next.call(null, ks);
      var G__6802 = cljs.core.next.call(null, vs);
      map = G__6800;
      ks = G__6801;
      vs = G__6802;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__6805__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__6803_SHARP_, p2__6804_SHARP_) {
        return max_key.call(null, k, p1__6803_SHARP_, p2__6804_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__6805 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6805__delegate.call(this, k, x, y, more);
    };
    G__6805.cljs$lang$maxFixedArity = 3;
    G__6805.cljs$lang$applyTo = function(arglist__6806) {
      var k = cljs.core.first(arglist__6806);
      arglist__6806 = cljs.core.next(arglist__6806);
      var x = cljs.core.first(arglist__6806);
      arglist__6806 = cljs.core.next(arglist__6806);
      var y = cljs.core.first(arglist__6806);
      var more = cljs.core.rest(arglist__6806);
      return G__6805__delegate(k, x, y, more);
    };
    G__6805.cljs$core$IFn$_invoke$arity$variadic = G__6805__delegate;
    return G__6805;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__6809__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__6807_SHARP_, p2__6808_SHARP_) {
        return min_key.call(null, k, p1__6807_SHARP_, p2__6808_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__6809 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6809__delegate.call(this, k, x, y, more);
    };
    G__6809.cljs$lang$maxFixedArity = 3;
    G__6809.cljs$lang$applyTo = function(arglist__6810) {
      var k = cljs.core.first(arglist__6810);
      arglist__6810 = cljs.core.next(arglist__6810);
      var x = cljs.core.first(arglist__6810);
      arglist__6810 = cljs.core.next(arglist__6810);
      var y = cljs.core.first(arglist__6810);
      var more = cljs.core.rest(arglist__6810);
      return G__6809__delegate(k, x, y, more);
    };
    G__6809.cljs$core$IFn$_invoke$arity$variadic = G__6809__delegate;
    return G__6809;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/ArrayList");
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(f1) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__6811 = null;
          var G__6811__0 = function() {
            return f1.call(null);
          };
          var G__6811__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return f1.call(null, result, v);
            }();
            return f1.call(null, result__$1);
          };
          var G__6811__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return f1.call(null, result, v);
            } else {
              return result;
            }
          };
          G__6811 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6811__0.call(this);
              case 1:
                return G__6811__1.call(this, result);
              case 2:
                return G__6811__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6811.cljs$core$IFn$_invoke$arity$0 = G__6811__0;
          G__6811.cljs$core$IFn$_invoke$arity$1 = G__6811__1;
          G__6811.cljs$core$IFn$_invoke$arity$2 = G__6811__2;
          return G__6811;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(f1) {
      return function() {
        var G__6812 = null;
        var G__6812__0 = function() {
          return f1.call(null);
        };
        var G__6812__1 = function(result) {
          return f1.call(null, result);
        };
        var G__6812__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return f1.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__6812 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__6812__0.call(this);
            case 1:
              return G__6812__1.call(this, result);
            case 2:
              return G__6812__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__6812.cljs$core$IFn$_invoke$arity$0 = G__6812__0;
        G__6812.cljs$core$IFn$_invoke$arity$1 = G__6812__1;
        G__6812.cljs$core$IFn$_invoke$arity$2 = G__6812__2;
        return G__6812;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__6815 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__6815, 0, null);
        var s = vec__6815;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__6816 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__6816, 0, null);
      var s = vec__6816;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__6819 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__6819, 0, null);
        var s = vec__6819;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__6820 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__6820, 0, null);
      var s = vec__6820;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4169__auto__ = self__.__hash;
  if (!(h__4169__auto__ == null)) {
    return h__4169__auto__;
  } else {
    var h__4169__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4169__auto____$1;
    return h__4169__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(f1) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__6821 = null;
          var G__6821__0 = function() {
            return f1.call(null);
          };
          var G__6821__1 = function(result) {
            return f1.call(null, result);
          };
          var G__6821__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return f1.call(null, result, input);
            } else {
              return result;
            }
          };
          G__6821 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6821__0.call(this);
              case 1:
                return G__6821__1.call(this, result);
              case 2:
                return G__6821__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6821.cljs$core$IFn$_invoke$arity$0 = G__6821__0;
          G__6821.cljs$core$IFn$_invoke$arity$1 = G__6821__1;
          G__6821.cljs$core$IFn$_invoke$arity$2 = G__6821__2;
          return G__6821;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(f1) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__6823 = null;
          var G__6823__0 = function() {
            return f1.call(null);
          };
          var G__6823__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return f1.call(null, result, v);
            }();
            return f1.call(null, result__$1);
          };
          var G__6823__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = f1.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__6823 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6823__0.call(this);
              case 1:
                return G__6823__1.call(this, result);
              case 2:
                return G__6823__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6823.cljs$core$IFn$_invoke$arity$0 = G__6823__0;
          G__6823.cljs$core$IFn$_invoke$arity$1 = G__6823__1;
          G__6823.cljs$core$IFn$_invoke$arity$2 = G__6823__2;
          return G__6823;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
          return function(p1__6822_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__6822_SHARP_));
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__6834 = null;
      var G__6834__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__6834__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__6834__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__6834__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__6834__4 = function() {
        var G__6835__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__6835 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6835__delegate.call(this, x, y, z, args);
        };
        G__6835.cljs$lang$maxFixedArity = 3;
        G__6835.cljs$lang$applyTo = function(arglist__6836) {
          var x = cljs.core.first(arglist__6836);
          arglist__6836 = cljs.core.next(arglist__6836);
          var y = cljs.core.first(arglist__6836);
          arglist__6836 = cljs.core.next(arglist__6836);
          var z = cljs.core.first(arglist__6836);
          var args = cljs.core.rest(arglist__6836);
          return G__6835__delegate(x, y, z, args);
        };
        G__6835.cljs$core$IFn$_invoke$arity$variadic = G__6835__delegate;
        return G__6835;
      }();
      G__6834 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__6834__0.call(this);
          case 1:
            return G__6834__1.call(this, x);
          case 2:
            return G__6834__2.call(this, x, y);
          case 3:
            return G__6834__3.call(this, x, y, z);
          default:
            return G__6834__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6834.cljs$lang$maxFixedArity = 3;
      G__6834.cljs$lang$applyTo = G__6834__4.cljs$lang$applyTo;
      G__6834.cljs$core$IFn$_invoke$arity$0 = G__6834__0;
      G__6834.cljs$core$IFn$_invoke$arity$1 = G__6834__1;
      G__6834.cljs$core$IFn$_invoke$arity$2 = G__6834__2;
      G__6834.cljs$core$IFn$_invoke$arity$3 = G__6834__3;
      G__6834.cljs$core$IFn$_invoke$arity$variadic = G__6834__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6834;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__6837 = null;
      var G__6837__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__6837__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__6837__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__6837__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__6837__4 = function() {
        var G__6838__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__6838 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6838__delegate.call(this, x, y, z, args);
        };
        G__6838.cljs$lang$maxFixedArity = 3;
        G__6838.cljs$lang$applyTo = function(arglist__6839) {
          var x = cljs.core.first(arglist__6839);
          arglist__6839 = cljs.core.next(arglist__6839);
          var y = cljs.core.first(arglist__6839);
          arglist__6839 = cljs.core.next(arglist__6839);
          var z = cljs.core.first(arglist__6839);
          var args = cljs.core.rest(arglist__6839);
          return G__6838__delegate(x, y, z, args);
        };
        G__6838.cljs$core$IFn$_invoke$arity$variadic = G__6838__delegate;
        return G__6838;
      }();
      G__6837 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__6837__0.call(this);
          case 1:
            return G__6837__1.call(this, x);
          case 2:
            return G__6837__2.call(this, x, y);
          case 3:
            return G__6837__3.call(this, x, y, z);
          default:
            return G__6837__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6837.cljs$lang$maxFixedArity = 3;
      G__6837.cljs$lang$applyTo = G__6837__4.cljs$lang$applyTo;
      G__6837.cljs$core$IFn$_invoke$arity$0 = G__6837__0;
      G__6837.cljs$core$IFn$_invoke$arity$1 = G__6837__1;
      G__6837.cljs$core$IFn$_invoke$arity$2 = G__6837__2;
      G__6837.cljs$core$IFn$_invoke$arity$3 = G__6837__3;
      G__6837.cljs$core$IFn$_invoke$arity$variadic = G__6837__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6837;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__6840 = null;
      var G__6840__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__6840__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__6840__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__6840__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__6840__4 = function() {
        var G__6841__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__6841 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6841__delegate.call(this, x, y, z, args);
        };
        G__6841.cljs$lang$maxFixedArity = 3;
        G__6841.cljs$lang$applyTo = function(arglist__6842) {
          var x = cljs.core.first(arglist__6842);
          arglist__6842 = cljs.core.next(arglist__6842);
          var y = cljs.core.first(arglist__6842);
          arglist__6842 = cljs.core.next(arglist__6842);
          var z = cljs.core.first(arglist__6842);
          var args = cljs.core.rest(arglist__6842);
          return G__6841__delegate(x, y, z, args);
        };
        G__6841.cljs$core$IFn$_invoke$arity$variadic = G__6841__delegate;
        return G__6841;
      }();
      G__6840 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__6840__0.call(this);
          case 1:
            return G__6840__1.call(this, x);
          case 2:
            return G__6840__2.call(this, x, y);
          case 3:
            return G__6840__3.call(this, x, y, z);
          default:
            return G__6840__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6840.cljs$lang$maxFixedArity = 3;
      G__6840.cljs$lang$applyTo = G__6840__4.cljs$lang$applyTo;
      G__6840.cljs$core$IFn$_invoke$arity$0 = G__6840__0;
      G__6840.cljs$core$IFn$_invoke$arity$1 = G__6840__1;
      G__6840.cljs$core$IFn$_invoke$arity$2 = G__6840__2;
      G__6840.cljs$core$IFn$_invoke$arity$3 = G__6840__3;
      G__6840.cljs$core$IFn$_invoke$arity$variadic = G__6840__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6840;
    }();
  };
  var juxt__4 = function() {
    var G__6843__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__6844 = null;
          var G__6844__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__6824_SHARP_, p2__6825_SHARP_) {
                return cljs.core.conj.call(null, p1__6824_SHARP_, p2__6825_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__6844__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__6826_SHARP_, p2__6827_SHARP_) {
                return cljs.core.conj.call(null, p1__6826_SHARP_, p2__6827_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__6844__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__6828_SHARP_, p2__6829_SHARP_) {
                return cljs.core.conj.call(null, p1__6828_SHARP_, p2__6829_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__6844__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__6830_SHARP_, p2__6831_SHARP_) {
                return cljs.core.conj.call(null, p1__6830_SHARP_, p2__6831_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__6844__4 = function() {
            var G__6845__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__6832_SHARP_, p2__6833_SHARP_) {
                  return cljs.core.conj.call(null, p1__6832_SHARP_, cljs.core.apply.call(null, p2__6833_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__6845 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__6845__delegate.call(this, x, y, z, args);
            };
            G__6845.cljs$lang$maxFixedArity = 3;
            G__6845.cljs$lang$applyTo = function(arglist__6846) {
              var x = cljs.core.first(arglist__6846);
              arglist__6846 = cljs.core.next(arglist__6846);
              var y = cljs.core.first(arglist__6846);
              arglist__6846 = cljs.core.next(arglist__6846);
              var z = cljs.core.first(arglist__6846);
              var args = cljs.core.rest(arglist__6846);
              return G__6845__delegate(x, y, z, args);
            };
            G__6845.cljs$core$IFn$_invoke$arity$variadic = G__6845__delegate;
            return G__6845;
          }();
          G__6844 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__6844__0.call(this);
              case 1:
                return G__6844__1.call(this, x);
              case 2:
                return G__6844__2.call(this, x, y);
              case 3:
                return G__6844__3.call(this, x, y, z);
              default:
                return G__6844__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6844.cljs$lang$maxFixedArity = 3;
          G__6844.cljs$lang$applyTo = G__6844__4.cljs$lang$applyTo;
          G__6844.cljs$core$IFn$_invoke$arity$0 = G__6844__0;
          G__6844.cljs$core$IFn$_invoke$arity$1 = G__6844__1;
          G__6844.cljs$core$IFn$_invoke$arity$2 = G__6844__2;
          G__6844.cljs$core$IFn$_invoke$arity$3 = G__6844__3;
          G__6844.cljs$core$IFn$_invoke$arity$variadic = G__6844__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__6844;
        }();
      }(fs__$1);
    };
    var G__6843 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6843__delegate.call(this, f, g, h, fs);
    };
    G__6843.cljs$lang$maxFixedArity = 3;
    G__6843.cljs$lang$applyTo = function(arglist__6847) {
      var f = cljs.core.first(arglist__6847);
      arglist__6847 = cljs.core.next(arglist__6847);
      var g = cljs.core.first(arglist__6847);
      arglist__6847 = cljs.core.next(arglist__6847);
      var h = cljs.core.first(arglist__6847);
      var fs = cljs.core.rest(arglist__6847);
      return G__6843__delegate(f, g, h, fs);
    };
    G__6843.cljs$core$IFn$_invoke$arity$variadic = G__6843__delegate;
    return G__6843;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__6848 = cljs.core.next.call(null, coll);
        coll = G__6848;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__6849 = n - 1;
        var G__6850 = cljs.core.next.call(null, coll);
        n = G__6849;
        coll = G__6850;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__6852 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__6852, 0, null);
  var flags = cljs.core.nth.call(null, vec__6852, 1, null);
  var pattern = cljs.core.nth.call(null, vec__6852, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_6854 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_6855__$1 = cljs.core.next.call(null, coll);
      var n_6856 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_6855__$1 && (n_6856 == null || !(n_6856 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_6855__$1), writer, opts);
          var G__6857 = cljs.core.next.call(null, coll_6855__$1);
          var G__6858 = n_6856 - 1;
          coll_6855__$1 = G__6857;
          n_6856 = G__6858;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_6855__$1) && n_6856 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_6854;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__6863 = cljs.core.seq.call(null, ss);
    var chunk__6864 = null;
    var count__6865 = 0;
    var i__6866 = 0;
    while (true) {
      if (i__6866 < count__6865) {
        var s = cljs.core._nth.call(null, chunk__6864, i__6866);
        cljs.core._write.call(null, writer, s);
        var G__6867 = seq__6863;
        var G__6868 = chunk__6864;
        var G__6869 = count__6865;
        var G__6870 = i__6866 + 1;
        seq__6863 = G__6867;
        chunk__6864 = G__6868;
        count__6865 = G__6869;
        i__6866 = G__6870;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__6863);
        if (temp__4126__auto__) {
          var seq__6863__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__6863__$1)) {
            var c__4527__auto__ = cljs.core.chunk_first.call(null, seq__6863__$1);
            var G__6871 = cljs.core.chunk_rest.call(null, seq__6863__$1);
            var G__6872 = c__4527__auto__;
            var G__6873 = cljs.core.count.call(null, c__4527__auto__);
            var G__6874 = 0;
            seq__6863 = G__6871;
            chunk__6864 = G__6872;
            count__6865 = G__6873;
            i__6866 = G__6874;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__6863__$1);
            cljs.core._write.call(null, writer, s);
            var G__6875 = cljs.core.next.call(null, seq__6863__$1);
            var G__6876 = null;
            var G__6877 = 0;
            var G__6878 = 0;
            seq__6863 = G__6875;
            chunk__6864 = G__6876;
            count__6865 = G__6877;
            i__6866 = G__6878;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__6879) {
    var writer = cljs.core.first(arglist__6879);
    var ss = cljs.core.rest(arglist__6879);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj6881 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj6881;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3746__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3746__auto__)) {
          var and__3746__auto____$1 = function() {
            var G__6887 = obj;
            if (G__6887) {
              var bit__4421__auto__ = G__6887.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4421__auto__ || G__6887.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__6887.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__6887);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__6887);
            }
          }();
          if (and__3746__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3746__auto____$1;
          }
        } else {
          return and__3746__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__6888 = obj;
            if (G__6888) {
              var bit__4414__auto__ = G__6888.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4414__auto__ || G__6888.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__6890 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                              ns = G__6890;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__6889 = obj;
                            if (G__6889) {
                              var bit__4421__auto__ = G__6889.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4421__auto__ || G__6889.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__6889.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__6889);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__6889);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__6895 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__6896 = null;
  var count__6897 = 0;
  var i__6898 = 0;
  while (true) {
    if (i__6898 < count__6897) {
      var obj = cljs.core._nth.call(null, chunk__6896, i__6898);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__6899 = seq__6895;
      var G__6900 = chunk__6896;
      var G__6901 = count__6897;
      var G__6902 = i__6898 + 1;
      seq__6895 = G__6899;
      chunk__6896 = G__6900;
      count__6897 = G__6901;
      i__6898 = G__6902;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6895);
      if (temp__4126__auto__) {
        var seq__6895__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6895__$1)) {
          var c__4527__auto__ = cljs.core.chunk_first.call(null, seq__6895__$1);
          var G__6903 = cljs.core.chunk_rest.call(null, seq__6895__$1);
          var G__6904 = c__4527__auto__;
          var G__6905 = cljs.core.count.call(null, c__4527__auto__);
          var G__6906 = 0;
          seq__6895 = G__6903;
          chunk__6896 = G__6904;
          count__6897 = G__6905;
          i__6898 = G__6906;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__6895__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__6907 = cljs.core.next.call(null, seq__6895__$1);
          var G__6908 = null;
          var G__6909 = 0;
          var G__6910 = 0;
          seq__6895 = G__6907;
          chunk__6896 = G__6908;
          count__6897 = G__6909;
          i__6898 = G__6910;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__6911) {
    var objs = cljs.core.seq(arglist__6911);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__6912) {
    var objs = cljs.core.seq(arglist__6912);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__6913) {
    var objs = cljs.core.seq(arglist__6913);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__6914) {
    var objs = cljs.core.seq(arglist__6914);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__6915) {
    var objs = cljs.core.seq(arglist__6915);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__6916) {
    var objs = cljs.core.seq(arglist__6916);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__6917) {
    var objs = cljs.core.seq(arglist__6917);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__6918) {
    var objs = cljs.core.seq(arglist__6918);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__6919) {
    var iref = cljs.core.first(arglist__6919);
    arglist__6919 = cljs.core.next(arglist__6919);
    var f = cljs.core.first(arglist__6919);
    var args = cljs.core.rest(arglist__6919);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(f1) {
  return function(p1__6920_SHARP_, p2__6921_SHARP_) {
    var ret = f1.call(null, p1__6920_SHARP_, p2__6921_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(f1) {
  var rf1 = cljs.core.preserving_reduced.call(null, f1);
  return function(rf1) {
    return function() {
      var G__6922 = null;
      var G__6922__0 = function() {
        return f1.call(null);
      };
      var G__6922__1 = function(result) {
        return f1.call(null, result);
      };
      var G__6922__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__6922 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__6922__0.call(this);
          case 1:
            return G__6922__1.call(this, result);
          case 2:
            return G__6922__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6922.cljs$core$IFn$_invoke$arity$0 = G__6922__0;
      G__6922.cljs$core$IFn$_invoke$arity$1 = G__6922__1;
      G__6922.cljs$core$IFn$_invoke$arity$2 = G__6922__2;
      return G__6922;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(f1) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__6923 = null;
          var G__6923__0 = function() {
            return f1.call(null);
          };
          var G__6923__1 = function(result) {
            return f1.call(null, result);
          };
          var G__6923__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return f1.call(null, result, input);
            }
          };
          G__6923 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6923__0.call(this);
              case 1:
                return G__6923__1.call(this, result);
              case 2:
                return G__6923__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6923.cljs$core$IFn$_invoke$arity$0 = G__6923__0;
          G__6923.cljs$core$IFn$_invoke$arity$1 = G__6923__1;
          G__6923.cljs$core$IFn$_invoke$arity$2 = G__6923__2;
          return G__6923;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Iteration = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Iteration.cljs$lang$type = true;
cljs.core.Iteration.cljs$lang$ctorStr = "cljs.core/Iteration";
cljs.core.Iteration.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/Iteration");
};
cljs.core.Iteration.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Iteration.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Iteration.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.__GT_Iteration = function __GT_Iteration(xform, coll) {
  return new cljs.core.Iteration(xform, coll);
};
cljs.core.iteration = function iteration(xform, coll) {
  return new cljs.core.Iteration(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__6925_SHARP_, p2__6924_SHARP_) {
    return proc.call(null, p2__6924_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj6927 = {};
  return obj6927;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3746__auto__ = x;
    if (and__3746__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4394__auto__ = x == null ? null : x;
    return function() {
      var or__3758__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3746__auto__ = x;
    if (and__3746__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4394__auto__ = x == null ? null : x;
    return function() {
      var or__3758__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__6929 = k;
    if (G__6929) {
      var bit__4421__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3758__auto__ = bit__4421__auto__;
        if (cljs.core.truth_(or__3758__auto__)) {
          return or__3758__auto__;
        } else {
          return G__6929.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__6929.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__6929);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__6929);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__6943 = x;
      if (G__6943) {
        var bit__4421__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3758__auto__ = bit__4421__auto__;
          if (cljs.core.truth_(or__3758__auto__)) {
            return or__3758__auto__;
          } else {
            return G__6943.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__6943.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__6943);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__6943);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj6945 = {};
              return obj6945;
            }();
            var seq__6946_6956 = cljs.core.seq.call(null, x);
            var chunk__6947_6957 = null;
            var count__6948_6958 = 0;
            var i__6949_6959 = 0;
            while (true) {
              if (i__6949_6959 < count__6948_6958) {
                var vec__6950_6960 = cljs.core._nth.call(null, chunk__6947_6957, i__6949_6959);
                var k_6961 = cljs.core.nth.call(null, vec__6950_6960, 0, null);
                var v_6962 = cljs.core.nth.call(null, vec__6950_6960, 1, null);
                m[cljs.core.key__GT_js.call(null, k_6961)] = clj__GT_js.call(null, v_6962);
                var G__6963 = seq__6946_6956;
                var G__6964 = chunk__6947_6957;
                var G__6965 = count__6948_6958;
                var G__6966 = i__6949_6959 + 1;
                seq__6946_6956 = G__6963;
                chunk__6947_6957 = G__6964;
                count__6948_6958 = G__6965;
                i__6949_6959 = G__6966;
                continue;
              } else {
                var temp__4126__auto___6967 = cljs.core.seq.call(null, seq__6946_6956);
                if (temp__4126__auto___6967) {
                  var seq__6946_6968__$1 = temp__4126__auto___6967;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__6946_6968__$1)) {
                    var c__4527__auto___6969 = cljs.core.chunk_first.call(null, seq__6946_6968__$1);
                    var G__6970 = cljs.core.chunk_rest.call(null, seq__6946_6968__$1);
                    var G__6971 = c__4527__auto___6969;
                    var G__6972 = cljs.core.count.call(null, c__4527__auto___6969);
                    var G__6973 = 0;
                    seq__6946_6956 = G__6970;
                    chunk__6947_6957 = G__6971;
                    count__6948_6958 = G__6972;
                    i__6949_6959 = G__6973;
                    continue;
                  } else {
                    var vec__6951_6974 = cljs.core.first.call(null, seq__6946_6968__$1);
                    var k_6975 = cljs.core.nth.call(null, vec__6951_6974, 0, null);
                    var v_6976 = cljs.core.nth.call(null, vec__6951_6974, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_6975)] = clj__GT_js.call(null, v_6976);
                    var G__6977 = cljs.core.next.call(null, seq__6946_6968__$1);
                    var G__6978 = null;
                    var G__6979 = 0;
                    var G__6980 = 0;
                    seq__6946_6956 = G__6977;
                    chunk__6947_6957 = G__6978;
                    count__6948_6958 = G__6979;
                    i__6949_6959 = G__6980;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__6952_6981 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__6953_6982 = null;
              var count__6954_6983 = 0;
              var i__6955_6984 = 0;
              while (true) {
                if (i__6955_6984 < count__6954_6983) {
                  var x_6985__$1 = cljs.core._nth.call(null, chunk__6953_6982, i__6955_6984);
                  arr.push(x_6985__$1);
                  var G__6986 = seq__6952_6981;
                  var G__6987 = chunk__6953_6982;
                  var G__6988 = count__6954_6983;
                  var G__6989 = i__6955_6984 + 1;
                  seq__6952_6981 = G__6986;
                  chunk__6953_6982 = G__6987;
                  count__6954_6983 = G__6988;
                  i__6955_6984 = G__6989;
                  continue;
                } else {
                  var temp__4126__auto___6990 = cljs.core.seq.call(null, seq__6952_6981);
                  if (temp__4126__auto___6990) {
                    var seq__6952_6991__$1 = temp__4126__auto___6990;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__6952_6991__$1)) {
                      var c__4527__auto___6992 = cljs.core.chunk_first.call(null, seq__6952_6991__$1);
                      var G__6993 = cljs.core.chunk_rest.call(null, seq__6952_6991__$1);
                      var G__6994 = c__4527__auto___6992;
                      var G__6995 = cljs.core.count.call(null, c__4527__auto___6992);
                      var G__6996 = 0;
                      seq__6952_6981 = G__6993;
                      chunk__6953_6982 = G__6994;
                      count__6954_6983 = G__6995;
                      i__6955_6984 = G__6996;
                      continue;
                    } else {
                      var x_6997__$1 = cljs.core.first.call(null, seq__6952_6991__$1);
                      arr.push(x_6997__$1);
                      var G__6998 = cljs.core.next.call(null, seq__6952_6991__$1);
                      var G__6999 = null;
                      var G__7000 = 0;
                      var G__7001 = 0;
                      seq__6952_6981 = G__6998;
                      chunk__6953_6982 = G__6999;
                      count__6954_6983 = G__7000;
                      i__6955_6984 = G__7001;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj7003 = {};
  return obj7003;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3746__auto__ = x;
    if (and__3746__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4394__auto__ = x == null ? null : x;
    return function() {
      var or__3758__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__7024__delegate = function(x, opts) {
      if (function() {
        var G__7014 = x;
        if (G__7014) {
          var bit__4421__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3758__auto__ = bit__4421__auto__;
            if (cljs.core.truth_(or__3758__auto__)) {
              return or__3758__auto__;
            } else {
              return G__7014.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__7014.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__7014);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__7014);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__7015 = opts;
          var map__7015__$1 = cljs.core.seq_QMARK_.call(null, map__7015) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7015) : map__7015;
          var keywordize_keys = cljs.core.get.call(null, map__7015__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__7015, map__7015__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4496__auto__ = function(map__7015, map__7015__$1, keywordize_keys, keyfn) {
                          return function iter__7020(s__7021) {
                            return new cljs.core.LazySeq(null, function(map__7015, map__7015__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__7021__$1 = s__7021;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__7021__$1);
                                  if (temp__4126__auto__) {
                                    var s__7021__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__7021__$2)) {
                                      var c__4494__auto__ = cljs.core.chunk_first.call(null, s__7021__$2);
                                      var size__4495__auto__ = cljs.core.count.call(null, c__4494__auto__);
                                      var b__7023 = cljs.core.chunk_buffer.call(null, size__4495__auto__);
                                      if (function() {
                                        var i__7022 = 0;
                                        while (true) {
                                          if (i__7022 < size__4495__auto__) {
                                            var k = cljs.core._nth.call(null, c__4494__auto__, i__7022);
                                            cljs.core.chunk_append.call(null, b__7023, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__7025 = i__7022 + 1;
                                            i__7022 = G__7025;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__7023), iter__7020.call(null, cljs.core.chunk_rest.call(null, s__7021__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__7023), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__7021__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__7020.call(null, cljs.core.rest.call(null, s__7021__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__7015, map__7015__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__7015, map__7015__$1, keywordize_keys, keyfn);
                        return iter__4496__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      return x__$1;
                    }
                  }
                }
              }
            };
          }(map__7015, map__7015__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__7024 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7024__delegate.call(this, x, opts);
    };
    G__7024.cljs$lang$maxFixedArity = 1;
    G__7024.cljs$lang$applyTo = function(arglist__7026) {
      var x = cljs.core.first(arglist__7026);
      var opts = cljs.core.rest(arglist__7026);
      return G__7024__delegate(x, opts);
    };
    G__7024.cljs$core$IFn$_invoke$arity$variadic = G__7024__delegate;
    return G__7024;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__7027__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__7027 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__7027__delegate.call(this, args);
      };
      G__7027.cljs$lang$maxFixedArity = 0;
      G__7027.cljs$lang$applyTo = function(arglist__7028) {
        var args = cljs.core.seq(arglist__7028);
        return G__7027__delegate(args);
      };
      G__7027.cljs$core$IFn$_invoke$arity$variadic = G__7027__delegate;
      return G__7027;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__7029 = ret;
        f = G__7029;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__7030__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__7030 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7030__delegate.call(this, f, args);
    };
    G__7030.cljs$lang$maxFixedArity = 1;
    G__7030.cljs$lang$applyTo = function(arglist__7031) {
      var f = cljs.core.first(arglist__7031);
      var args = cljs.core.rest(arglist__7031);
      return G__7030__delegate(f, args);
    };
    G__7030.cljs$core$IFn$_invoke$arity$variadic = G__7030__delegate;
    return G__7030;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__7032) {
    var f = cljs.core.first(arglist__7032);
    var args = cljs.core.rest(arglist__7032);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3758__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3758__auto__) {
      return or__3758__auto__;
    } else {
      var or__3758__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3758__auto____$1) {
        return or__3758__auto____$1;
      } else {
        var and__3746__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3746__auto__) {
          var and__3746__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3746__auto____$1) {
            var and__3746__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3746__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__7033 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__7034 = i + 1;
                  ret = G__7033;
                  i = G__7034;
                  continue;
                }
                break;
              }
            } else {
              return and__3746__auto____$2;
            }
          } else {
            return and__3746__auto____$1;
          }
        } else {
          return and__3746__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3758__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__7035_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__7035_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__7035_SHARP_), cljs.core.second.call(null, p1__7035_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__7036_SHARP_, p2__7037_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__7036_SHARP_, p2__7037_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3758__auto__ = cljs.core.truth_(function() {
    var and__3746__auto__ = xprefs;
    if (cljs.core.truth_(and__3746__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3746__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3758__auto__)) {
    return or__3758__auto__;
  } else {
    var or__3758__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__7038 = cljs.core.rest.call(null, ps);
          ps = G__7038;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3758__auto____$1)) {
      return or__3758__auto____$1;
    } else {
      var or__3758__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__7039 = cljs.core.rest.call(null, ps);
            ps = G__7039;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3758__auto____$2)) {
        return or__3758__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3758__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3758__auto__)) {
    return or__3758__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__7042) {
    var vec__7043 = p__7042;
    var k = cljs.core.nth.call(null, vec__7043, 0, null);
    var _ = cljs.core.nth.call(null, vec__7043, 1, null);
    var e = vec__7043;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3758__auto__ = be == null;
        if (or__3758__auto__) {
          return or__3758__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj7045 = {};
  return obj7045;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3746__auto__ = mf;
    if (and__3746__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4394__auto__ = mf == null ? null : mf;
    return function() {
      var or__3758__auto__ = cljs.core._reset[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._reset["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3746__auto__ = mf;
    if (and__3746__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4394__auto__ = mf == null ? null : mf;
    return function() {
      var or__3758__auto__ = cljs.core._add_method[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._add_method["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3746__auto__ = mf;
    if (and__3746__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4394__auto__ = mf == null ? null : mf;
    return function() {
      var or__3758__auto__ = cljs.core._remove_method[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._remove_method["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3746__auto__ = mf;
    if (and__3746__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4394__auto__ = mf == null ? null : mf;
    return function() {
      var or__3758__auto__ = cljs.core._prefer_method[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3746__auto__ = mf;
    if (and__3746__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4394__auto__ = mf == null ? null : mf;
    return function() {
      var or__3758__auto__ = cljs.core._get_method[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._get_method["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3746__auto__ = mf;
    if (and__3746__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4394__auto__ = mf == null ? null : mf;
    return function() {
      var or__3758__auto__ = cljs.core._methods[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._methods["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3746__auto__ = mf;
    if (and__3746__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4394__auto__ = mf == null ? null : mf;
    return function() {
      var or__3758__auto__ = cljs.core._prefers[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = cljs.core._prefers["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__7047 = null;
  var G__7047__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__7047__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__7047__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__7047__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__7047__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__7047__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__7047__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__7047__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__7047__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__7047__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__7047__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__7047__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__7047__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__7047__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__7047__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__7047__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__7047__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__7047__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__7047__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__7047__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__7047__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__7047 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__7047__2.call(this, self__, a);
      case 3:
        return G__7047__3.call(this, self__, a, b);
      case 4:
        return G__7047__4.call(this, self__, a, b, c);
      case 5:
        return G__7047__5.call(this, self__, a, b, c, d);
      case 6:
        return G__7047__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__7047__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__7047__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__7047__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__7047__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__7047__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__7047__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__7047__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__7047__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__7047__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__7047__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__7047__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__7047__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__7047__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__7047__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__7047__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__7047__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7047.cljs$core$IFn$_invoke$arity$2 = G__7047__2;
  G__7047.cljs$core$IFn$_invoke$arity$3 = G__7047__3;
  G__7047.cljs$core$IFn$_invoke$arity$4 = G__7047__4;
  G__7047.cljs$core$IFn$_invoke$arity$5 = G__7047__5;
  G__7047.cljs$core$IFn$_invoke$arity$6 = G__7047__6;
  G__7047.cljs$core$IFn$_invoke$arity$7 = G__7047__7;
  G__7047.cljs$core$IFn$_invoke$arity$8 = G__7047__8;
  G__7047.cljs$core$IFn$_invoke$arity$9 = G__7047__9;
  G__7047.cljs$core$IFn$_invoke$arity$10 = G__7047__10;
  G__7047.cljs$core$IFn$_invoke$arity$11 = G__7047__11;
  G__7047.cljs$core$IFn$_invoke$arity$12 = G__7047__12;
  G__7047.cljs$core$IFn$_invoke$arity$13 = G__7047__13;
  G__7047.cljs$core$IFn$_invoke$arity$14 = G__7047__14;
  G__7047.cljs$core$IFn$_invoke$arity$15 = G__7047__15;
  G__7047.cljs$core$IFn$_invoke$arity$16 = G__7047__16;
  G__7047.cljs$core$IFn$_invoke$arity$17 = G__7047__17;
  G__7047.cljs$core$IFn$_invoke$arity$18 = G__7047__18;
  G__7047.cljs$core$IFn$_invoke$arity$19 = G__7047__19;
  G__7047.cljs$core$IFn$_invoke$arity$20 = G__7047__20;
  G__7047.cljs$core$IFn$_invoke$arity$21 = G__7047__21;
  G__7047.cljs$core$IFn$_invoke$arity$22 = G__7047__22;
  return G__7047;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args7046) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7046)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4337__auto__, writer__4338__auto__, opts__4339__auto__) {
  return cljs.core._write.call(null, writer__4338__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("geometry.geometry");
goog.require("cljs.core");
geometry.geometry.IPoint = function() {
  var obj5836 = {};
  return obj5836;
}();
geometry.geometry.x = function x(p) {
  if (function() {
    var and__3746__auto__ = p;
    if (and__3746__auto__) {
      return p.geometry$geometry$IPoint$x$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return p.geometry$geometry$IPoint$x$arity$1(p);
  } else {
    var x__4394__auto__ = p == null ? null : p;
    return function() {
      var or__3758__auto__ = geometry.geometry.x[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = geometry.geometry.x["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPoint.x", p);
        }
      }
    }().call(null, p);
  }
};
geometry.geometry.y = function y(p) {
  if (function() {
    var and__3746__auto__ = p;
    if (and__3746__auto__) {
      return p.geometry$geometry$IPoint$y$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return p.geometry$geometry$IPoint$y$arity$1(p);
  } else {
    var x__4394__auto__ = p == null ? null : p;
    return function() {
      var or__3758__auto__ = geometry.geometry.y[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = geometry.geometry.y["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPoint.y", p);
        }
      }
    }().call(null, p);
  }
};
geometry.geometry.Point = function(x_coord, y_coord) {
  this.x_coord = x_coord;
  this.y_coord = y_coord;
};
geometry.geometry.Point.cljs$lang$type = true;
geometry.geometry.Point.cljs$lang$ctorStr = "geometry.geometry/Point";
geometry.geometry.Point.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "geometry.geometry/Point");
};
geometry.geometry.Point.prototype.geometry$geometry$IPoint$ = true;
geometry.geometry.Point.prototype.geometry$geometry$IPoint$x$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.x_coord;
};
geometry.geometry.Point.prototype.geometry$geometry$IPoint$y$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.y_coord;
};
geometry.geometry.__GT_Point = function __GT_Point(x_coord, y_coord) {
  return new geometry.geometry.Point(x_coord, y_coord);
};
geometry.geometry.point = function point(x, y) {
  return new geometry.geometry.Point(x, y);
};
geometry.geometry.dist = function dist(p1, p2) {
  return Math.sqrt(Math.pow(geometry.geometry.x.call(null, p2) - geometry.geometry.x.call(null, p1), 2) + Math.pow(geometry.geometry.y.call(null, p2) - geometry.geometry.y.call(null, p1), 2));
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__7048 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__7048;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__7052 = cljs.core._EQ_;
    var expr__7053 = limit;
    if (cljs.core.truth_(pred__7052.call(null, 1, expr__7053))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__7052.call(null, 2, expr__7053))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__7055 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__7056 = limit__$1 - 1;
            var G__7057 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__7055;
            limit__$1 = G__7056;
            parts = G__7057;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__7058 = index - 1;
        index = G__7058;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___7059 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___7059)) {
        var replacement_7060 = temp__4124__auto___7059;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_7060));
      } else {
        buffer.append(ch);
      }
      var G__7061 = index + 1;
      index = G__7061;
      continue;
    }
    break;
  }
};
goog.provide("reagentdemo.syntax");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
reagentdemo.syntax.builtins = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 63, ["partial", null, "map", null, "int", null, "range", null, "defn", null, "\x3d", null, "list", null, "%", null, "bit-test", null, "if-not", null, "dissoc", null, "not", null, "if-let", null, "update-in", null, "str", null, "second", null, "get-in", null, "fn", null, "for", null, "rest", null, "count", null, "empty?", null, "swap!", null, "sorted-map", null, "nil?", null, "false", null, "cond", 
null, "if", null, "let", null, "drop", null, "vals", null, "inc", null, "when-let", null, "atom", null, "vector", null, "or", null, "identity", null, "case", null, "remove", null, "true", null, "filter", null, "empty", null, "complement", null, "when", null, "reset!", null, "-\x3e", null, "mod", null, "pos?", null, "conj", null, "-\x3e\x3e", null, "add-watch", null, "zero?", null, "quot", null, "def", null, "dotimes", null, "assoc-in", null, "assoc", null, "into", null, "when-not", null, "dec", null, 
"merge", null, "ns", null, "first", null], null), null);
reagentdemo.syntax.styles = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "comment", "comment", 532206069), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "color", "color", 1011675173), "gray", new cljs.core.Keyword(null, "font-style", "font-style", -773672352), "italic"], null)], null), new cljs.core.Keyword(null, "str-litt", "str-litt", -1280399676), 
new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), "green"], null)], null), new cljs.core.Keyword(null, "keyw", "keyw", -1031955854), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), "blue"], null)], 
null), new cljs.core.Keyword(null, "builtin", "builtin", -1707593346), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "font-weight", "font-weight", 2085804583), "bold", new cljs.core.Keyword(null, "color", "color", 1011675173), "#687868"], null)], null), new cljs.core.Keyword(null, "def", "def", -1043430536), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
"style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "color", "color", 1011675173), "#55c", new cljs.core.Keyword(null, "font-weight", "font-weight", 2085804583), "bold"], null)], null)], null);
reagentdemo.syntax.paren_styles = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), "#272"], null)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
"color", "color", 1011675173), "#940"], null)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), "#44a"], null)], null)], null);
reagentdemo.syntax.tokenize = function tokenize(src) {
  var ws = " \\t\\n";
  var open = "[({";
  var close = ")\\]}";
  var sep = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ws) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(open) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(close);
  var comment_p = ";.*";
  var str_p = '"[^"]*"';
  var open_p = "[" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(open) + "]";
  var close_p = "[" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(close) + "]";
  var iden_p = "[^" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sep) + "]+";
  var meta_p = "\\^" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(iden_p);
  var any_p = "[" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ws) + "]+|\\^[^" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sep) + "]+|.";
  var patt = cljs.core.re_pattern.call(null, "(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.call(null, ")|(", new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [comment_p, str_p, open_p, close_p, meta_p, iden_p, any_p], null))) + ")");
  var keyw_re = /^:/;
  var iter__4496__auto__ = function(ws, open, close, sep, comment_p, str_p, open_p, close_p, iden_p, meta_p, any_p, patt, keyw_re) {
    return function iter__5771(s__5772) {
      return new cljs.core.LazySeq(null, function(ws, open, close, sep, comment_p, str_p, open_p, close_p, iden_p, meta_p, any_p, patt, keyw_re) {
        return function() {
          var s__5772__$1 = s__5772;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__5772__$1);
            if (temp__4126__auto__) {
              var s__5772__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__5772__$2)) {
                var c__4494__auto__ = cljs.core.chunk_first.call(null, s__5772__$2);
                var size__4495__auto__ = cljs.core.count.call(null, c__4494__auto__);
                var b__5774 = cljs.core.chunk_buffer.call(null, size__4495__auto__);
                if (function() {
                  var i__5773 = 0;
                  while (true) {
                    if (i__5773 < size__4495__auto__) {
                      var vec__5777 = cljs.core._nth.call(null, c__4494__auto__, i__5773);
                      var s = cljs.core.nth.call(null, vec__5777, 0, null);
                      var comment = cljs.core.nth.call(null, vec__5777, 1, null);
                      var str_litt = cljs.core.nth.call(null, vec__5777, 2, null);
                      var open__$1 = cljs.core.nth.call(null, vec__5777, 3, null);
                      var close__$1 = cljs.core.nth.call(null, vec__5777, 4, null);
                      var met = cljs.core.nth.call(null, vec__5777, 5, null);
                      var iden = cljs.core.nth.call(null, vec__5777, 6, null);
                      var any = cljs.core.nth.call(null, vec__5777, 7, null);
                      cljs.core.chunk_append.call(null, b__5774, cljs.core.truth_(comment) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "comment", "comment", 532206069), s], null) : cljs.core.truth_(str_litt) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "str-litt", "str-litt", -1280399676), s], null) : cljs.core.truth_(open__$1) ? new cljs.core.PersistentVector(null, 
                      2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "open", "open", -1763596448), s], null) : cljs.core.truth_(close__$1) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "close", "close", 1835149582), s], null) : cljs.core.truth_(met) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "other", "other", 995793544), s], null) : cljs.core.truth_(iden) ? 
                      cljs.core.truth_(cljs.core.re_find.call(null, keyw_re, s)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "keyw", "keyw", -1031955854), s], null) : cljs.core.truth_(reagentdemo.syntax.builtins.call(null, s)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "builtin", "builtin", -1707593346), s], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
                      [new cljs.core.Keyword(null, "iden", "iden", -109046011), s], null) : cljs.core.truth_(any) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "other", "other", 995793544), s], null) : null);
                      var G__5779 = i__5773 + 1;
                      i__5773 = G__5779;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5774), iter__5771.call(null, cljs.core.chunk_rest.call(null, s__5772__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5774), null);
                }
              } else {
                var vec__5778 = cljs.core.first.call(null, s__5772__$2);
                var s = cljs.core.nth.call(null, vec__5778, 0, null);
                var comment = cljs.core.nth.call(null, vec__5778, 1, null);
                var str_litt = cljs.core.nth.call(null, vec__5778, 2, null);
                var open__$1 = cljs.core.nth.call(null, vec__5778, 3, null);
                var close__$1 = cljs.core.nth.call(null, vec__5778, 4, null);
                var met = cljs.core.nth.call(null, vec__5778, 5, null);
                var iden = cljs.core.nth.call(null, vec__5778, 6, null);
                var any = cljs.core.nth.call(null, vec__5778, 7, null);
                return cljs.core.cons.call(null, cljs.core.truth_(comment) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "comment", "comment", 532206069), s], null) : cljs.core.truth_(str_litt) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "str-litt", "str-litt", -1280399676), s], null) : cljs.core.truth_(open__$1) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
                [new cljs.core.Keyword(null, "open", "open", -1763596448), s], null) : cljs.core.truth_(close__$1) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "close", "close", 1835149582), s], null) : cljs.core.truth_(met) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "other", "other", 995793544), s], null) : cljs.core.truth_(iden) ? cljs.core.truth_(cljs.core.re_find.call(null, 
                keyw_re, s)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "keyw", "keyw", -1031955854), s], null) : cljs.core.truth_(reagentdemo.syntax.builtins.call(null, s)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "builtin", "builtin", -1707593346), s], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
                "iden", "iden", -109046011), s], null) : cljs.core.truth_(any) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "other", "other", 995793544), s], null) : null, iter__5771.call(null, cljs.core.rest.call(null, s__5772__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        };
      }(ws, open, close, sep, comment_p, str_p, open_p, close_p, iden_p, meta_p, any_p, patt, keyw_re), null, null);
    };
  }(ws, open, close, sep, comment_p, str_p, open_p, close_p, iden_p, meta_p, any_p, patt, keyw_re);
  return iter__4496__auto__.call(null, cljs.core.re_seq.call(null, patt, src));
};
reagentdemo.syntax.syntaxify = function syntaxify(src) {
  var def_re = /^def|^ns\b/;
  var ncol = cljs.core.count.call(null, reagentdemo.syntax.paren_styles);
  var paren_style = function(def_re, ncol) {
    return function(level) {
      return cljs.core.nth.call(null, reagentdemo.syntax.paren_styles, cljs.core.mod.call(null, level, ncol));
    };
  }(def_re, ncol);
  var tokens = reagentdemo.syntax.tokenize.call(null, src);
  var prev = null;
  var level = 0;
  var res = cljs.core.PersistentVector.EMPTY;
  while (true) {
    var vec__5783 = cljs.core.first.call(null, tokens);
    var kind = cljs.core.nth.call(null, vec__5783, 0, null);
    var val = cljs.core.nth.call(null, vec__5783, 1, null);
    var level_SINGLEQUOTE_ = function() {
      var G__5784 = kind instanceof cljs.core.Keyword ? kind.fqn : null;
      switch(G__5784) {
        case "close":
          return level - 1;
          break;
        case "open":
          return level + 1;
          break;
        default:
          return level;
      }
    }();
    var style = function() {
      var G__5785 = kind instanceof cljs.core.Keyword ? kind.fqn : null;
      switch(G__5785) {
        case "close":
          return paren_style.call(null, level_SINGLEQUOTE_);
          break;
        case "open":
          return paren_style.call(null, level);
          break;
        case "iden":
          if (cljs.core.truth_(function() {
            var and__3746__auto__ = prev;
            if (cljs.core.truth_(and__3746__auto__)) {
              return cljs.core.re_find.call(null, def_re, prev);
            } else {
              return and__3746__auto__;
            }
          }())) {
            return(new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(reagentdemo.syntax.styles);
          } else {
            return null;
          }
          break;
        default:
          return reagentdemo.syntax.styles.call(null, kind);
      }
    }();
    var remain = cljs.core.rest.call(null, tokens);
    if (!cljs.core.empty_QMARK_.call(null, remain)) {
      var G__5788 = remain;
      var G__5789 = cljs.core._EQ_.call(null, kind, new cljs.core.Keyword(null, "other", "other", 995793544)) ? prev : val;
      var G__5790 = level_SINGLEQUOTE_;
      var G__5791 = cljs.core.conj.call(null, res, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), style, val], null));
      tokens = G__5788;
      prev = G__5789;
      level = G__5790;
      res = G__5791;
      continue;
    } else {
      return cljs.core.apply.call(null, cljs.core.vector, new cljs.core.Keyword(null, "pre", "pre", 2118456869), res);
    }
    break;
  }
};
goog.provide("reagent.interop");
goog.require("cljs.core");
reagent.interop.fvars = {};
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent_component_QMARK_(c) {
  return!(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function cache_react_class(c, constructor) {
  return c["cljsReactClass"] = constructor;
};
reagent.impl.util.memoize_1 = function memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, s, 1));
  }
};
reagent.impl.util.dash_to_camel = function dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__5338 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__5338, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__5338, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
};
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__5340__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__3758__auto___5341 = self__.p;
    if (cljs.core.truth_(or__3758__auto___5341)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__5340 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      a = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__5340__delegate.call(this, self__, a);
  };
  G__5340.cljs$lang$maxFixedArity = 1;
  G__5340.cljs$lang$applyTo = function(arglist__5342) {
    var self__ = cljs.core.first(arglist__5342);
    var a = cljs.core.rest(arglist__5342);
    return G__5340__delegate(self__, a);
  };
  G__5340.cljs$core$IFn$_invoke$arity$variadic = G__5340__delegate;
  return G__5340;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args5339) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5339)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__5343__delegate = function(a) {
    var _ = this;
    var or__3758__auto___5344 = self__.p;
    if (cljs.core.truth_(or__3758__auto___5344)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__5343 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      a = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__5343__delegate.call(this, a);
  };
  G__5343.cljs$lang$maxFixedArity = 0;
  G__5343.cljs$lang$applyTo = function(arglist__5345) {
    var a = cljs.core.seq(arglist__5345);
    return G__5343__delegate(a);
  };
  G__5343.cljs$core$IFn$_invoke$arity$variadic = G__5343__delegate;
  return G__5343;
}();
reagent.impl.util.__GT_partial_ifn = function __GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.clj_ifn_QMARK_ = function clj_ifn_QMARK_(x) {
  var or__3758__auto__ = cljs.core.ifn_QMARK_.call(null, x);
  if (or__3758__auto__) {
    return or__3758__auto__;
  } else {
    var G__5349 = x;
    if (G__5349) {
      var bit__4421__auto__ = G__5349.cljs$lang$protocol_mask$partition1$ & 256;
      if (bit__4421__auto__ || G__5349.cljs$core$IMultiFn$) {
        return true;
      } else {
        if (!G__5349.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMultiFn, G__5349);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMultiFn, G__5349);
    }
  }
};
reagent.impl.util.merge_class = function merge_class(p1, p2) {
  var class$ = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var c1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var c2 = temp__4126__auto____$1;
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(c1) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(c2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function merge_style(p1, p2) {
  var style = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var s1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var s2 = temp__4126__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "p1", "p1", 703771573, null)))));
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util.doc_node_type = 9;
reagent.impl.util.react_id_name = "data-reactid";
reagent.impl.util.get_react_node = function get_react_node(cont) {
  if (cont == null) {
    return null;
  } else {
    if (reagent.impl.util.doc_node_type === cont["nodeType"]) {
      return cont["documentElement"];
    } else {
      return cont["firstChild"];
    }
  }
};
reagent.impl.util.get_root_id = function get_root_id(cont) {
  var G__5351 = reagent.impl.util.get_react_node.call(null, cont);
  var G__5351__$1 = G__5351 == null ? null : G__5351["getAttribute"](reagent.impl.util.react_id_name);
  return G__5351__$1;
};
reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
reagent.impl.util.re_render_component = function re_render_component(comp, container) {
  try {
    return React["renderComponent"](comp.call(null), container);
  } catch (e5354) {
    if (e5354 instanceof Object) {
      var e = e5354;
      try {
        React["unmountComponentAtNode"](container);
      } catch (e5355) {
        if (e5355 instanceof Object) {
          var e_5356__$1 = e5355;
          if (typeof console !== "undefined") {
            console.log(e_5356__$1);
          } else {
          }
        } else {
          throw e5355;
        }
      }
      var temp__4126__auto___5357 = reagent.impl.util.get_react_node.call(null, container);
      if (cljs.core.truth_(temp__4126__auto___5357)) {
        var n_5358 = temp__4126__auto___5357;
        n_5358["removeAttribute"](reagent.impl.util.react_id_name);
        n_5358["innerHTML"] = "";
      } else {
      }
      throw e;
    } else {
      throw e5354;
    }
  }
};
reagent.impl.util.render_component = function render_component(comp, container, callback) {
  return React["renderComponent"](comp.call(null), container, function() {
    var id_5359 = reagent.impl.util.get_root_id.call(null, container);
    if (id_5359 == null) {
    } else {
      cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, id_5359, function(id_5359) {
        return function() {
          return reagent.impl.util.re_render_component.call(null, comp, container);
        };
      }(id_5359));
    }
    if (callback == null) {
      return null;
    } else {
      return callback.call(null);
    }
  });
};
reagent.impl.util.unmount_component_at_node = function unmount_component_at_node(container) {
  var id_5360 = reagent.impl.util.get_root_id.call(null, container);
  if (id_5360 == null) {
  } else {
    cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, id_5360);
  }
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function force_update_all() {
  var _STAR_always_update_STAR_5366_5371 = reagent.impl.util._STAR_always_update_STAR_;
  try {
    reagent.impl.util._STAR_always_update_STAR_ = true;
    var seq__5367_5372 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
    var chunk__5368_5373 = null;
    var count__5369_5374 = 0;
    var i__5370_5375 = 0;
    while (true) {
      if (i__5370_5375 < count__5369_5374) {
        var f_5376 = cljs.core._nth.call(null, chunk__5368_5373, i__5370_5375);
        f_5376.call(null);
        var G__5377 = seq__5367_5372;
        var G__5378 = chunk__5368_5373;
        var G__5379 = count__5369_5374;
        var G__5380 = i__5370_5375 + 1;
        seq__5367_5372 = G__5377;
        chunk__5368_5373 = G__5378;
        count__5369_5374 = G__5379;
        i__5370_5375 = G__5380;
        continue;
      } else {
        var temp__4126__auto___5381 = cljs.core.seq.call(null, seq__5367_5372);
        if (temp__4126__auto___5381) {
          var seq__5367_5382__$1 = temp__4126__auto___5381;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__5367_5382__$1)) {
            var c__4527__auto___5383 = cljs.core.chunk_first.call(null, seq__5367_5382__$1);
            var G__5384 = cljs.core.chunk_rest.call(null, seq__5367_5382__$1);
            var G__5385 = c__4527__auto___5383;
            var G__5386 = cljs.core.count.call(null, c__4527__auto___5383);
            var G__5387 = 0;
            seq__5367_5372 = G__5384;
            chunk__5368_5373 = G__5385;
            count__5369_5374 = G__5386;
            i__5370_5375 = G__5387;
            continue;
          } else {
            var f_5388 = cljs.core.first.call(null, seq__5367_5382__$1);
            f_5388.call(null);
            var G__5389 = cljs.core.next.call(null, seq__5367_5382__$1);
            var G__5390 = null;
            var G__5391 = 0;
            var G__5392 = 0;
            seq__5367_5372 = G__5389;
            chunk__5368_5373 = G__5390;
            count__5369_5374 = G__5391;
            i__5370_5375 = G__5392;
            continue;
          }
        } else {
        }
      }
      break;
    }
  } finally {
    reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_5366_5371;
  }
  return "Updated";
};
reagent.impl.util._not_found = function() {
  var obj5394 = {};
  return obj5394;
}();
reagent.impl.util.identical_ish_QMARK_ = function identical_ish_QMARK_(x, y) {
  return cljs.core.keyword_identical_QMARK_.call(null, x, y) || (x instanceof cljs.core.Symbol || cljs.core.type.call(null, x) === reagent.impl.util.partial_ifn) && cljs.core._EQ_.call(null, x, y);
};
reagent.impl.util.shallow_equal_maps = function shallow_equal_maps(x, y) {
  var or__3758__auto__ = x === y;
  if (or__3758__auto__) {
    return or__3758__auto__;
  } else {
    var and__3746__auto__ = cljs.core.map_QMARK_.call(null, x);
    if (and__3746__auto__) {
      var and__3746__auto____$1 = cljs.core.map_QMARK_.call(null, y);
      if (and__3746__auto____$1) {
        var and__3746__auto____$2 = cljs.core.count.call(null, x) === cljs.core.count.call(null, y);
        if (and__3746__auto____$2) {
          return cljs.core.reduce_kv.call(null, function(and__3746__auto____$2, and__3746__auto____$1, and__3746__auto__, or__3758__auto__) {
            return function(res, k, v) {
              var yv = cljs.core.get.call(null, y, k, reagent.impl.util._not_found);
              if (cljs.core.truth_(function() {
                var or__3758__auto____$1 = v === yv;
                if (or__3758__auto____$1) {
                  return or__3758__auto____$1;
                } else {
                  var or__3758__auto____$2 = reagent.impl.util.identical_ish_QMARK_.call(null, v, yv);
                  if (or__3758__auto____$2) {
                    return or__3758__auto____$2;
                  } else {
                    var and__3746__auto____$3 = cljs.core.keyword_identical_QMARK_.call(null, k, new cljs.core.Keyword(null, "style", "style", -496642736));
                    if (and__3746__auto____$3) {
                      return shallow_equal_maps.call(null, v, yv);
                    } else {
                      return and__3746__auto____$3;
                    }
                  }
                }
              }())) {
                return res;
              } else {
                return cljs.core.reduced.call(null, false);
              }
            };
          }(and__3746__auto____$2, and__3746__auto____$1, and__3746__auto__, or__3758__auto__), true, x);
        } else {
          return and__3746__auto____$2;
        }
      } else {
        return and__3746__auto____$1;
      }
    } else {
      return and__3746__auto__;
    }
  }
};
reagent.impl.util.equal_args = function equal_args(v1, v2) {
  if (cljs.core.vector_QMARK_.call(null, v1)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "v1", "v1", -2141311508, null)))));
  }
  if (cljs.core.vector_QMARK_.call(null, v2)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "v2", "v2", 1875554983, null)))));
  }
  var or__3758__auto__ = v1 === v2;
  if (or__3758__auto__) {
    return or__3758__auto__;
  } else {
    var and__3746__auto__ = cljs.core.count.call(null, v1) === cljs.core.count.call(null, v2);
    if (and__3746__auto__) {
      return cljs.core.reduce_kv.call(null, function(and__3746__auto__, or__3758__auto__) {
        return function(res, k, v) {
          var v_SINGLEQUOTE_ = cljs.core.nth.call(null, v2, k);
          if (cljs.core.truth_(function() {
            var or__3758__auto____$1 = v === v_SINGLEQUOTE_;
            if (or__3758__auto____$1) {
              return or__3758__auto____$1;
            } else {
              var or__3758__auto____$2 = reagent.impl.util.identical_ish_QMARK_.call(null, v, v_SINGLEQUOTE_);
              if (or__3758__auto____$2) {
                return or__3758__auto____$2;
              } else {
                var and__3746__auto____$1 = cljs.core.map_QMARK_.call(null, v);
                if (and__3746__auto____$1) {
                  return reagent.impl.util.shallow_equal_maps.call(null, v, v_SINGLEQUOTE_);
                } else {
                  return and__3746__auto____$1;
                }
              }
            }
          }())) {
            return res;
          } else {
            return cljs.core.reduced.call(null, false);
          }
        };
      }(and__3746__auto__, or__3758__auto__), true, v1);
    } else {
      return and__3746__auto__;
    }
  }
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
reagent.ratom.debug = false;
reagent.ratom._running = cljs.core.atom.call(null, 0);
reagent.ratom.running = function running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_5396 = reagent.ratom._STAR_ratom_context_STAR_;
  try {
    reagent.ratom._STAR_ratom_context_STAR_ = obj;
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_5396;
  }
};
reagent.ratom.captured = function captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.__GT_RAtom = function __GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new reagent.ratom.RAtom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__5400__delegate = function(x, p__5397) {
      var map__5399 = p__5397;
      var map__5399__$1 = cljs.core.seq_QMARK_.call(null, map__5399) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5399) : map__5399;
      var validator = cljs.core.get.call(null, map__5399__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__5399__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new reagent.ratom.RAtom(x, meta, validator, null);
    };
    var G__5400 = function(x, var_args) {
      var p__5397 = null;
      if (arguments.length > 1) {
        p__5397 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__5400__delegate.call(this, x, p__5397);
    };
    G__5400.cljs$lang$maxFixedArity = 1;
    G__5400.cljs$lang$applyTo = function(arglist__5401) {
      var x = cljs.core.first(arglist__5401);
      var p__5397 = cljs.core.rest(arglist__5401);
      return G__5400__delegate(x, p__5397);
    };
    G__5400.cljs$core$IFn$_invoke$arity$variadic = G__5400__delegate;
    return G__5400;
  }();
  atom = function(x, var_args) {
    var p__5397 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
reagent.ratom.RCursor = function(path, ratom) {
  this.path = path;
  this.ratom = ratom;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, self__.ratom, oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, self__.ratom, key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, self__.ratom, key);
};
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cCursor: ");
  cljs.core.pr_writer.call(null, self__.path, writer, opts);
  cljs.core._write.call(null, writer, " ");
  cljs.core.pr_writer.call(null, self__.ratom, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._meta.call(null, self__.ratom);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.update_in, self__.path, f);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.update_in, self__.path, f, x);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.update_in, self__.path, f, x, y);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.update_in, self__.path, f, x, y, more);
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, new_value);
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.__GT_RCursor = function __GT_RCursor(path, ratom) {
  return new reagent.ratom.RCursor(path, ratom);
};
reagent.ratom.cursor = function cursor(path, ra) {
  return new reagent.ratom.RCursor(path, ra);
};
reagent.ratom.IDisposable = function() {
  var obj5403 = {};
  return obj5403;
}();
reagent.ratom.dispose_BANG_ = function dispose_BANG_(this$) {
  if (function() {
    var and__3746__auto__ = this$;
    if (and__3746__auto__) {
      return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__4394__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3758__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = reagent.ratom.dispose_BANG_["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IRunnable = function() {
  var obj5405 = {};
  return obj5405;
}();
reagent.ratom.run = function run(this$) {
  if (function() {
    var and__3746__auto__ = this$;
    if (and__3746__auto__) {
      return this$.reagent$ratom$IRunnable$run$arity$1;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__4394__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3758__auto__ = reagent.ratom.run[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = reagent.ratom.run["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IComputedImpl = function() {
  var obj5407 = {};
  return obj5407;
}();
reagent.ratom._update_watching = function _update_watching(this$, derefed) {
  if (function() {
    var and__3746__auto__ = this$;
    if (and__3746__auto__) {
      return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__4394__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3758__auto__ = reagent.ratom._update_watching[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = reagent.ratom._update_watching["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
        }
      }
    }().call(null, this$, derefed);
  }
};
reagent.ratom._handle_change = function _handle_change(k, sender, oldval, newval) {
  if (function() {
    var and__3746__auto__ = k;
    if (and__3746__auto__) {
      return k.reagent$ratom$IComputedImpl$_handle_change$arity$4;
    } else {
      return and__3746__auto__;
    }
  }()) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__4394__auto__ = k == null ? null : k;
    return function() {
      var or__3758__auto__ = reagent.ratom._handle_change[goog.typeOf(x__4394__auto__)];
      if (or__3758__auto__) {
        return or__3758__auto__;
      } else {
        var or__3758__auto____$1 = reagent.ratom._handle_change["_"];
        if (or__3758__auto____$1) {
          return or__3758__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
        }
      }
    }().call(null, k, sender, oldval, newval);
  }
};
reagent.ratom.call_watches = function call_watches(obs, watches, oldval, newval) {
  return cljs.core.reduce_kv.call(null, function(_, key, f) {
    f.call(null, key, obs, oldval, newval);
    return null;
  }, null, watches);
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3746__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__3746__auto__)) {
      return cljs.core.not.call(null, self__.dirty_QMARK_) && !(oldval === newval);
    } else {
      return and__3746__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__3758__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__3758__auto__)) {
        return or__3758__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__5408_5420 = cljs.core.seq.call(null, derefed);
  var chunk__5409_5421 = null;
  var count__5410_5422 = 0;
  var i__5411_5423 = 0;
  while (true) {
    if (i__5411_5423 < count__5410_5422) {
      var w_5424 = cljs.core._nth.call(null, chunk__5409_5421, i__5411_5423);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_5424)) {
      } else {
        cljs.core.add_watch.call(null, w_5424, this$__$1, reagent.ratom._handle_change);
      }
      var G__5425 = seq__5408_5420;
      var G__5426 = chunk__5409_5421;
      var G__5427 = count__5410_5422;
      var G__5428 = i__5411_5423 + 1;
      seq__5408_5420 = G__5425;
      chunk__5409_5421 = G__5426;
      count__5410_5422 = G__5427;
      i__5411_5423 = G__5428;
      continue;
    } else {
      var temp__4126__auto___5429 = cljs.core.seq.call(null, seq__5408_5420);
      if (temp__4126__auto___5429) {
        var seq__5408_5430__$1 = temp__4126__auto___5429;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__5408_5430__$1)) {
          var c__4527__auto___5431 = cljs.core.chunk_first.call(null, seq__5408_5430__$1);
          var G__5432 = cljs.core.chunk_rest.call(null, seq__5408_5430__$1);
          var G__5433 = c__4527__auto___5431;
          var G__5434 = cljs.core.count.call(null, c__4527__auto___5431);
          var G__5435 = 0;
          seq__5408_5420 = G__5432;
          chunk__5409_5421 = G__5433;
          count__5410_5422 = G__5434;
          i__5411_5423 = G__5435;
          continue;
        } else {
          var w_5436 = cljs.core.first.call(null, seq__5408_5430__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_5436)) {
          } else {
            cljs.core.add_watch.call(null, w_5436, this$__$1, reagent.ratom._handle_change);
          }
          var G__5437 = cljs.core.next.call(null, seq__5408_5430__$1);
          var G__5438 = null;
          var G__5439 = 0;
          var G__5440 = 0;
          seq__5408_5420 = G__5437;
          chunk__5409_5421 = G__5438;
          count__5410_5422 = G__5439;
          i__5411_5423 = G__5440;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__5412_5441 = cljs.core.seq.call(null, self__.watching);
  var chunk__5413_5442 = null;
  var count__5414_5443 = 0;
  var i__5415_5444 = 0;
  while (true) {
    if (i__5415_5444 < count__5414_5443) {
      var w_5445 = cljs.core._nth.call(null, chunk__5413_5442, i__5415_5444);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_5445)) {
      } else {
        cljs.core.remove_watch.call(null, w_5445, this$__$1);
      }
      var G__5446 = seq__5412_5441;
      var G__5447 = chunk__5413_5442;
      var G__5448 = count__5414_5443;
      var G__5449 = i__5415_5444 + 1;
      seq__5412_5441 = G__5446;
      chunk__5413_5442 = G__5447;
      count__5414_5443 = G__5448;
      i__5415_5444 = G__5449;
      continue;
    } else {
      var temp__4126__auto___5450 = cljs.core.seq.call(null, seq__5412_5441);
      if (temp__4126__auto___5450) {
        var seq__5412_5451__$1 = temp__4126__auto___5450;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__5412_5451__$1)) {
          var c__4527__auto___5452 = cljs.core.chunk_first.call(null, seq__5412_5451__$1);
          var G__5453 = cljs.core.chunk_rest.call(null, seq__5412_5451__$1);
          var G__5454 = c__4527__auto___5452;
          var G__5455 = cljs.core.count.call(null, c__4527__auto___5452);
          var G__5456 = 0;
          seq__5412_5441 = G__5453;
          chunk__5413_5442 = G__5454;
          count__5414_5443 = G__5455;
          i__5415_5444 = G__5456;
          continue;
        } else {
          var w_5457 = cljs.core.first.call(null, seq__5412_5451__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_5457)) {
          } else {
            cljs.core.remove_watch.call(null, w_5457, this$__$1);
          }
          var G__5458 = cljs.core.next.call(null, seq__5412_5451__$1);
          var G__5459 = null;
          var G__5460 = 0;
          var G__5461 = 0;
          seq__5412_5441 = G__5458;
          chunk__5413_5442 = G__5459;
          count__5414_5443 = G__5460;
          i__5415_5444 = G__5461;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cReaction " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.hash.call(null, this$__$1)) + ": ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__5416_5462 = cljs.core.seq.call(null, self__.watching);
  var chunk__5417_5463 = null;
  var count__5418_5464 = 0;
  var i__5419_5465 = 0;
  while (true) {
    if (i__5419_5465 < count__5418_5464) {
      var w_5466 = cljs.core._nth.call(null, chunk__5417_5463, i__5419_5465);
      cljs.core.remove_watch.call(null, w_5466, this$__$1);
      var G__5467 = seq__5416_5462;
      var G__5468 = chunk__5417_5463;
      var G__5469 = count__5418_5464;
      var G__5470 = i__5419_5465 + 1;
      seq__5416_5462 = G__5467;
      chunk__5417_5463 = G__5468;
      count__5418_5464 = G__5469;
      i__5419_5465 = G__5470;
      continue;
    } else {
      var temp__4126__auto___5471 = cljs.core.seq.call(null, seq__5416_5462);
      if (temp__4126__auto___5471) {
        var seq__5416_5472__$1 = temp__4126__auto___5471;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__5416_5472__$1)) {
          var c__4527__auto___5473 = cljs.core.chunk_first.call(null, seq__5416_5472__$1);
          var G__5474 = cljs.core.chunk_rest.call(null, seq__5416_5472__$1);
          var G__5475 = c__4527__auto___5473;
          var G__5476 = cljs.core.count.call(null, c__4527__auto___5473);
          var G__5477 = 0;
          seq__5416_5462 = G__5474;
          chunk__5417_5463 = G__5475;
          count__5418_5464 = G__5476;
          i__5419_5465 = G__5477;
          continue;
        } else {
          var w_5478 = cljs.core.first.call(null, seq__5416_5472__$1);
          cljs.core.remove_watch.call(null, w_5478, this$__$1);
          var G__5479 = cljs.core.next.call(null, seq__5416_5472__$1);
          var G__5480 = null;
          var G__5481 = 0;
          var G__5482 = 0;
          seq__5416_5462 = G__5479;
          chunk__5417_5463 = G__5480;
          count__5418_5464 = G__5481;
          i__5419_5465 = G__5482;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = cljs.core.PersistentHashSet.EMPTY;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  var old_value = self__.state;
  self__.state = new_value;
  cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  return new_value;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state, x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state, x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, self__.state, x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  reagent.ratom.call_watches.call(null, this$__$1, self__.watches, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(self__.on_set)) {
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  return reagent.ratom.call_watches.call(null, this$__$1, self__.watches, oldval, newval);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, function() {
    var or__3758__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      return reagent.ratom._STAR_ratom_context_STAR_;
    }
  }())) {
    var x__3484__auto___5483 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.auto_run, reagent.ratom._STAR_ratom_context_STAR_], null);
    if (typeof console !== "undefined") {
      console.log("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1("dbg reagent.ratom:" + 231 + ": [auto-run *ratom-context*]: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, x__3484__auto___5483))));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(function() {
    var or__3758__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      return reagent.ratom._STAR_ratom_context_STAR_;
    }
  }())) {
  } else {
    throw new Error("Assert failed: Reaction derefed outside auto-running context\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), new cljs.core.Symbol(null, "auto-run", "auto-run", -696035332, null), new cljs.core.Symbol(null, "*ratom-context*", "*ratom-context*", -1557728360, null)))));
  }
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  if (cljs.core.truth_(self__.dirty_QMARK_)) {
    return reagent.ratom.run.call(null, this$__$1);
  } else {
    return self__.state;
  }
};
reagent.ratom.__GT_Reaction = function __GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function() {
  var make_reaction__delegate = function(f, p__5484) {
    var map__5486 = p__5484;
    var map__5486__$1 = cljs.core.seq_QMARK_.call(null, map__5486) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5486) : map__5486;
    var derefed = cljs.core.get.call(null, map__5486__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
    var on_dispose = cljs.core.get.call(null, map__5486__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
    var on_set = cljs.core.get.call(null, map__5486__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
    var auto_run = cljs.core.get.call(null, map__5486__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
    var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
    var active = !(derefed == null);
    var dirty = !active;
    var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, cljs.core.PersistentArrayMap.EMPTY, runner, on_set, on_dispose);
    if (derefed == null) {
    } else {
      if (cljs.core.truth_(reagent.ratom.debug)) {
        cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
      } else {
      }
      reagent.ratom._update_watching.call(null, reaction, derefed);
    }
    return reaction;
  };
  var make_reaction = function(f, var_args) {
    var p__5484 = null;
    if (arguments.length > 1) {
      p__5484 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return make_reaction__delegate.call(this, f, p__5484);
  };
  make_reaction.cljs$lang$maxFixedArity = 1;
  make_reaction.cljs$lang$applyTo = function(arglist__5487) {
    var f = cljs.core.first(arglist__5487);
    var p__5484 = cljs.core.rest(arglist__5487);
    return make_reaction__delegate(f, p__5484);
  };
  make_reaction.cljs$core$IFn$_invoke$arity$variadic = make_reaction__delegate;
  return make_reaction;
}();
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.batching.fake_raf = function fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__3758__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__3758__auto__)) {
    return or__3758__auto__;
  } else {
    var or__3758__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__3758__auto____$1)) {
      return or__3758__auto____$1;
    } else {
      var or__3758__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__3758__auto____$2)) {
        return or__3758__auto____$2;
      } else {
        var or__3758__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__3758__auto____$3)) {
          return or__3758__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_levels = function compare_levels(c1, c2) {
  return c1["props"]["level"] - c2["props"]["level"];
};
reagent.impl.batching.run_queue = function run_queue(a) {
  a.sort(reagent.impl.batching.compare_levels);
  var n__4627__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4627__auto__) {
      var c_5289 = a[i];
      if (cljs.core.truth_(c_5289["cljsIsDirty"])) {
        c_5289["forceUpdate"]();
      } else {
      }
      var G__5290 = i + 1;
      i = G__5290;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__4334__auto__, writer__4335__auto__, opt__4336__auto__) {
  return cljs.core._write.call(null, writer__4335__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  self__.queue = [];
  self__.scheduled_QMARK_ = false;
  return reagent.impl.batching.run_queue.call(null, q);
};
reagent.impl.batching.__GT_RenderQueue = function __GT_RenderQueue(queue, scheduled_QMARK_) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false);
reagent.impl.batching.flush = function flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.is_reagent_component = function is_reagent_component(c) {
  var G__5292 = c;
  var G__5292__$1 = G__5292 == null ? null : G__5292["props"];
  var G__5292__$2 = G__5292__$1 == null ? null : G__5292__$1["argv"];
  return G__5292__$2;
};
reagent.impl.batching.run_reactively = function run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "is-reagent-component", "is-reagent-component", -1856228005, null), new cljs.core.Symbol(null, "c", "c", -122660552, null)))));
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function dispose(c) {
  var G__5294_5295 = c["cljsRatom"];
  var G__5294_5296__$1 = G__5294_5295 == null ? null : reagent.ratom.dispose_BANG_.call(null, G__5294_5295);
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.util");
goog.require("reagent.impl.util");
reagent.impl.component.state_atom = function state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.state = function state(this$) {
  return cljs.core.deref.call(null, reagent.impl.component.state_atom.call(null, this$));
};
reagent.impl.component.replace_state = function replace_state(this$, new_state) {
  return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, this$), new_state);
};
reagent.impl.component.set_state = function set_state(this$, new_state) {
  return cljs.core.swap_BANG_.call(null, reagent.impl.component.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.impl.component.do_render = function do_render(c) {
  var _STAR_current_component_STAR_5299 = reagent.impl.component._STAR_current_component_STAR_;
  try {
    reagent.impl.component._STAR_current_component_STAR_ = c;
    var f = c["cljsRender"];
    var _ = reagent.impl.util.clj_ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "clj-ifn?", "util/clj-ifn?", 259370460, null), new cljs.core.Symbol(null, "f", "f", 43394975, null)))));
    }();
    var p = c["props"];
    var res = c["componentFunction"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__5300 = n;
      switch(G__5300) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return c["asComponent"](res, p["level"]);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        c["cljsRender"] = res;
        return do_render.call(null, c);
      } else {
        return res;
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_5299;
  }
};
reagent.impl.component.custom_wrapper = function custom_wrapper(key, f) {
  var G__5303 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__5303) {
    case "componentWillUnmount":
      return function(G__5303) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__5303);
      break;
    case "componentDidUpdate":
      return function(G__5303) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__5303);
      break;
    case "componentWillUpdate":
      return function(G__5303) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__5303);
      break;
    case "shouldComponentUpdate":
      return function(G__5303) {
        return function(nextprops, nextstate) {
          var or__3758__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__3758__auto__)) {
            return or__3758__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return cljs.core.not.call(null, reagent.impl.util.equal_args.call(null, old_argv, new_argv));
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__5303);
      break;
    case "componentWillReceiveProps":
      return function(G__5303) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__5303);
      break;
    case "getInitialState":
      return function(G__5303) {
        return function() {
          var c = this;
          return reagent.impl.component.set_state.call(null, c, f.call(null, c));
        };
      }(G__5303);
      break;
    case "getDefaultProps":
      throw new Error("Assert failed: getDefaultProps not supported yet\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, false)));break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__5305__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__5305 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__5305__delegate.call(this, args);
      };
      G__5305.cljs$lang$maxFixedArity = 0;
      G__5305.cljs$lang$applyTo = function(arglist__5306) {
        var args = cljs.core.seq(arglist__5306);
        return G__5305__delegate(args);
      };
      G__5305.cljs$core$IFn$_invoke$arity$variadic = G__5305__delegate;
      return G__5305;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104), null], null), null);
reagent.impl.component.dont_bind = function dont_bind(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    var G__5308 = f;
    G__5308["__reactDontBind"] = true;
    return G__5308;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__3746__auto__ = wrap;
      if (cljs.core.truth_(and__3746__auto__)) {
        return f;
      } else {
        return and__3746__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Expected function in " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(key) + " but got " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(f)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null)))));
      }
    } else {
    }
    var or__3758__auto__ = wrap;
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function add_render(fun_map, render_f) {
  return cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), cljs.core.truth_(reagent.impl.util.is_client) ? function() {
    var c = this;
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } : function() {
    var c = this;
    return reagent.impl.component.do_render.call(null, c);
  });
};
reagent.impl.component.wrap_funs = function wrap_funs(fun_map) {
  var render_fun = function() {
    var or__3758__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      return(new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = reagent.impl.util.clj_ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Render must be a function, not " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, render_fun))) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "clj-ifn?", "util/clj-ifn?", 259370460, null), new cljs.core.Symbol(null, "render-fun", "render-fun", -1209513086, null)))));
  }();
  var name = function() {
    var or__3758__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      var or__3758__auto____$1 = render_fun["displayName"];
      if (cljs.core.truth_(or__3758__auto____$1)) {
        return or__3758__auto____$1;
      } else {
        return render_fun["name"];
      }
    }
  }();
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.gensym.call(null, "reagent")) : name;
  var fmap = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun);
  return cljs.core.reduce_kv.call(null, function(render_fun, _, name, name_SINGLEQUOTE_, fmap) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(render_fun, _, name, name_SINGLEQUOTE_, fmap), cljs.core.PersistentArrayMap.EMPTY, fmap);
};
reagent.impl.component.map_to_js = function map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__5310 = o;
    G__5310[cljs.core.name.call(null, k)] = v;
    return G__5310;
  }, {}, m);
};
reagent.impl.component.cljsify = function cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function create_class(body, as_component) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "body", "body", -408674142, null)))));
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var _ = spec["asComponent"] = reagent.impl.component.dont_bind.call(null, as_component);
  var res = React["createClass"](spec);
  var f = function(spec, _, res) {
    return function() {
      var G__5311__delegate = function(args) {
        return as_component.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__5311 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__5311__delegate.call(this, args);
      };
      G__5311.cljs$lang$maxFixedArity = 0;
      G__5311.cljs$lang$applyTo = function(arglist__5312) {
        var args = cljs.core.seq(arglist__5312);
        return G__5311__delegate(args);
      };
      G__5311.cljs$core$IFn$_invoke$arity$variadic = G__5311__delegate;
      return G__5311;
    }();
  }(spec, _, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.component");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("clojure.string");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
goog.require("clojure.string");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.attr_aliases = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class", "class", -2030961996), "className", new cljs.core.Keyword(null, "for", "for", -1323786319), "htmlFor", new cljs.core.Keyword(null, "charset", "charset", -1063822193), "charSet"], null);
reagent.impl.template.hiccup_tag_QMARK_ = function hiccup_tag_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol || typeof x === "string";
};
reagent.impl.template.valid_tag_QMARK_ = function valid_tag_QMARK_(x) {
  return reagent.impl.template.hiccup_tag_QMARK_.call(null, x) || reagent.impl.util.clj_ifn_QMARK_.call(null, x);
};
reagent.impl.template.to_js_val = function to_js_val(v) {
  if (typeof v === "string") {
    return v;
  } else {
    if (typeof v === "number") {
      return v;
    } else {
      if (v instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, v);
      } else {
        if (v instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v);
        } else {
          if (cljs.core.coll_QMARK_.call(null, v)) {
            return cljs.core.clj__GT_js.call(null, v);
          } else {
            if (cljs.core.ifn_QMARK_.call(null, v)) {
              return function() {
                var G__5313__delegate = function(args) {
                  return cljs.core.apply.call(null, v, args);
                };
                var G__5313 = function(var_args) {
                  var args = null;
                  if (arguments.length > 0) {
                    args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
                  }
                  return G__5313__delegate.call(this, args);
                };
                G__5313.cljs$lang$maxFixedArity = 0;
                G__5313.cljs$lang$applyTo = function(arglist__5314) {
                  var args = cljs.core.seq(arglist__5314);
                  return G__5313__delegate(args);
                };
                G__5313.cljs$core$IFn$_invoke$arity$variadic = G__5313__delegate;
                return G__5313;
              }();
            } else {
              return v;
            }
          }
        }
      }
    }
  }
};
reagent.impl.template.undash_prop_name = function undash_prop_name(n) {
  var or__3758__auto__ = reagent.impl.template.attr_aliases.call(null, n);
  if (cljs.core.truth_(or__3758__auto__)) {
    return or__3758__auto__;
  } else {
    return reagent.impl.util.dash_to_camel.call(null, n);
  }
};
reagent.impl.template.cached_prop_name = reagent.impl.util.memoize_1.call(null, reagent.impl.template.undash_prop_name);
reagent.impl.template.cached_style_name = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.template.convert_prop_value = function convert_prop_value(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (typeof x === "number") {
      return x;
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__5316 = o;
          G__5316[reagent.impl.template.cached_prop_name.call(null, k)] = reagent.impl.template.to_js_val.call(null, v);
          return G__5316;
        }, {}, x);
      } else {
        return reagent.impl.template.to_js_val.call(null, x);
      }
    }
  }
};
reagent.impl.template.set_id_class = function set_id_class(props, p__5317) {
  var vec__5319 = p__5317;
  var id = cljs.core.nth.call(null, vec__5319, 0, null);
  var class$ = cljs.core.nth.call(null, vec__5319, 1, null);
  var pid = props["id"];
  props["id"] = !(pid == null) ? pid : id;
  if (class$ == null) {
    return null;
  } else {
    var old = props["className"];
    return props["className"] = !(old == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class$) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(old) : class$;
  }
};
reagent.impl.template.convert_props = function convert_props(props, id_class) {
  if (cljs.core.empty_QMARK_.call(null, props) && id_class == null) {
    return null;
  } else {
    if (cljs.core.type.call(null, props) === Object) {
      return props;
    } else {
      var objprops = cljs.core.reduce_kv.call(null, function(o, k, v) {
        var pname_5320 = reagent.impl.template.cached_prop_name.call(null, k);
        if (!(pname_5320 === "key")) {
          o[pname_5320] = reagent.impl.template.convert_prop_value.call(null, v);
        } else {
        }
        return o;
      }, {}, props);
      if (id_class == null) {
      } else {
        reagent.impl.template.set_id_class.call(null, objprops, id_class);
      }
      return objprops;
    }
  }
};
reagent.impl.template.input_handle_change = function input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  reagent.impl.batching.queue_render.call(null, this$);
  return res;
};
reagent.impl.template.input_did_update = function input_did_update(this$) {
  var value = this$["cljsInputValue"];
  if (value == null) {
    return null;
  } else {
    var node = this$["getDOMNode"]();
    if (cljs.core.not_EQ_.call(null, value, node["value"])) {
      return node["value"] = value;
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_render_setup = function input_render_setup(this$, jsprops) {
  var on_change = jsprops["onChange"];
  var value = on_change == null ? null : jsprops["value"];
  this$["cljsInputValue"] = value;
  if (value == null) {
    return null;
  } else {
    reagent.impl.batching.mark_rendered.call(null, this$);
    var G__5323 = jsprops;
    G__5323["defaultValue"] = value;
    G__5323["value"] = null;
    G__5323["onChange"] = function(G__5323, on_change, value) {
      return function(p1__5321_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__5321_SHARP_);
      };
    }(G__5323, on_change, value);
    return G__5323;
  }
};
reagent.impl.template.input_component_QMARK_ = function input_component_QMARK_(x) {
  var DOM = React["DOM"];
  return x === DOM["input"] || x === DOM["textarea"];
};
reagent.impl.template.wrapped_render = function wrapped_render(this$, comp, id_class, input_setup) {
  var inprops = this$["props"];
  var argv = inprops["argv"];
  var props = cljs.core.nth.call(null, argv, 1, null);
  var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
  var jsargs = reagent.impl.template.convert_args.call(null, argv, hasprops ? 2 : 1, inprops["level"] + 1);
  var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, id_class);
  if (input_setup == null) {
  } else {
    input_setup.call(null, this$, jsprops);
  }
  jsargs[0] = jsprops;
  return comp.apply(null, jsargs);
};
reagent.impl.template.wrapped_should_update = function wrapped_should_update(c, nextprops, nextstate) {
  var or__3758__auto__ = reagent.impl.util._STAR_always_update_STAR_;
  if (cljs.core.truth_(or__3758__auto__)) {
    return or__3758__auto__;
  } else {
    var a1 = c["props"]["argv"];
    var a2 = nextprops["argv"];
    return cljs.core.not.call(null, reagent.impl.util.equal_args.call(null, a1, a2));
  }
};
reagent.impl.template.add_input_methods = function add_input_methods(spec) {
  var G__5325 = spec;
  G__5325["componentDidUpdate"] = function(G__5325) {
    return function() {
      var c = this;
      return reagent.impl.template.input_did_update.call(null, c);
    };
  }(G__5325);
  G__5325["componentWillUnmount"] = function(G__5325) {
    return function() {
      var c = this;
      return reagent.impl.batching.dispose.call(null, c);
    };
  }(G__5325);
  return G__5325;
};
reagent.impl.template.wrap_component = function wrap_component(comp, extras, name) {
  var input_QMARK_ = reagent.impl.template.input_component_QMARK_.call(null, comp);
  var input_setup = input_QMARK_ ? reagent.impl.template.input_render_setup : null;
  var spec = {"displayName":function() {
    var or__3758__auto__ = name;
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      return "ComponentWrapper";
    }
  }(), "shouldComponentUpdate":function(input_QMARK_, input_setup) {
    return function(p1__5326_SHARP_, p2__5327_SHARP_) {
      var C = this;
      return reagent.impl.template.wrapped_should_update.call(null, C, p1__5326_SHARP_, p2__5327_SHARP_);
    };
  }(input_QMARK_, input_setup), "render":function(input_QMARK_, input_setup) {
    return function() {
      var C = this;
      return reagent.impl.template.wrapped_render.call(null, C, comp, extras, input_setup);
    };
  }(input_QMARK_, input_setup)};
  if (input_QMARK_) {
    reagent.impl.template.add_input_methods.call(null, spec);
  } else {
  }
  return React["createClass"](spec);
};
reagent.impl.template.parse_tag = function parse_tag(hiccup_tag) {
  var vec__5329 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__5329, 0, null);
  var id = cljs.core.nth.call(null, vec__5329, 1, null);
  var class$ = cljs.core.nth.call(null, vec__5329, 2, null);
  var comp = React["DOM"][tag];
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(comp)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unknown tag: '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccup_tag) + "'") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "comp", "comp", -1462482139, null))));
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, cljs.core.truth_(function() {
    var or__3758__auto__ = id;
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      return class_SINGLEQUOTE_;
    }
  }()) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, class_SINGLEQUOTE_], null) : null], null);
};
reagent.impl.template.get_wrapper = function get_wrapper(tag) {
  var vec__5331 = reagent.impl.template.parse_tag.call(null, tag);
  var comp = cljs.core.nth.call(null, vec__5331, 0, null);
  var id_class = cljs.core.nth.call(null, vec__5331, 1, null);
  return reagent.impl.template.wrap_component.call(null, comp, id_class, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
};
reagent.impl.template.cached_wrapper = reagent.impl.util.memoize_1.call(null, reagent.impl.template.get_wrapper);
reagent.impl.template.fn_to_class = function fn_to_class(f) {
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "component-function", "component-function", 654728922), f);
  var res = reagent.impl.template.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function as_class(tag) {
  if (reagent.impl.template.hiccup_tag_QMARK_.call(null, tag)) {
    return reagent.impl.template.cached_wrapper.call(null, tag);
  } else {
    var cached_class = reagent.impl.util.cached_react_class.call(null, tag);
    if (!(cached_class == null)) {
      return cached_class;
    } else {
      if (cljs.core.truth_(React["isValidClass"](tag))) {
        return reagent.impl.util.cache_react_class.call(null, tag, reagent.impl.template.wrap_component.call(null, tag, null, null));
      } else {
        return reagent.impl.template.fn_to_class.call(null, tag);
      }
    }
  }
};
reagent.impl.template.get_key = function get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
  } else {
    return null;
  }
};
reagent.impl.template.vec_to_comp = function vec_to_comp(v, level) {
  if (cljs.core.count.call(null, v) > 0) {
  } else {
    throw new Error("Assert failed: Hiccup form should not be empty\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null))))));
  }
  if (reagent.impl.template.valid_tag_QMARK_.call(null, cljs.core.nth.call(null, v, 0))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid Hiccup form: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, v))) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-tag?", "valid-tag?", 1243064160, null), cljs.core.list(new cljs.core.Symbol(null, "nth", "nth", 1529209554, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), 0)))));
  }
  var c = reagent.impl.template.as_class.call(null, cljs.core.nth.call(null, v, 0));
  var jsprops = {"level":level, "argv":v};
  var k_5332 = reagent.impl.template.get_key.call(null, cljs.core.meta.call(null, v));
  var k_SINGLEQUOTE__5333 = k_5332 == null ? reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null)) : k_5332;
  if (k_SINGLEQUOTE__5333 == null) {
  } else {
    jsprops["key"] = k_SINGLEQUOTE__5333;
  }
  return c.call(null, jsprops);
};
reagent.impl.template.seq_ctx = {};
reagent.impl.template.warn_on_deref = function warn_on_deref(x) {
  if (cljs.core.truth_(reagent.impl.template.seq_ctx["warned"])) {
    return null;
  } else {
    if (typeof console !== "undefined") {
      console.log("Warning: Reactive deref not supported in seq in ", cljs.core.pr_str.call(null, x));
    } else {
    }
    return reagent.impl.template.seq_ctx["warned"] = true;
  }
};
reagent.impl.template.as_component = function() {
  var as_component = null;
  var as_component__1 = function(x) {
    return as_component.call(null, x, 0);
  };
  var as_component__2 = function(x, level) {
    if (typeof x === "string") {
      return x;
    } else {
      if (cljs.core.vector_QMARK_.call(null, x)) {
        return reagent.impl.template.vec_to_comp.call(null, x, level);
      } else {
        if (cljs.core.seq_QMARK_.call(null, x)) {
          if (!(true && reagent.ratom._STAR_ratom_context_STAR_ == null)) {
            return reagent.impl.template.expand_seq.call(null, x, level);
          } else {
            var s = reagent.ratom.capture_derefed.call(null, function() {
              return reagent.impl.template.expand_seq.call(null, x, level);
            }, reagent.impl.template.seq_ctx);
            if (cljs.core.truth_(reagent.ratom.captured.call(null, reagent.impl.template.seq_ctx))) {
              reagent.impl.template.warn_on_deref.call(null, x);
            } else {
            }
            return s;
          }
        } else {
          return x;
        }
      }
    }
  };
  as_component = function(x, level) {
    switch(arguments.length) {
      case 1:
        return as_component__1.call(this, x);
      case 2:
        return as_component__2.call(this, x, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  as_component.cljs$core$IFn$_invoke$arity$1 = as_component__1;
  as_component.cljs$core$IFn$_invoke$arity$2 = as_component__2;
  return as_component;
}();
reagent.impl.template.create_class = function create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec, reagent.impl.template.as_component);
};
reagent.impl.template.expand_seq = function expand_seq(s, level) {
  var a = cljs.core.into_array.call(null, s);
  var level_SINGLEQUOTE_ = level + 1;
  var n__4627__auto___5334 = a.length;
  var i_5335 = 0;
  while (true) {
    if (i_5335 < n__4627__auto___5334) {
      a[i_5335] = reagent.impl.template.as_component.call(null, a[i_5335], level_SINGLEQUOTE_);
      var G__5336 = i_5335 + 1;
      i_5335 = G__5336;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.convert_args = function convert_args(argv, first_child, level) {
  if (cljs.core.count.call(null, argv) === first_child + 1) {
    return[null, reagent.impl.template.as_component.call(null, cljs.core.nth.call(null, argv, first_child), level)];
  } else {
    return cljs.core.reduce_kv.call(null, function(a, k, v) {
      if (k >= first_child) {
        a.push(reagent.impl.template.as_component.call(null, v, level));
      } else {
      }
      return a;
    }, [null], argv);
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.component");
goog.require("reagent.impl.util");
goog.require("reagent.impl.template");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.as_component = function as_component(form) {
  return reagent.impl.template.as_component.call(null, form);
};
reagent.core.render_component = function() {
  var render_component = null;
  var render_component__2 = function(comp, container) {
    return render_component.call(null, comp, container, null);
  };
  var render_component__3 = function(comp, container, callback) {
    var f = function() {
      return reagent.core.as_component.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
    };
    return reagent.impl.util.render_component.call(null, f, container, callback);
  };
  render_component = function(comp, container, callback) {
    switch(arguments.length) {
      case 2:
        return render_component__2.call(this, comp, container);
      case 3:
        return render_component__3.call(this, comp, container, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  render_component.cljs$core$IFn$_invoke$arity$2 = render_component__2;
  render_component.cljs$core$IFn$_invoke$arity$3 = render_component__3;
  return render_component;
}();
reagent.core.unmount_component_at_node = function unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_component_to_string = function render_component_to_string(component) {
  return React["renderComponentToString"](reagent.core.as_component.call(null, component));
};
reagent.core.force_update_all = function force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function create_class(spec) {
  return reagent.impl.template.create_class.call(null, spec);
};
reagent.core.current_component = function current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state = function state(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.component.state.call(null, this$);
};
reagent.core.replace_state = function replace_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null))))));
  }
  return reagent.impl.component.replace_state.call(null, this$, new_state);
};
reagent.core.set_state = function set_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null))))));
  }
  return reagent.impl.component.set_state.call(null, this$, new_state);
};
reagent.core.props = function props(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function children(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function argv(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return reagent.ratom.atom.call(null, x);
  };
  var atom__2 = function() {
    var G__5286__delegate = function(x, rest) {
      return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
    };
    var G__5286 = function(x, var_args) {
      var rest = null;
      if (arguments.length > 1) {
        rest = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__5286__delegate.call(this, x, rest);
    };
    G__5286.cljs$lang$maxFixedArity = 1;
    G__5286.cljs$lang$applyTo = function(arglist__5287) {
      var x = cljs.core.first(arglist__5287);
      var rest = cljs.core.rest(arglist__5287);
      return G__5286__delegate(x, rest);
    };
    G__5286.cljs$core$IFn$_invoke$arity$variadic = G__5286__delegate;
    return G__5286;
  }();
  atom = function(x, var_args) {
    var rest = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
reagent.core.cursor = function() {
  var cursor = null;
  var cursor__1 = function(path) {
    return function(ra) {
      return cursor.call(null, path, ra);
    };
  };
  var cursor__2 = function(path, ra) {
    return reagent.ratom.cursor.call(null, path, ra);
  };
  cursor = function(path, ra) {
    switch(arguments.length) {
      case 1:
        return cursor__1.call(this, path);
      case 2:
        return cursor__2.call(this, path, ra);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cursor.cljs$core$IFn$_invoke$arity$1 = cursor__1;
  cursor.cljs$core$IFn$_invoke$arity$2 = cursor__2;
  return cursor;
}();
reagent.core.next_tick = function next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function() {
  var partial__delegate = function(f, args) {
    return new reagent.impl.util.partial_ifn(f, args, null);
  };
  var partial = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return partial__delegate.call(this, f, args);
  };
  partial.cljs$lang$maxFixedArity = 1;
  partial.cljs$lang$applyTo = function(arglist__5288) {
    var f = cljs.core.first(arglist__5288);
    var args = cljs.core.rest(arglist__5288);
    return partial__delegate(f, args);
  };
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__delegate;
  return partial;
}();
goog.provide("goog.history.EventType");
goog.history.EventType = {NAVIGATE:"navigate"};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.history.Event");
goog.require("goog.events.Event");
goog.require("goog.history.EventType");
goog.history.Event = function(token, isNavigation) {
  goog.events.Event.call(this, goog.history.EventType.NAVIGATE);
  this.token = token;
  this.isNavigation = isNavigation;
};
goog.inherits(goog.history.Event, goog.events.Event);
goog.provide("goog.labs.userAgent.device");
goog.require("goog.labs.userAgent.util");
goog.labs.userAgent.device.isMobile = function() {
  return!goog.labs.userAgent.device.isTablet() && (goog.labs.userAgent.util.matchUserAgent("iPod") || goog.labs.userAgent.util.matchUserAgent("iPhone") || goog.labs.userAgent.util.matchUserAgent("Android") || goog.labs.userAgent.util.matchUserAgent("IEMobile"));
};
goog.labs.userAgent.device.isTablet = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Mobile") || goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.device.isDesktop = function() {
  return!goog.labs.userAgent.device.isMobile() && !goog.labs.userAgent.device.isTablet();
};
goog.provide("goog.memoize");
goog.memoize = function(f, opt_serializer) {
  var serializer = opt_serializer || goog.memoize.simpleSerializer;
  return function() {
    if (goog.memoize.ENABLE_MEMOIZE) {
      var thisOrGlobal = this || goog.global;
      var cache = thisOrGlobal[goog.memoize.CACHE_PROPERTY_] || (thisOrGlobal[goog.memoize.CACHE_PROPERTY_] = {});
      var key = serializer(goog.getUid(f), arguments);
      return cache.hasOwnProperty(key) ? cache[key] : cache[key] = f.apply(this, arguments);
    } else {
      return f.apply(this, arguments);
    }
  };
};
goog.define("goog.memoize.ENABLE_MEMOIZE", true);
goog.memoize.clearCache = function(cacheOwner) {
  cacheOwner[goog.memoize.CACHE_PROPERTY_] = {};
};
goog.memoize.CACHE_PROPERTY_ = "closure_memoize_cache_";
goog.memoize.simpleSerializer = function(functionUid, args) {
  var context = [functionUid];
  for (var i = args.length - 1;i >= 0;--i) {
    context.push(typeof args[i], args[i]);
  }
  return context.join("\x0B");
};
goog.provide("goog.History");
goog.provide("goog.History.Event");
goog.provide("goog.History.EventType");
goog.require("goog.Timer");
goog.require("goog.dom");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.history.Event");
goog.require("goog.history.EventType");
goog.require("goog.labs.userAgent.device");
goog.require("goog.memoize");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.History = function(opt_invisible, opt_blankPageUrl, opt_input, opt_iframe) {
  goog.events.EventTarget.call(this);
  if (opt_invisible && !opt_blankPageUrl) {
    throw Error("Can't use invisible history without providing a blank page.");
  }
  var input;
  if (opt_input) {
    input = opt_input;
  } else {
    var inputId = "history_state" + goog.History.historyCount_;
    document.write(goog.string.subs(goog.History.INPUT_TEMPLATE_, inputId, inputId));
    input = goog.dom.getElement(inputId);
  }
  this.hiddenInput_ = (input);
  this.window_ = opt_input ? goog.dom.getWindow(goog.dom.getOwnerDocument(opt_input)) : window;
  this.iframeSrc_ = opt_blankPageUrl;
  if (goog.userAgent.IE && !opt_blankPageUrl) {
    this.iframeSrc_ = window.location.protocol == "https" ? "https:///" : 'javascript:""';
  }
  this.timer_ = new goog.Timer(goog.History.PollingType.NORMAL);
  this.registerDisposable(this.timer_);
  this.userVisible_ = !opt_invisible;
  this.eventHandler_ = new goog.events.EventHandler(this);
  if (opt_invisible || goog.History.LEGACY_IE) {
    var iframe;
    if (opt_iframe) {
      iframe = opt_iframe;
    } else {
      var iframeId = "history_iframe" + goog.History.historyCount_;
      var srcAttribute = this.iframeSrc_ ? 'src\x3d"' + goog.string.htmlEscape(this.iframeSrc_) + '"' : "";
      document.write(goog.string.subs(goog.History.IFRAME_TEMPLATE_, iframeId, srcAttribute));
      iframe = goog.dom.getElement(iframeId);
    }
    this.iframe_ = (iframe);
    this.unsetIframe_ = true;
  }
  if (goog.History.LEGACY_IE) {
    this.eventHandler_.listen(this.window_, goog.events.EventType.LOAD, this.onDocumentLoaded);
    this.documentLoaded = false;
    this.shouldEnable_ = false;
  }
  if (this.userVisible_) {
    this.setHash_(this.getToken(), true);
  } else {
    this.setIframeToken_(this.hiddenInput_.value);
  }
  goog.History.historyCount_++;
};
goog.inherits(goog.History, goog.events.EventTarget);
goog.History.prototype.enabled_ = false;
goog.History.prototype.longerPolling_ = false;
goog.History.prototype.lastToken_ = null;
goog.History.isOnHashChangeSupported = goog.memoize(function() {
  return goog.userAgent.IE ? document.documentMode >= 8 : "onhashchange" in goog.global;
});
goog.History.LEGACY_IE = goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8);
goog.History.HASH_ALWAYS_REQUIRED = goog.History.LEGACY_IE;
goog.History.prototype.lockedToken_ = null;
goog.History.prototype.disposeInternal = function() {
  goog.History.superClass_.disposeInternal.call(this);
  this.eventHandler_.dispose();
  this.setEnabled(false);
};
goog.History.prototype.setEnabled = function(enable) {
  if (enable == this.enabled_) {
    return;
  }
  if (goog.History.LEGACY_IE && !this.documentLoaded) {
    this.shouldEnable_ = enable;
    return;
  }
  if (enable) {
    if (goog.userAgent.OPERA) {
      this.eventHandler_.listen(this.window_.document, goog.History.INPUT_EVENTS_, this.operaDefibrillator_);
    } else {
      if (goog.userAgent.GECKO) {
        this.eventHandler_.listen(this.window_, "pageshow", this.onShow_);
      }
    }
    if (goog.History.isOnHashChangeSupported() && this.userVisible_) {
      this.eventHandler_.listen(this.window_, goog.events.EventType.HASHCHANGE, this.onHashChange_);
      this.enabled_ = true;
      this.dispatchEvent(new goog.history.Event(this.getToken(), false));
    } else {
      if (!(goog.userAgent.IE && !goog.labs.userAgent.device.isMobile()) || this.documentLoaded) {
        this.eventHandler_.listen(this.timer_, goog.Timer.TICK, goog.bind(this.check_, this, true));
        this.enabled_ = true;
        if (!goog.History.LEGACY_IE) {
          this.lastToken_ = this.getToken();
          this.dispatchEvent(new goog.history.Event(this.getToken(), false));
        }
        this.timer_.start();
      }
    }
  } else {
    this.enabled_ = false;
    this.eventHandler_.removeAll();
    this.timer_.stop();
  }
};
goog.History.prototype.onDocumentLoaded = function() {
  this.documentLoaded = true;
  if (this.hiddenInput_.value) {
    this.setIframeToken_(this.hiddenInput_.value, true);
  }
  this.setEnabled(this.shouldEnable_);
};
goog.History.prototype.onShow_ = function(e) {
  if (e.getBrowserEvent()["persisted"]) {
    this.setEnabled(false);
    this.setEnabled(true);
  }
};
goog.History.prototype.onHashChange_ = function(e) {
  var hash = this.getLocationFragment_(this.window_);
  if (hash != this.lastToken_) {
    this.update_(hash, true);
  }
};
goog.History.prototype.getToken = function() {
  if (this.lockedToken_ != null) {
    return this.lockedToken_;
  } else {
    if (this.userVisible_) {
      return this.getLocationFragment_(this.window_);
    } else {
      return this.getIframeToken_() || "";
    }
  }
};
goog.History.prototype.setToken = function(token, opt_title) {
  this.setHistoryState_(token, false, opt_title);
};
goog.History.prototype.replaceToken = function(token, opt_title) {
  this.setHistoryState_(token, true, opt_title);
};
goog.History.prototype.getLocationFragment_ = function(win) {
  var href = win.location.href;
  var index = href.indexOf("#");
  return index < 0 ? "" : href.substring(index + 1);
};
goog.History.prototype.setHistoryState_ = function(token, replace, opt_title) {
  if (this.getToken() != token) {
    if (this.userVisible_) {
      this.setHash_(token, replace);
      if (!goog.History.isOnHashChangeSupported()) {
        if (goog.userAgent.IE && !goog.labs.userAgent.device.isMobile()) {
          this.setIframeToken_(token, replace, opt_title);
        }
      }
      if (this.enabled_) {
        this.check_(false);
      }
    } else {
      this.setIframeToken_(token, replace);
      this.lockedToken_ = this.lastToken_ = this.hiddenInput_.value = token;
      this.dispatchEvent(new goog.history.Event(token, false));
    }
  }
};
goog.History.prototype.setHash_ = function(token, opt_replace) {
  var loc = this.window_.location;
  var url = loc.href.split("#")[0];
  var hasHash = goog.string.contains(loc.href, "#");
  if (goog.History.HASH_ALWAYS_REQUIRED || hasHash || token) {
    url += "#" + token;
  }
  if (url != loc.href) {
    if (opt_replace) {
      loc.replace(url);
    } else {
      loc.href = url;
    }
  }
};
goog.History.prototype.setIframeToken_ = function(token, opt_replace, opt_title) {
  if (this.unsetIframe_ || token != this.getIframeToken_()) {
    this.unsetIframe_ = false;
    token = goog.string.urlEncode(token);
    if (goog.userAgent.IE) {
      var doc = goog.dom.getFrameContentDocument(this.iframe_);
      doc.open("text/html", opt_replace ? "replace" : undefined);
      doc.write(goog.string.subs(goog.History.IFRAME_SOURCE_TEMPLATE_, goog.string.htmlEscape((opt_title || this.window_.document.title)), token));
      doc.close();
    } else {
      var url = this.iframeSrc_ + "#" + token;
      var contentWindow = this.iframe_.contentWindow;
      if (contentWindow) {
        if (opt_replace) {
          contentWindow.location.replace(url);
        } else {
          contentWindow.location.href = url;
        }
      }
    }
  }
};
goog.History.prototype.getIframeToken_ = function() {
  if (goog.userAgent.IE) {
    var doc = goog.dom.getFrameContentDocument(this.iframe_);
    return doc.body ? goog.string.urlDecode(doc.body.innerHTML) : null;
  } else {
    var contentWindow = this.iframe_.contentWindow;
    if (contentWindow) {
      var hash;
      try {
        hash = goog.string.urlDecode(this.getLocationFragment_(contentWindow));
      } catch (e) {
        if (!this.longerPolling_) {
          this.setLongerPolling_(true);
        }
        return null;
      }
      if (this.longerPolling_) {
        this.setLongerPolling_(false);
      }
      return hash || null;
    } else {
      return null;
    }
  }
};
goog.History.prototype.check_ = function(isNavigation) {
  if (this.userVisible_) {
    var hash = this.getLocationFragment_(this.window_);
    if (hash != this.lastToken_) {
      this.update_(hash, isNavigation);
    }
  }
  if (!this.userVisible_ || goog.History.LEGACY_IE) {
    var token = this.getIframeToken_() || "";
    if (this.lockedToken_ == null || token == this.lockedToken_) {
      this.lockedToken_ = null;
      if (token != this.lastToken_) {
        this.update_(token, isNavigation);
      }
    }
  }
};
goog.History.prototype.update_ = function(token, isNavigation) {
  this.lastToken_ = this.hiddenInput_.value = token;
  if (this.userVisible_) {
    if (goog.History.LEGACY_IE) {
      this.setIframeToken_(token);
    }
    this.setHash_(token);
  } else {
    this.setIframeToken_(token);
  }
  this.dispatchEvent(new goog.history.Event(this.getToken(), isNavigation));
};
goog.History.prototype.setLongerPolling_ = function(longerPolling) {
  if (this.longerPolling_ != longerPolling) {
    this.timer_.setInterval(longerPolling ? goog.History.PollingType.LONG : goog.History.PollingType.NORMAL);
  }
  this.longerPolling_ = longerPolling;
};
goog.History.prototype.operaDefibrillator_ = function() {
  this.timer_.stop();
  this.timer_.start();
};
goog.History.INPUT_EVENTS_ = [goog.events.EventType.MOUSEDOWN, goog.events.EventType.KEYDOWN, goog.events.EventType.MOUSEMOVE];
goog.History.IFRAME_SOURCE_TEMPLATE_ = "\x3ctitle\x3e%s\x3c/title\x3e\x3cbody\x3e%s\x3c/body\x3e";
goog.History.IFRAME_TEMPLATE_ = '\x3ciframe id\x3d"%s" style\x3d"display:none" %s\x3e\x3c/iframe\x3e';
goog.History.INPUT_TEMPLATE_ = '\x3cinput type\x3d"text" name\x3d"%s" id\x3d"%s" style\x3d"display:none"\x3e';
goog.History.historyCount_ = 0;
goog.History.PollingType = {NORMAL:150, LONG:1E4};
goog.History.EventType = goog.history.EventType;
goog.History.Event = goog.history.Event;
goog.provide("goog.history.Html5History");
goog.provide("goog.history.Html5History.TokenTransformer");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.history.Event");
goog.require("goog.history.EventType");
goog.history.Html5History = function(opt_win, opt_transformer) {
  goog.events.EventTarget.call(this);
  goog.asserts.assert(goog.history.Html5History.isSupported(opt_win), "HTML5 history is not supported.");
  this.window_ = opt_win || window;
  this.transformer_ = opt_transformer || null;
  goog.events.listen(this.window_, goog.events.EventType.POPSTATE, this.onHistoryEvent_, false, this);
  goog.events.listen(this.window_, goog.events.EventType.HASHCHANGE, this.onHistoryEvent_, false, this);
};
goog.inherits(goog.history.Html5History, goog.events.EventTarget);
goog.history.Html5History.isSupported = function(opt_win) {
  var win = opt_win || window;
  return!!(win.history && win.history.pushState);
};
goog.history.Html5History.prototype.enabled_ = false;
goog.history.Html5History.prototype.useFragment_ = true;
goog.history.Html5History.prototype.pathPrefix_ = "/";
goog.history.Html5History.prototype.setEnabled = function(enable) {
  if (enable == this.enabled_) {
    return;
  }
  this.enabled_ = enable;
  if (enable) {
    this.dispatchEvent(new goog.history.Event(this.getToken(), false));
  }
};
goog.history.Html5History.prototype.getToken = function() {
  if (this.useFragment_) {
    var loc = this.window_.location.href;
    var index = loc.indexOf("#");
    return index < 0 ? "" : loc.substring(index + 1);
  } else {
    return this.transformer_ ? this.transformer_.retrieveToken(this.pathPrefix_, this.window_.location) : this.window_.location.pathname.substr(this.pathPrefix_.length);
  }
};
goog.history.Html5History.prototype.setToken = function(token, opt_title) {
  if (token == this.getToken()) {
    return;
  }
  this.window_.history.pushState(null, opt_title || this.window_.document.title || "", this.getUrl_(token));
  this.dispatchEvent(new goog.history.Event(token, false));
};
goog.history.Html5History.prototype.replaceToken = function(token, opt_title) {
  this.window_.history.replaceState(null, opt_title || this.window_.document.title || "", this.getUrl_(token));
  this.dispatchEvent(new goog.history.Event(token, false));
};
goog.history.Html5History.prototype.disposeInternal = function() {
  goog.events.unlisten(this.window_, goog.events.EventType.POPSTATE, this.onHistoryEvent_, false, this);
  if (this.useFragment_) {
    goog.events.unlisten(this.window_, goog.events.EventType.HASHCHANGE, this.onHistoryEvent_, false, this);
  }
};
goog.history.Html5History.prototype.setUseFragment = function(useFragment) {
  if (this.useFragment_ != useFragment) {
    if (useFragment) {
      goog.events.listen(this.window_, goog.events.EventType.HASHCHANGE, this.onHistoryEvent_, false, this);
    } else {
      goog.events.unlisten(this.window_, goog.events.EventType.HASHCHANGE, this.onHistoryEvent_, false, this);
    }
    this.useFragment_ = useFragment;
  }
};
goog.history.Html5History.prototype.setPathPrefix = function(pathPrefix) {
  this.pathPrefix_ = pathPrefix;
};
goog.history.Html5History.prototype.getPathPrefix = function() {
  return this.pathPrefix_;
};
goog.history.Html5History.prototype.getUrl_ = function(token) {
  if (this.useFragment_) {
    return "#" + token;
  } else {
    return this.transformer_ ? this.transformer_.createUrl(token, this.pathPrefix_, this.window_.location) : this.pathPrefix_ + token + this.window_.location.search;
  }
};
goog.history.Html5History.prototype.onHistoryEvent_ = function(e) {
  if (this.enabled_) {
    this.dispatchEvent(new goog.history.Event(this.getToken(), true));
  }
};
goog.history.Html5History.TokenTransformer = function() {
};
goog.history.Html5History.TokenTransformer.prototype.retrieveToken = function(pathPrefix, location) {
};
goog.history.Html5History.TokenTransformer.prototype.createUrl = function(token, pathPrefix, location) {
};
goog.provide("reagentdemo.page");
goog.require("cljs.core");
goog.require("reagent.core");
goog.require("reagent.core");
goog.require("goog.history.Html5History");
goog.require("reagent.interop");
goog.require("reagent.core");
goog.require("goog.history.EventType");
goog.require("goog.history.EventType");
goog.require("goog.History");
goog.require("goog.events");
goog.require("clojure.string");
goog.require("reagent.debug");
goog.require("clojure.string");
goog.require("goog.events");
reagentdemo.page.page = reagent.core.atom.call(null, "");
reagentdemo.page.base_path = reagent.core.atom.call(null, null);
reagentdemo.page.html5_history = false;
reagentdemo.page.create_history = function create_history() {
  if (cljs.core.truth_(reagent.core.is_client)) {
    var proto = window.location.protocol;
    if (cljs.core.truth_(function() {
      var and__3746__auto__ = goog.history.Html5History.isSupported();
      if (cljs.core.truth_(and__3746__auto__)) {
        var G__5743 = proto;
        switch(G__5743) {
          case "http:":
            return true;
            break;
          case "https:":
            return true;
            break;
          default:
            return false;
        }
      } else {
        return and__3746__auto__;
      }
    }())) {
      reagentdemo.page.html5_history = true;
      var G__5744 = new goog.history.Html5History;
      G__5744.setUseFragment(false);
      return G__5744;
    } else {
      return new goog.History;
    }
  } else {
    return null;
  }
};
reagentdemo.page.history = reagentdemo.page.create_history.call(null);
reagentdemo.page.setup_history = function setup_history() {
  var temp__4126__auto__ = reagentdemo.page.history;
  if (cljs.core.truth_(temp__4126__auto__)) {
    var h = temp__4126__auto__;
    goog.events.listen(h, goog.history.EventType.NAVIGATE, function(h, temp__4126__auto__) {
      return function(e) {
        cljs.core.reset_BANG_.call(null, reagentdemo.page.page, cljs.core.subs.call(null, e.token, cljs.core.count.call(null, cljs.core.deref.call(null, reagentdemo.page.base_path))));
        return reagent.core.flush.call(null);
      };
    }(h, temp__4126__auto__));
    cljs.core.add_watch.call(null, reagentdemo.page.page, new cljs.core.Keyword("reagentdemo.page", "history", "reagentdemo.page/history", 1168650164), function(h, temp__4126__auto__) {
      return function(_, ___$1, oldp, newp) {
        if (cljs.core._EQ_.call(null, oldp, newp)) {
          return null;
        } else {
          return h.setToken("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, reagentdemo.page.base_path)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(newp));
        }
      };
    }(h, temp__4126__auto__));
    return h.setEnabled(true);
  } else {
    return null;
  }
};
setTimeout(reagentdemo.page.setup_history, 100);
reagentdemo.page.set_start_page = function set_start_page(p) {
  if (cljs.core.truth_(reagentdemo.page.html5_history)) {
    var loc_5748 = window.location.pathname;
    var split_5749 = /.[^\/]*/;
    var loc_parts_5750 = cljs.core.re_seq.call(null, split_5749, loc_5748);
    var page_parts_5751 = cljs.core.re_seq.call(null, split_5749, function() {
      var G__5747 = p;
      switch(G__5747) {
        case "":
          return ".";
          break;
        default:
          return p;
      }
    }());
    var base_5752 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.call(null, cljs.core.str, cljs.core.drop_last.call(null, cljs.core.count.call(null, page_parts_5751), loc_parts_5750))) + "/";
    cljs.core.reset_BANG_.call(null, reagentdemo.page.base_path, clojure.string.replace.call(null, base_5752, /^\//, ""));
  } else {
  }
  return cljs.core.reset_BANG_.call(null, reagentdemo.page.page, p);
};
reagentdemo.page.title_atom = reagent.core.atom.call(null, "");
reagentdemo.page.page_map = reagent.core.atom.call(null, null);
reagentdemo.page.reverse_page_map = reagent.core.atom.call(null, null);
cljs.core.add_watch.call(null, reagentdemo.page.page_map, new cljs.core.Keyword("reagentdemo.page", "page-map-watch", "reagentdemo.page/page-map-watch", 941348391), function(_, ___$1, ___$2, new_map) {
  return cljs.core.reset_BANG_.call(null, reagentdemo.page.reverse_page_map, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4496__auto__ = function iter__5754(s__5755) {
      return new cljs.core.LazySeq(null, function() {
        var s__5755__$1 = s__5755;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__5755__$1);
          if (temp__4126__auto__) {
            var s__5755__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__5755__$2)) {
              var c__4494__auto__ = cljs.core.chunk_first.call(null, s__5755__$2);
              var size__4495__auto__ = cljs.core.count.call(null, c__4494__auto__);
              var b__5757 = cljs.core.chunk_buffer.call(null, size__4495__auto__);
              if (function() {
                var i__5756 = 0;
                while (true) {
                  if (i__5756 < size__4495__auto__) {
                    var vec__5760 = cljs.core._nth.call(null, c__4494__auto__, i__5756);
                    var k = cljs.core.nth.call(null, vec__5760, 0, null);
                    var v = cljs.core.nth.call(null, vec__5760, 1, null);
                    cljs.core.chunk_append.call(null, b__5757, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, k], null));
                    var G__5762 = i__5756 + 1;
                    i__5756 = G__5762;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5757), iter__5754.call(null, cljs.core.chunk_rest.call(null, s__5755__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5757), null);
              }
            } else {
              var vec__5761 = cljs.core.first.call(null, s__5755__$2);
              var k = cljs.core.nth.call(null, vec__5761, 0, null);
              var v = cljs.core.nth.call(null, vec__5761, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, k], null), iter__5754.call(null, cljs.core.rest.call(null, s__5755__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4496__auto__.call(null, new_map);
  }()));
});
reagentdemo.page.prefix = function prefix(href) {
  var depth = cljs.core.count.call(null, cljs.core.re_seq.call(null, /\//, cljs.core.deref.call(null, reagentdemo.page.page)));
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, depth, "../"))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(href);
};
reagentdemo.page.link = function link(props, child) {
  var rpm = cljs.core.deref.call(null, reagentdemo.page.reverse_page_map);
  var href = rpm.call(null, (new cljs.core.Keyword(null, "href", "href", -793805698)).cljs$core$IFn$_invoke$arity$1(props));
  if (typeof href === "string") {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "href", "href", 846725829, null)))));
  }
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), cljs.core.assoc.call(null, props, new cljs.core.Keyword(null, "href", "href", -793805698), reagentdemo.page.prefix.call(null, href), new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), cljs.core.truth_(reagentdemo.page.history) ? function(rpm, href) {
    return function(e) {
      e.preventDefault();
      cljs.core.reset_BANG_.call(null, reagentdemo.page.page, href);
      return reagent.core.next_tick.call(null, function(rpm, href) {
        return function() {
          return document.body.scrollTop = 0;
        };
      }(rpm, href));
    };
  }(rpm, href) : cljs.core.identity), child], null);
};
cljs.core.add_watch.call(null, reagentdemo.page.page, new cljs.core.Keyword("reagentdemo.page", "title-watch", "reagentdemo.page/title-watch", -808634563), function(_, ___$1, ___$2, p) {
  return cljs.core.reset_BANG_.call(null, reagentdemo.page.title_atom, "");
});
reagentdemo.page.title = function title(name) {
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, reagentdemo.page.title_atom), "")) {
    if (cljs.core.truth_(reagent.core.is_client)) {
      document.title = name;
    } else {
    }
    cljs.core.reset_BANG_.call(null, reagentdemo.page.title_atom, name);
  } else {
  }
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632)], null);
};
goog.provide("reagentdemo.common");
goog.require("cljs.core");
goog.require("reagent.core");
goog.require("reagentdemo.syntax");
goog.require("reagentdemo.syntax");
goog.require("reagentdemo.page");
goog.require("reagentdemo.page");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("reagent.debug");
goog.require("reagent.core");
goog.require("reagent.core");
reagentdemo.common.syntaxify = cljs.core.memoize.call(null, reagentdemo.syntax.syntaxify);
reagentdemo.common.src_parts = function src_parts(src) {
  return clojure.string.split.call(null, src, /\n(?=[(])/);
};
reagentdemo.common.src_defs = function src_defs(parts) {
  var ws = /[^ \t]+/;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4496__auto__ = function(ws) {
      return function iter__5661(s__5662) {
        return new cljs.core.LazySeq(null, function(ws) {
          return function() {
            var s__5662__$1 = s__5662;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__5662__$1);
              if (temp__4126__auto__) {
                var s__5662__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__5662__$2)) {
                  var c__4494__auto__ = cljs.core.chunk_first.call(null, s__5662__$2);
                  var size__4495__auto__ = cljs.core.count.call(null, c__4494__auto__);
                  var b__5664 = cljs.core.chunk_buffer.call(null, size__4495__auto__);
                  if (function() {
                    var i__5663 = 0;
                    while (true) {
                      if (i__5663 < size__4495__auto__) {
                        var x = cljs.core._nth.call(null, c__4494__auto__, i__5663);
                        cljs.core.chunk_append.call(null, b__5664, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, cljs.core.second.call(null, cljs.core.re_seq.call(null, ws, x))), x], null));
                        var G__5665 = i__5663 + 1;
                        i__5663 = G__5665;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5664), iter__5661.call(null, cljs.core.chunk_rest.call(null, s__5662__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5664), null);
                  }
                } else {
                  var x = cljs.core.first.call(null, s__5662__$2);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, cljs.core.second.call(null, cljs.core.re_seq.call(null, ws, x))), x], null), iter__5661.call(null, cljs.core.rest.call(null, s__5662__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(ws), null, null);
      };
    }(ws);
    return iter__4496__auto__.call(null, parts);
  }());
};
reagentdemo.common.ns_src = "(ns example\n  (:require [reagent.core :as reagent :refer [atom]]))\n";
reagentdemo.common.nsr_src = "(ns example\n  (:require [reagent.core :as r :refer [atom]]))\n";
reagentdemo.common.src_for_names = function src_for_names(srcmap, names) {
  return clojure.string.join.call(null, "\n", cljs.core.map.call(null, srcmap, names));
};
reagentdemo.common.fun_map = function fun_map(src) {
  return cljs.core.assoc.call(null, reagentdemo.common.src_defs.call(null, reagentdemo.common.src_parts.call(null, src)), new cljs.core.Keyword(null, "ns", "ns", 441598760), reagentdemo.common.ns_src, new cljs.core.Keyword(null, "nsr", "nsr", -336218697), reagentdemo.common.nsr_src);
};
reagentdemo.common.src_for = function src_for(funmap, defs) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pre", "pre", 2118456869), reagentdemo.common.syntaxify.call(null, reagentdemo.common.src_for_names.call(null, funmap, defs))], null);
};
reagentdemo.common.demo_component = function demo_component() {
  var showing = reagent.core.atom.call(null, true);
  return function(showing) {
    return function(p__5668) {
      var map__5669 = p__5668;
      var map__5669__$1 = cljs.core.seq_QMARK_.call(null, map__5669) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5669) : map__5669;
      var no_heading = cljs.core.get.call(null, map__5669__$1, new cljs.core.Keyword(null, "no-heading", "no-heading", -172020073));
      var complete = cljs.core.get.call(null, map__5669__$1, new cljs.core.Keyword(null, "complete", "complete", -500388775));
      var src = cljs.core.get.call(null, map__5669__$1, new cljs.core.Keyword(null, "src", "src", -1651076051));
      var comp = cljs.core.get.call(null, map__5669__$1, new cljs.core.Keyword(null, "comp", "comp", 1191953630));
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), cljs.core.truth_(comp) ? new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-example.clearfix", "div.demo-example.clearfix", 1804704421), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a.demo-example-hide", "a.demo-example-hide", 
      -63572697), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function(map__5669, map__5669__$1, no_heading, complete, src, comp, showing) {
        return function(e) {
          e.preventDefault();
          cljs.core.swap_BANG_.call(null, showing, cljs.core.not);
          return false;
        };
      }(map__5669, map__5669__$1, no_heading, complete, src, comp, showing)], null), cljs.core.truth_(cljs.core.deref.call(null, showing)) ? "hide" : "show"], null), cljs.core.truth_(no_heading) ? null : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h3.demo-heading", "h3.demo-heading", -42694427), "Example "], null), cljs.core.truth_(cljs.core.deref.call(null, showing)) ? cljs.core.not.call(null, complete) ? new cljs.core.PersistentVector(null, 
      2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.simple-demo", "div.simple-demo", -1263176704), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp], null)], null) : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp], null) : null], null) : null, cljs.core.truth_(cljs.core.deref.call(null, showing)) ? cljs.core.truth_(src) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
      [new cljs.core.Keyword(null, "div.demo-source.clearfix", "div.demo-source.clearfix", 620677308), cljs.core.truth_(no_heading) ? null : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h3.demo-heading", "h3.demo-heading", -42694427), "Source"], null), src], null) : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.clearfix", "div.clearfix", 1775605822)], null) : null], 
      null);
    };
  }(showing);
};
goog.provide("reagentdemo.news.binaryclock");
goog.require("cljs.core");
goog.require("reagent.core");
goog.require("reagent.core");
goog.require("reagent.core");
reagentdemo.news.binaryclock.cell = function cell(n, bit) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.clock-cell", "div.clock-cell", -12507663), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core.truth_((n & 1 << bit) != 0) ? "light" : "dark"], null)], null);
};
reagentdemo.news.binaryclock.column = function column(n) {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.clock-col", "div.clock-col", 1418748813), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.cell, n, 3], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.cell, n, 2], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [reagentdemo.news.binaryclock.cell, n, 1], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.cell, n, 0], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.clock-cell", "div.clock-cell", -12507663), n], null)], null);
};
reagentdemo.news.binaryclock.column_pair = function column_pair(n) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.clock-pair", "div.clock-pair", -65283468), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.column, cljs.core.quot.call(null, n, 10)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.column, cljs.core.mod.call(null, n, 10)], null)], null);
};
reagentdemo.news.binaryclock.legend = function() {
  var legend__delegate = function(items) {
    return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.clock-col.clock-legend", "div.clock-col.clock-legend", -1934406846)], null), cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.vector, new cljs.core.Keyword(null, "div.clock-cell", "div.clock-cell", -12507663)), items));
  };
  var legend = function(var_args) {
    var items = null;
    if (arguments.length > 0) {
      items = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return legend__delegate.call(this, items);
  };
  legend.cljs$lang$maxFixedArity = 0;
  legend.cljs$lang$applyTo = function(arglist__5721) {
    var items = cljs.core.seq(arglist__5721);
    return legend__delegate(items);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
reagentdemo.news.binaryclock.clock = function clock(date, show_100s, toggle_100s) {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.clock-main", "div.clock-main", -402520242), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), toggle_100s, new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core.truth_(show_100s) ? "wide" : null], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.legend, 
  8, 4, 2, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.column_pair, date.getHours()], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.column_pair, date.getMinutes()], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.column_pair, date.getSeconds()], null), cljs.core.truth_(show_100s) ? 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.column_pair, cljs.core.quot.call(null, date.getMilliseconds(), 10)], null) : null], null);
};
reagentdemo.news.binaryclock.clock_state = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "time", "time", 1385887882), new Date, new cljs.core.Keyword(null, "show-100s", "show-100s", 1072817186), false], null));
reagentdemo.news.binaryclock.update_time = function update_time() {
  return cljs.core.swap_BANG_.call(null, reagentdemo.news.binaryclock.clock_state, cljs.core.assoc, new cljs.core.Keyword(null, "time", "time", 1385887882), new Date);
};
reagentdemo.news.binaryclock.main = function main() {
  var map__5723 = cljs.core.deref.call(null, reagentdemo.news.binaryclock.clock_state);
  var map__5723__$1 = cljs.core.seq_QMARK_.call(null, map__5723) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5723) : map__5723;
  var show_100s = cljs.core.get.call(null, map__5723__$1, new cljs.core.Keyword(null, "show-100s", "show-100s", 1072817186));
  var time = cljs.core.get.call(null, map__5723__$1, new cljs.core.Keyword(null, "time", "time", 1385887882));
  if (cljs.core.truth_(show_100s)) {
    reagent.core.next_tick.call(null, reagentdemo.news.binaryclock.update_time);
  } else {
    setTimeout(reagentdemo.news.binaryclock.update_time, 1E3);
  }
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.clock, time, show_100s, function(map__5723, map__5723__$1, show_100s, time) {
    return function() {
      return cljs.core.swap_BANG_.call(null, reagentdemo.news.binaryclock.clock_state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "show-100s", "show-100s", 1072817186)], null), cljs.core.not);
    };
  }(map__5723, map__5723__$1, show_100s, time)], null);
};
goog.provide("reagentdemo.news.clockpost");
goog.require("cljs.core");
goog.require("reagentdemo.page");
goog.require("reagentdemo.common");
goog.require("reagent.core");
goog.require("reagent.interop");
goog.require("reagentdemo.syntax");
goog.require("reagent.core");
goog.require("reagent.core");
goog.require("reagentdemo.news.binaryclock");
goog.require("reagentdemo.page");
goog.require("reagentdemo.common");
goog.require("reagent.debug");
goog.require("reagentdemo.news.binaryclock");
goog.require("reagentdemo.common");
reagentdemo.news.clockpost.funmap = reagentdemo.common.fun_map.call(null, '(ns reagentdemo.news.binaryclock\n  (:require [reagent.core :as r :refer [atom]]))\n\n(defn cell [n bit]\n  [:div.clock-cell {:class (if (bit-test n bit)\n                             "light"\n                             "dark")}])\n\n(defn column [n]\n  [:div.clock-col\n   [cell n 3]\n   [cell n 2]\n   [cell n 1]\n   [cell n 0]\n   [:div.clock-cell n]])\n\n(defn column-pair [n]\n  [:div.clock-pair\n   [column (quot n 10)]\n   [column (mod n 10)]])\n\n(defn legend [\x26 items]\n  (into [:div.clock-col.clock-legend]\n        (map (partial vector :div.clock-cell)\n             items)))\n\n(defn clock [date show-100s toggle-100s]\n  [:div.clock-main {:on-click toggle-100s\n                    :class (when show-100s "wide")}\n   [legend 8 4 2 1]\n   [column-pair (.getHours date)]\n   [column-pair (.getMinutes date)]\n   [column-pair (.getSeconds date)]\n   (when show-100s\n     [column-pair (-\x3e (.getMilliseconds date)\n                      (quot 10))])])\n\n(def clock-state (atom {:time (js/Date.)\n                        :show-100s false}))\n\n(defn update-time []\n  (swap! clock-state assoc :time (js/Date.)))\n\n(defn main []\n  (let [{:keys [time show-100s]} @clock-state]\n    (if show-100s\n      (r/next-tick update-time)\n      (js/setTimeout update-time 1000))\n    [clock time show-100s\n     #(swap! clock-state update-in [:show-100s] not)]))\n');
reagentdemo.news.clockpost.src_for = cljs.core.partial.call(null, reagentdemo.common.src_for, reagentdemo.news.clockpost.funmap);
reagentdemo.news.clockpost.fn_src = function() {
  var fn_src__delegate = function(parts) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.news.clockpost.src_for.call(null, cljs.core.vec.call(null, parts)), new cljs.core.Keyword(null, "no-heading", "no-heading", -172020073), true], null)], null);
  };
  var fn_src = function(var_args) {
    var parts = null;
    if (arguments.length > 0) {
      parts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return fn_src__delegate.call(this, parts);
  };
  fn_src.cljs$lang$maxFixedArity = 0;
  fn_src.cljs$lang$applyTo = function(arglist__5724) {
    var parts = cljs.core.seq(arglist__5724);
    return fn_src__delegate(parts);
  };
  fn_src.cljs$core$IFn$_invoke$arity$variadic = fn_src__delegate;
  return fn_src;
}();
reagentdemo.news.clockpost.main = function main(p__5725) {
  var map__5729 = p__5725;
  var map__5729__$1 = cljs.core.seq_QMARK_.call(null, map__5729) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5729) : map__5729;
  var summary = cljs.core.get.call(null, map__5729__$1, new cljs.core.Keyword(null, "summary", "summary", 380847952));
  var head = "A binary clock";
  var lexclock = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "http://www.lexicallyscoped.com/2014/01/23/clojurescript-react-om-binary-clock.html"], null);
  var hopclock = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "http://pmbauer.github.io/2014/01/27/hoplon-binary-clock/"], null);
  var om = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "https://github.com/swannodette/om"], null);
  var hoplon = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "http://hoplon.io"], null);
  var clocksrc = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "https://github.com/holmsand/reagent/blob/master/demo/reagentdemo/news/binaryclock.cljs"], null);
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.reagent-demo", "div.reagent-demo", -2027348807), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", 
  -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.clockpost/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
      }
      var old__3529__auto__ = main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5730 = function(old__3529__auto__, f__3528__auto__, head, lexclock, hopclock, om, hoplon, clocksrc, map__5729, map__5729__$1, summary) {
          return function() {
            return main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, head, lexclock, hopclock, om, hoplon, clocksrc, map__5729, map__5729__$1, summary);
        G__5730["name"] = main.name;
        G__5730["fvar"] = true;
        return G__5730;
      }();
      main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.clockpost/main"] = v__3530__auto__;
    }
  }()], null), head], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.title, head], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), cljs.core.truth_(summary) ? null : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.clearfix", "div.clearfix", 1775605822), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.binaryclock.main], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "strong", "strong", 269529E3), "Click to toggle 1/100th seconds."], null)], null)], null), new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Fredrik Dyrkell wrote a very nice ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), lexclock, "binary\n      clock"], null), " using ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "a", "a", -2123407586), om, "Om"], null), ". I thought I\u2019d replicate that\n      using Reagent for fun (another re-write, using ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), hoplon, "Hoplon"], null), ", can be seen ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), hopclock, "here"], null), 
  ")."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "So, without further ado, here is a binary clock using Reagent."], null), cljs.core.truth_(summary) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.clockpost/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
      }
      var old__3529__auto__ = main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5731 = function(old__3529__auto__, f__3528__auto__, head, lexclock, hopclock, om, hoplon, clocksrc, map__5729, map__5729__$1, summary) {
          return function() {
            return main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, head, lexclock, hopclock, om, hoplon, clocksrc, map__5729, map__5729__$1, summary);
        G__5731["name"] = main.name;
        G__5731["fvar"] = true;
        return G__5731;
      }();
      main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.clockpost/main"] = v__3530__auto__;
    }
  }(), new cljs.core.Keyword(null, "class", "class", -2030961996), new cljs.core.Symbol(null, "news-read-more", "news-read-more", 150793143, null)], null), "Read more"], null) : new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.clockpost.fn_src, new cljs.core.Keyword(null, "nsr", "nsr", -336218697)], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "We start with the basics: The clock is built out of\n         cells, with a light colour if the bit the cell corresponds to\n         is set."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.clockpost.fn_src, new cljs.core.Keyword(null, "cell", "cell", 764245084)], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Cells are combined into columns of four bits, with a\n         decimal digit at the bottom."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.clockpost.fn_src, new cljs.core.Keyword(null, "column", "column", 2078222095)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", 
  "p", 151049309), "Columns are in turn combined into pairs:"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.clockpost.fn_src, new cljs.core.Keyword(null, "column-pair", "column-pair", 1374695904)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "We'll also need the legend on the left side:"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [reagentdemo.news.clockpost.fn_src, new cljs.core.Keyword(null, "legend", "legend", -1027192245)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "We combine these element into a component that shows the\n         legend, hours, minutes and seconds; and optionally 1/100\n         seconds. It also responds to clicks."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [reagentdemo.news.clockpost.fn_src, new cljs.core.Keyword(null, "clock", "clock", -894301127)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "We also need to keep track of the time, and of the\n         detail shown, in a Reagent atom. And a function to update the\n         time."], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.clockpost.fn_src, 
  new cljs.core.Keyword(null, "clock-state", "clock-state", -1232687680), new cljs.core.Keyword(null, "update-time", "update-time", -1745455895)], null), new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "And finally we use the ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "clock"], null), " component.\n         The current time is scheduled to be updated, after a suitable\n         delay, every time the main component is rendered (", 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "reagent.core/next-tick"], null), " is just a front for ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "requestAnimationFrame"], null), "):"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.clockpost.fn_src, 
  new cljs.core.Keyword(null, "main", "main", -2117802661)], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "The entire source is also available ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), clocksrc, "here"], null), "."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "h2", "h2", -372662728), "How it all works"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Reading through the source, it may look like the entire\n         clock component is recreated from scratch whenever the time\n         changes. "], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "That is an illusion: Reagent and React together\n         makes sure that only the parts of the DOM that actually need\n         to change are updated. For example, the ", 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "column-pair"], null), " function corresponding to hours only\n         runs once every hour."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "And that\u2019s what makes Reagent and React fast. Try\n         clicking on the clock to toggle the display of 1/100th\n         seconds. Most browsers should have no trouble at all keeping\n         up (even if they won\u2019t actually show every 1/100th second:\n         they are typically limited to roughly 60 fps)."], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "But it is a very handy illusion. Almost the entire UI is\n         made up of pure functions, transforming immutable data into\n         other immutable data structures. That makes them easy to\n         reason about, and trivial to test. You don\u2019t have to care\n         about \u201dmodel objects\u201d, or about how to update the DOM\n         efficiently. "], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Just pass arguments to component functions, return a UI\n         description that corresponds to those arguments, and leave it\n         to React to actually display that UI."], null)], null)], null)], null);
};
cljs.core.swap_BANG_.call(null, reagentdemo.page.page_map, cljs.core.assoc, "news/binary-clock.html", function() {
  var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.clockpost/main"];
  if (!(f__3528__auto__ == null)) {
    return f__3528__auto__;
  } else {
    if (!(reagentdemo.news.clockpost.main == null)) {
    } else {
      throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
    }
    var old__3529__auto__ = reagentdemo.news.clockpost.main["-fvar"];
    var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
      var G__5732 = function(old__3529__auto__, f__3528__auto__) {
        return function() {
          return reagentdemo.news.clockpost.main.apply(null, arguments);
        };
      }(old__3529__auto__, f__3528__auto__);
      G__5732["name"] = reagentdemo.news.clockpost.main.name;
      G__5732["fvar"] = true;
      return G__5732;
    }();
    reagentdemo.news.clockpost.main["-fvar"] = v__3530__auto__;
    return reagent.interop.fvars["reagentdemo.news.clockpost/main"] = v__3530__auto__;
  }
}());
goog.provide("reagentdemo.intro");
goog.require("cljs.core");
goog.require("reagentdemo.page");
goog.require("reagentdemo.common");
goog.require("reagent.core");
goog.require("reagent.core");
goog.require("reagent.interop");
goog.require("reagentdemo.syntax");
goog.require("reagent.core");
goog.require("reagentdemo.page");
goog.require("clojure.string");
goog.require("reagentdemo.common");
goog.require("reagent.debug");
goog.require("clojure.string");
goog.require("reagentdemo.common");
reagentdemo.intro.simple_component = function simple_component() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u6211\u662f\u4e00\u4e2a\u7ec4\u4ef6!"], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p.someclass", "p.someclass", -1904646929), "\u6211\u6709 ", 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "strong", "strong", 269529E3), "\u7c97\u4f53"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), 
  "red"], null)], null), " \u548c\u7ea2\u8272 "], null), "\u7684\u5b57."], null)], null);
};
reagentdemo.intro.simple_parent = function simple_parent() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u6211\u5305\u542b\u5305\u542b\u4e86 simple-component."], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.simple_component], null)], null);
};
reagentdemo.intro.hello_component = function hello_component(name) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u4f60\u597d, ", name, "!"], null);
};
reagentdemo.intro.say_hello = function say_hello() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.hello_component, "\u4e16\u754c"], null);
};
reagentdemo.intro.lister = function lister(items) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul", "ul", -1349521403), function() {
    var iter__4377__auto__ = function iter__5437(s__5438) {
      return new cljs.core.LazySeq(null, function() {
        var s__5438__$1 = s__5438;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__5438__$1);
          if (temp__4126__auto__) {
            var s__5438__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__5438__$2)) {
              var c__4375__auto__ = cljs.core.chunk_first.call(null, s__5438__$2);
              var size__4376__auto__ = cljs.core.count.call(null, c__4375__auto__);
              var b__5440 = cljs.core.chunk_buffer.call(null, size__4376__auto__);
              if (function() {
                var i__5439 = 0;
                while (true) {
                  if (i__5439 < size__4376__auto__) {
                    var item = cljs.core._nth.call(null, c__4375__auto__, i__5439);
                    cljs.core.chunk_append.call(null, b__5440, cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "Item ", item], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), item], null)));
                    var G__5441 = i__5439 + 1;
                    i__5439 = G__5441;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5440), iter__5437.call(null, cljs.core.chunk_rest.call(null, s__5438__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5440), null);
              }
            } else {
              var item = cljs.core.first.call(null, s__5438__$2);
              return cljs.core.cons.call(null, cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "Item ", item], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), item], null)), iter__5437.call(null, cljs.core.rest.call(null, s__5438__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4377__auto__.call(null, items);
  }()], null);
};
reagentdemo.intro.lister_user = function lister_user() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "\u8fd9\u662f\u4e2a\u5217\u8868:", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.lister, cljs.core.range.call(null, 3)], null)], null);
};
reagentdemo.intro.click_count = reagent.core.atom.call(null, 0);
reagentdemo.intro.counting_component = function counting_component() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "\u8fd9\u4e2a atom ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "click-count"], null), " \u7684\u503c\u662f: ", cljs.core.deref.call(null, reagentdemo.intro.click_count), ". ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "button", new cljs.core.Keyword(null, "value", "value", 305978217), "\u70b9\u6211!", new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return cljs.core.swap_BANG_.call(null, reagentdemo.intro.click_count, cljs.core.inc);
  }], null)], null)], null);
};
reagentdemo.intro.atom_input = function atom_input(value) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.deref.call(null, value), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__5442_SHARP_) {
    return cljs.core.reset_BANG_.call(null, value, p1__5442_SHARP_.target.value);
  }], null)], null);
};
reagentdemo.intro.shared_state = function shared_state() {
  var val = reagent.core.atom.call(null, "foo");
  return function(val) {
    return function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u503c\u73b0\u5728\u662f: ", cljs.core.deref.call(null, val)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u4ece\u8fd9\u91cc\u4fee\u6539\u5b83: ", 
      new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.atom_input, val], null)], null)], null);
    };
  }(val);
};
reagentdemo.intro.timer_component = function timer_component() {
  var seconds_elapsed = reagent.core.atom.call(null, 0);
  return function(seconds_elapsed) {
    return function() {
      setTimeout(function(seconds_elapsed) {
        return function() {
          return cljs.core.swap_BANG_.call(null, seconds_elapsed, cljs.core.inc);
        };
      }(seconds_elapsed), 1E3);
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "\u65f6\u95f4\u6309\u79d2\u6d41\u901d\u4e86: ", cljs.core.deref.call(null, seconds_elapsed)], null);
    };
  }(seconds_elapsed);
};
reagentdemo.intro.render_simple = function render_simple() {
  return reagent.core.render_component.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.simple_component], null), document.body);
};
reagentdemo.intro.bmi_data = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "height", "height", 1025178622), 180, new cljs.core.Keyword(null, "weight", "weight", -1262796205), 80], null));
reagentdemo.intro.calc_bmi = function calc_bmi() {
  var map__5444 = cljs.core.deref.call(null, reagentdemo.intro.bmi_data);
  var map__5444__$1 = cljs.core.seq_QMARK_.call(null, map__5444) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5444) : map__5444;
  var data = map__5444__$1;
  var bmi = cljs.core.get.call(null, map__5444__$1, new cljs.core.Keyword(null, "bmi", "bmi", 1421979636));
  var weight = cljs.core.get.call(null, map__5444__$1, new cljs.core.Keyword(null, "weight", "weight", -1262796205));
  var height = cljs.core.get.call(null, map__5444__$1, new cljs.core.Keyword(null, "height", "height", 1025178622));
  var h = height / 100;
  if (bmi == null) {
    return cljs.core.assoc.call(null, data, new cljs.core.Keyword(null, "bmi", "bmi", 1421979636), weight / (h * h));
  } else {
    return cljs.core.assoc.call(null, data, new cljs.core.Keyword(null, "weight", "weight", -1262796205), bmi * h * h);
  }
};
reagentdemo.intro.slider = function slider(param, value, min, max) {
  var reset = function() {
    var G__5447 = param instanceof cljs.core.Keyword ? param.fqn : null;
    switch(G__5447) {
      case "bmi":
        return new cljs.core.Keyword(null, "weight", "weight", -1262796205);
        break;
      default:
        return new cljs.core.Keyword(null, "bmi", "bmi", 1421979636);
    }
  }();
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "type", "type", 1174270348), "range", new cljs.core.Keyword(null, "value", "value", 305978217), value, new cljs.core.Keyword(null, "min", "min", 444991522), min, new cljs.core.Keyword(null, "max", "max", 61366548), max, new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "width", "width", -384071477), "100%"], null), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(reset) {
    return function(p1__5445_SHARP_) {
      return cljs.core.swap_BANG_.call(null, reagentdemo.intro.bmi_data, cljs.core.assoc, param, p1__5445_SHARP_.target.value, reset, null);
    };
  }(reset)], null)], null);
};
reagentdemo.intro.bmi_component = function bmi_component() {
  var map__5451 = reagentdemo.intro.calc_bmi.call(null);
  var map__5451__$1 = cljs.core.seq_QMARK_.call(null, map__5451) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5451) : map__5451;
  var bmi = cljs.core.get.call(null, map__5451__$1, new cljs.core.Keyword(null, "bmi", "bmi", 1421979636));
  var height = cljs.core.get.call(null, map__5451__$1, new cljs.core.Keyword(null, "height", "height", 1025178622));
  var weight = cljs.core.get.call(null, map__5451__$1, new cljs.core.Keyword(null, "weight", "weight", -1262796205));
  var vec__5452 = bmi < 18.5 ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["orange", "\u8fc7\u8f7b"], null) : bmi < 25 ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["inherit", "\u6b63\u5e38"], null) : bmi < 30 ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["orange", "\u8d85\u91cd"], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["red", "obese"], 
  null);
  var color = cljs.core.nth.call(null, vec__5452, 0, null);
  var diagnose = cljs.core.nth.call(null, vec__5452, 1, null);
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h3", "h3", 2067611163), "BMI \u8ba1\u7b97\u5668"], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "Height: ", height | 0, "cm", new cljs.core.PersistentVector(null, 
  5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.slider, new cljs.core.Keyword(null, "height", "height", 1025178622), height, 100, 220], null)], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "Weight: ", weight | 0, "kg", new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.slider, new cljs.core.Keyword(null, "weight", "weight", -1262796205), 
  weight, 30, 150], null)], null), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "BMI: ", bmi | 0, " ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "color", "color", 1011675173), color], null)], null), diagnose], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.slider, new cljs.core.Keyword(null, "bmi", "bmi", 1421979636), bmi, 10, 50], null)], null)], null);
};
if (typeof reagentdemo.intro.funmap !== "undefined") {
} else {
  reagentdemo.intro.funmap = reagentdemo.common.fun_map.call(null, '\n(ns reagentdemo.intro\n  (:require [reagent.core :as reagent :refer [atom]]\n            [reagent.interop :refer-macros [.\' .! fvar]]\n            [reagent.debug :refer-macros [dbg println]]\n            [clojure.string :as string]\n            [reagentdemo.syntax :refer-macros [get-source]]\n            [reagentdemo.page :refer [link title]]\n            [reagentdemo.common :as common :refer [demo-component]]))\n\n(defn simple-component []\n  [:div\n   [:p "\u6211\u662f\u4e00\u4e2a\u7ec4\u4ef6!"]\n   [:p.someclass\n    "\u6211\u6709 " [:strong "\u7c97\u4f53"]\n    [:span {:style {:color "red"}} " \u548c\u7ea2\u8272 "] "\u7684\u5b57."]])\n\n(defn simple-parent []\n  [:div\n   [:p "\u6211\u5305\u542b\u5305\u542b\u4e86 simple-component."]\n   [simple-component]])\n\n(defn hello-component [name]\n  [:p "\u4f60\u597d, " name "!"])\n\n(defn say-hello []\n  [hello-component "\u4e16\u754c"])\n\n(defn lister [items]\n  [:ul\n   (for [item items]\n     ^{:key item} [:li "Item " item])])\n\n(defn lister-user []\n  [:div\n   "\u8fd9\u662f\u4e2a\u5217\u8868:"\n   [lister (range 3)]])\n\n(def click-count (atom 0))\n\n(defn counting-component []\n  [:div\n   "\u8fd9\u4e2a atom " [:code "click-count"] " \u7684\u503c\u662f: "\n   @click-count ". "\n   [:input {:type "button" :value "\u70b9\u6211!"\n            :on-click #(swap! click-count inc)}]])\n\n(defn atom-input [value]\n  [:input {:type "text"\n           :value @value\n           :on-change #(reset! value (-\x3e % .-target .-value))}])\n\n(defn shared-state []\n  (let [val (atom "foo")]\n    (fn []\n      [:div\n       [:p "\u503c\u73b0\u5728\u662f: " @val]\n       [:p "\u4ece\u8fd9\u91cc\u4fee\u6539\u5b83: " [atom-input val]]])))\n\n(defn timer-component []\n  (let [seconds-elapsed (atom 0)]\n    (fn []\n      (js/setTimeout #(swap! seconds-elapsed inc) 1000)\n      [:div\n       "\u65f6\u95f4\u6309\u79d2\u6d41\u901d\u4e86: " @seconds-elapsed])))\n\n(defn render-simple []\n  (reagent/render-component [simple-component]\n                            (.-body js/document)))\n\n(def bmi-data (atom {:height 180 :weight 80}))\n\n(defn calc-bmi []\n  (let [{:keys [height weight bmi] :as data} @bmi-data\n        h (/ height 100)]\n    (if (nil? bmi)\n      (assoc data :bmi (/ weight (* h h)))\n      (assoc data :weight (* bmi h h)))))\n\n(defn slider [param value min max]\n  (let [reset (case param :bmi :weight :bmi)]\n    [:input {:type "range" :value value :min min :max max\n             :style {:width "100%"}\n             :on-change #(swap! bmi-data assoc\n                                param (-\x3e % .-target .-value)\n                                reset nil)}]))\n\n(defn bmi-component []\n  (let [{:keys [weight height bmi]} (calc-bmi)\n        [color diagnose] (cond\n                          (\x3c bmi 18.5) ["orange" "\u8fc7\u8f7b"]\n                          (\x3c bmi 25) ["inherit" "\u6b63\u5e38"]\n                          (\x3c bmi 30) ["orange" "\u8d85\u91cd"]\n                          :else ["red" "obese"])]\n    [:div\n     [:h3 "BMI \u8ba1\u7b97\u5668"]\n     [:div\n      "Height: " (int height) "cm"\n      [slider :height height 100 220]]\n     [:div\n      "Weight: " (int weight) "kg"\n      [slider :weight weight 30 150]]\n     [:div\n      "BMI: " (int bmi) " "\n      [:span {:style {:color color}} diagnose]\n      [slider :bmi bmi 10 50]]]))\n\n(defonce funmap (-\x3e "reagentdemo/intro.cljs" get-source common/fun-map))\n(defonce src-for (partial common/src-for funmap))\n\n(defn intro []\n  (let [github {:href "https://github.com/holmsand/reagent"}\n        clojurescript {:href "https://github.com/clojure/clojurescript"}\n        react {:href "http://facebook.github.io/react/"}\n        hiccup {:href "https://github.com/weavejester/hiccup"}\n        dynamic-children {:href "http://facebook.github.io/react/docs/multiple-components.html#dynamic-children"}]\n    [:div.demo-text\n\n     [:h2 "\u4ecb\u7ecd\u4e00\u4e0b Reagent"]\n\n     [:p [:a github "Reagent"] " \u5728\n     " [:a clojurescript "ClojureScript"] " \u548c " [:a\n     react "React"] " \u63d0\u4f9b\u4e86\u7cbe\u7b80\u7684\u63a5\u53e3. \u5b83\u5e2e\u52a9\u4f60\u5feb\u901f\u5730\u5b9a\u4e49 React \u7ec4\u4ef6,\n     \u5b83\u5355\u7eaf\u4f7f\u7528\u7684\u662f ClojureScript \u51fd\u6570\u548c\u6570\u636e\u7c7b\u578b,\n     \u80fd\u591f\u7528\u7c7b\u4f3c " [:a hiccup "Hiccup"] " \u7684\u8bed\u6cd5\u6765\u63cf\u8ff0\u7ec4\u4ef6."]\n\n     [:p "Reagent \u7684\u76ee\u6807\u662f\u5b9e\u73b0\u5feb\u901f\u5b9a\u4e49\u4efb\u610f\u590d\u6742\u7684\u754c\u9762, \u800c\u53ea\u4f9d\u9760\u5f88\u5c11\u7684\u57fa\u672c\u6982\u5ff5,\n     \u540c\u65f6\u9ed8\u8ba4\u7684\u6027\u80fd\u8db3\u591f\u597d, \u4e0d\u9700\u8981\u989d\u5916\u53bb\u64cd\u5fc3."]\n\n     [:p "\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684 Reagent \u7ec4\u4ef6\u770b\u8d77\u662f\u8fd9\u6837: "]\n     [demo-component {:comp simple-component\n                      :src (src-for [:simple-component])}]\n\n     [:p "\u4f60\u53ef\u4ee5\u628a\u5176\u4ed6\u7ec4\u4ef6\u4f5c\u4e3a\u79ef\u6728\u6765\u521b\u9020\u65b0\u7684\u7ec4\u4ef6, \u6bd4\u5982:"]\n     [demo-component {:comp simple-parent\n                      :src (src-for [:simple-parent])}]\n\n     [:p "\u6570\u636e\u901a\u8fc7 Clojure \u539f\u672c\u5c31\u6709\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4f20\u9012\u5230\u5b50\u7ec4\u4ef6, \u6bd4\u5982:"]\n\n     [demo-component {:comp say-hello\n                      :src (src-for [:hello-component :say-hello])}]\n\n     [:p [:strong "\u6ce8\u610f: "]\n      "\u5728\u4e0a\u9762\u7684\u4f8b\u5b50, " [:code "hello-component"] " \u5927\u6982\u53ef\u4ee5\u540c\u65f6\u88ab\u8ba4\u4e3a\u662f\u666e\u901a\u7684\n      Clojure \u51fd\u6570, \u800c\u4e0d\u662f\u4e00\u4e2a\u7279\u6b8a\u7684 Reagent \u7ec4\u4ef6, \u6216\u8005\u8bf4, \u53ef\u4ee5\u5199\u6210\u5706\u62ec\u53f7\u800c\u4e0d\u4f7f\u7528\u82b1\u62ec\u53f7.\n      \u552f\u4e00\u7684\u5dee\u522b\u4f1a\u662f\u6027\u80fd, \u56e0\u4e3a`\u771f\u6b63`\u7684 Reagent \u7ec4\u4ef6\u53ea\u4f1a\u5728\u6570\u636e\u6539\u53d8\u65f6\u91cd\u65b0\u6e32\u67d3.\n      \u66f4\u52a0\u590d\u6742\u7684\u7ec4\u4ef6(\u89c1\u4e0b\u6587)\u5fc5\u987b\u4f7f\u7528\u65b9\u62ec\u53f7\u6765\u8c03\u7528."]\n\n     [:p "\u8fd9\u662f\u53e6\u4e00\u4e2a\u4f8b\u5b50, \u628a\u5217\u8868\u5143\u7d20\u663e\u793a\u4e3a "\n     [:code "seq"] ":" ]\n\n     [demo-component {:comp lister-user\n                      :src (src-for [:lister :lister-user])}]\n\n     [:p [:strong "Note: "]\n     "\u4e0a\u9762\u7684 " [:code "^{:key item}"] " \u5728\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u91cc\u5e76\u4e0d\u662f\u975e\u5e38\u5fc5\u8981,\n     \u4e0d\u8fc7\u5728\u5217\u8868\u7684\u6bcf\u4e2a\u52a8\u6001\u751f\u6210\u7684\u7ec4\u4ef6\u4e0a\u9644\u52a0\u4e00\u4e2a\u552f\u4e00\u7684 key \u662f\u4e00\u4e2a\u597d\u7684\u5b9e\u8df5,\n     \u80fd\u591f\u5e2e\u52a9 React \u63d0\u5347\u5927\u5217\u8868\u7684\u6027\u80fd. key \u53ef\u4ee5\u7528 meta-data (\u5c31\u50cf\u524d\u9762\u8fd9\u4e2a\u4f8b\u5b50), \u6216\u8005\u4f5c\u4e3a"\n     [:code ":key"] " \u5143\u7d20\u8bbe\u7f6e\u5728\u7ec4\u4ef6\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570(\u9700\u8981\u662f map)\u4e0a.\n     \u9605\u8bfb React " [:a dynamic-children "\u6587\u6863"] "\u4e86\u89e3\u66f4\u591a."]]))\n\n(defn managing-state []\n  [:div.demo-text\n   [:h2 "Reagent \u7684\u7ba1\u7406\u72b6\u6001"]\n\n   [:p "Reagent \u7ba1\u7406\u72b6\u6001\u6700\u7b80\u5355\u7684\u529e\u6cd5\u662f\u7528 Reagent \u81ea\u5e26\u7684\u7248\u672c\u7684"\n   [:code "atom"] ". \u5b83\u548c\u5728 clojure.core \u91cc\u7684 atom \u8fd0\u884c\u8d77\u6765\u4e00\u6837,\n   \u9664\u4e86\u5b83\u4f1a\u8bb0\u5f55\u5b83\u7684\u6bcf\u6b21 deref(\u89e3\u5f15\u7528). \u6bcf\u4e2a\u7528\u4e86 " [:code "atom"]\n   " \u7684\u7ec4\u4ef6\u5728\u5b83\u7684\u503c\u6539\u53d8\u65f6\u90fd\u4f1a\u81ea\u52a8\u91cd\u65b0\u6e32\u67d3."]\n\n   [:p "\u6211\u4eec\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6f14\u793a\u4e00\u4e0b:"]\n   [demo-component {:comp counting-component\n                    :src (src-for [:ns :click-count :counting-component])}]\n\n   [:p "\u6709\u65f6\u4f60\u8981\u5728\u4e00\u4e2a\u7ec4\u4ef6\u5c40\u90e8\u7ef4\u62a4\u72b6\u6001.\n   \u8fd9\u79cd\u60c5\u51b5\u7528 " [:code "atom"] " \u5904\u7406\u8d77\u6765\u4e5f\u5bb9\u6613."]\n\n   [:p "\u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50, \u6bcf\u6b21\u8c03\u7528 "\n    [:code "setTimeout"] " \u7ec4\u4ef6\u5c31\u4f1a\u88ab\u6e32\u67d3\u7136\u540e\u66f4\u65b0\u8ba1\u6570\u5668:"]\n\n   [demo-component {:comp timer-component\n                    :src (src-for [:timer-component])}]\n\n   [:p "\u524d\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u7528\u5230\u4e86 Reagent \u53e6\u4e00\u4e2a\u529f\u80fd:\n   \u4e00\u4e2a\u7ec4\u4ef6\u7684\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570, \u7136\u540e\u7528\u4e8e\u5b9e\u9645\u7684\u6e32\u67d3\u5f53\u4e2d.\n   \u8fd9\u4e2a\u51fd\u6570\u548c\u7b2c\u4e00\u4e2a\u51fd\u6570\u7528\u76f8\u540c\u7684\u53c2\u6570\u53bb\u8c03\u7528."]\n\n   [:p "\u8fd9\u4e3a\u65b0\u521b\u5efa\u7684\u7ec4\u4ef6\u505a\u521d\u59cb\u5316\u63d0\u4f9b\u4e86\u65b9\u4fbf, \u800c\u4e0d\u7528\u4f9d\u8d56 React \u7684\u751f\u547d\u5468\u671f\u4e8b\u4ef6."]\n\n   [:p "\u901a\u8fc7\u628a "[:code "atom"]" \u8fdb\u884c\u4f20\u9012, \u4f60\u5c31\u53ef\u4ee5\u5171\u4eab\u7ec4\u4ef6\u4e4b\u95f4\u7684\u72b6\u6001\u7ba1\u7406, \u6bd4\u5982:"]\n\n   [demo-component {:comp shared-state\n                    :src (src-for [:ns :atom-input :shared-state])}]\n\n   [:p [:strong "\u6ce8\u610f: "] "\u7ec4\u4ef6\u51fd\u6570\u53ef\u4ee5\u4e0d\u52a0\u53c2\u6570\u76f4\u63a5\u8c03\u7528, \u53ea\u8981\u5b83\u4eec\u662f\u4e0d\u53ef\u53d8\u7684.\n   \u4f60 "[:strong "\u4e5f\u8bb8\u4e5f\u53ef\u4ee5"]" \u4f7f\u7528\u53ef\u53d8\u7684\u5bf9\u8c61, \u4f46\u90a3\u6837\u4f60\u9700\u8981\u53bb\u4fdd\u8bc1\u6570\u636e\u6539\u53d8\u65f6\u7ec4\u4ef6\u4e5f\u6539\u53d8.\n   Reagent \u9ed8\u8ba4\u4f1a\u5047\u5b9a\u4e24\u4e2a\u5f15\u7528\u76f8\u540c\u7684\u5bf9\u8c61, \u5b83\u4eec\u5c31\u662f\u76f8\u7b49\u7684."]])\n\n(defn essential-api []\n  [:div.demo-text\n   [:h2 "\u57fa\u7840 API"]\n\n   [:p "Reagent \u652f\u6301\u5927\u591a\u6570 React \u7684 API, \u4e0d\u8fc7\u4f46\u4e0e\u7edd\u5927\u591a\u6570\u5e94\u7528,\n   \u771f\u7684\u4ec5\u4ec5\u4e00\u4e2a\u8c03\u7528\u7684\u5165\u53e3\u4f1a\u88ab\u5fc5\u987b\u88ab\u7528\u5230: "\n    [:code "reagent.core/render-component"] "."]\n\n   [:p "\u5b83\u63a5\u6536\u4e24\u4e2a\u53c2\u6570: \u4e00\u4e2a\u7ec4\u4ef6, \u4e00\u4e2a DOM \u8282\u70b9. \u6bd4\u5982,\n   \u542f\u52a8\u6574\u4e2a\u9875\u9762\u4e0a\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u662f\u8fd9\u6837\u5199:"]\n\n   [demo-component {:src (src-for [:ns :simple-component :render-simple])}]])\n\n(defn performance []\n  [:div.demo-text\n   [:h2 "\u6027\u80fd"]\n\n   [:p "React \u672c\u8eab\u5f88\u5feb, \u6240\u4ee5 Reagent \u4e5f\u662f. \u5b9e\u9645\u4e0a, Reagent\n   \u5927\u90e8\u5206\u65f6\u95f4\u4f1a\u6bd4\u4e00\u822c\u7684 React \u8fd8\u8981\u5feb, \u8fd9\u8981\u611f\u8c22 ClojureScript \u5b9e\u73b0\u7684\u4f18\u5316."]\n\n   [:p "\u5df2\u7ecf\u6302\u8f7d\u7684\u7ec4\u4ef6\u53ea\u6709\u5728\u5b83\u4eec\u7684\u6570\u636e\u6539\u53d8\u65f6\u624d\u4f1a\u91cd\u65b0\u6e32\u67d3.\n   \u8fd9\u4e2a\u6539\u53d8\u53ef\u4ee5\u6765\u81ea deref(\u89e3\u5f15\u7528)\u7684"\n   [:code "atom"] ", \u4f20\u9012\u7ed9\u7ec4\u4ef6\u7684\u53c2\u6570, \u6216\u8005\u7ec4\u4ef6\u72b6\u6001."]\n\n   [:p "\u8fd9\u91cc\u6240\u6709\u7684\u4fee\u6539\u7684\u68c0\u67e5\u90fd\u662f\u901a\u8fc7 "\n   [:code "identical?"] " \u51fd\u6570, \u4ec5\u4ec5\u662f\u4e00\u6b21\u6307\u9488\u7684\u5bf9\u6bd4, \u56e0\u800c\u5f00\u9500\u975e\u5e38\u4f4e.\n   \u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9\u7ec4\u4ef6\u7684 Map \u4e5f\u662f\u901a\u8fc7\u8fd9\u4e2a\u529e\u6cd5\u5bf9\u6bd4\u7684:\n   \u5b83\u4eec\u6240\u6709\u7684 entry \u662f\u4e00\u81f4\u7684, \u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u76f8\u7b49\u7684.\n   \u8fd9\u540c\u6837\u9002\u7528\u4e8e\u5185\u7f6e\u7684 React \u7ec4\u4ef6\u6bd4\u5982 " [:code ":div"] ", " [:code ":p"] ", \u7b49\u7b49."]\n\n   [:p "\u6240\u6709\u8fd9\u4e9b\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u76f4\u63a5\u7edd\u5927\u90e8\u5206\u65f6\u95f4\u4e0d\u53bb\u5173\u5fc3\u6027\u80fd.\n   \u4f60\u600e\u4e48\u60f3\u5c31\u600e\u4e48\u5b9a\u4e49\u4f60\u7684\u754c\u9762, \u5b83\u603b\u662f\u4f1a\u8db3\u591f\u5feb\u7684."]\n\n   [:p "\u5c3d\u7ba1\u5982\u6b64, \u6709\u4e9b\u573a\u666f\u8fd8\u662f\u9700\u8981\u7559\u610f\u4e00\u4e0b. \u5982\u679c\u4f60\u8ba9 Reagent \u53bb\u6e32\u67d3\u4e00\u4e2a\u5de8\u5927\u7684\u7ec4\u4ef6\u7684\n    " [:code "seq"] ", \u4f60\u9700\u8981\u7ed9\u6bcf\u4e2a\u5143\u7d20\u63d0\u4f9b\u5bf9\u5e94\u7684 " [:code ":key"] " \u5c5e\u6027,\n    \u7528\u6765\u63d0\u5347\u6e32\u67d3\u7684\u6027\u80fd(\u89c1\u4e0a\u6587). \u540c\u65f6\u6ce8\u610f\u533f\u540d\u51fd\u6570\u901a\u5e38\u6765\u8bf4\u4e0d\u4f1a\u76f8\u7b49,\n    \u5373\u4fbf\u5b83\u4eec\u8868\u793a\u7684\u662f\u76f8\u540c\u7684\u4ee3\u7801\u76f8\u540c\u7684\u95ed\u5305."]\n\n   [:p "\u4e0d\u8fc7\u518d\u6b21\u5f3a\u8c03, \u901a\u5e38\u60c5\u51b5\u4f60\u53ea\u9700\u8981\u76f8\u4fe1 React \u548c Reagent \u4f1a\u8db3\u591f\u5feb.\n   \u8fd9\u4e2a\u7279\u522b\u7684\u9875\u9762\u662f\u7528\u4e00\u4e2a\u5355\u4e00\u7684 Reagent \u7ec4\u4ef6, \u7531\u4e0a\u5343\u4e2a\u5b50\u7ec4\u4ef6\u7ec4\u6210\u7684,\n   (\u4ee3\u7801\u5f53\u4e2d\u6bcf\u4e2a\u5706\u62ec\u53f7\u4e4b\u7c7b\u7684\u5730\u65b9\u90fd\u7b97\u4e00\u4e2a\u72ec\u7acb\u7684\u7ec4\u4ef6),\n   \u800c\u4e14\u8fd9\u4e2a\u9875\u9762\u53ef\u4ee5\u5728\u6bcf\u79d2\u66f4\u65b0\u66f4\u591a\u6b21, \u800c\u4e0d\u4f1a\u7ed9\u6d4f\u89c8\u5668\u589e\u52a0\u54ea\u6015\u4e00\u70b9\u8d1f\u62c5."]\n\n   [:p "\u987a\u5e26\u8bf4\u4e00\u4e0b, \u8fd9\u4e2a\u9875\u9762\u8fd8\u7528\u5230\u4e86\u53e6\u4e00\u4e2a React \u7684\u82b1\u62db:\n   \u6574\u4e2a\u9875\u9762\u540c\u65f6\u4e5f\u7528 Node \u4ee5\u53ca "\n   [:code "reagent/render-component-to-string"] " \u505a\u4e86\u9884\u6e32\u67d3.\n   \u5f53\u5b83\u88ab\u6d4f\u89c8\u5668\u52a0\u8f7d\u65f6, React \u5728\u5df2\u7ecf\u9700\u5728\u7684 DOM \u6811\u4e0a\u81ea\u52a8\u52a0\u4e0a\u4e8b\u4ef6\u5904\u7406\u5668."]])\n\n(defn bmi-demo []\n  [:div.demo-text\n   [:h2 "\u96c6\u5408\u5230\u4e00\u8d77"]\n\n   [:p "\u8fd9\u662f\u4e00\u4e2a\u7a0d\u5fae\u4e0d\u90a3\u4e48\u4eba\u4e3a\u8bbe\u8ba1\u7684\u4f8b\u5b50: \u7b80\u5355\u7684 BMI \u8ba1\u7b97\u5668."]\n\n   [:p "\u6570\u636e\u50a8\u5b58\u5728\u5355\u4e2a " [:code "reagent.core/atom"] ": \u4e00\u4e2a map,\n   \u5305\u542b height, weight \u548c BMI \u4f5c\u4e3a key."]\n\n   [demo-component {:comp bmi-component\n                    :src (src-for [:ns :bmi-data :calc-bmi :slider\n                                   :bmi-component])}]])\n\n(defn complete-simple-demo []\n  [:div.demo-text\n   [:h2 "Complete demo"]\n\n   [:p "Reagent \u9879\u76ee\u5305\u542b\u51e0\u4e2a\u5b8c\u6574\u7684\u4f8b\u5b50, \u5305\u62ec\n   Leiningen \u9879\u76ee\u6587\u4ef6\u548c\u5168\u90e8\u4ee3\u7801. \u8fd9\u662f\u5176\u4e2d\u7684\u4e00\u4e2a:"]\n\n   [demo-component {:comp simpleexample/simple-example\n                    :complete true\n                    :src (-\x3e "simpleexample.cljs"\n                             get-source\n                             common/syntaxify)}]])\n\n(defn todomvc-demo []\n  [:div.demo-text\n   [:h2 "Todomvc"]\n\n   [:p "Todolist \u662f MVC \u65b9\u6848\u5fc5\u987b\u6709\u7684\u4f8b\u5b50,\n   Reagent \u91cc\u7684\u5927\u81f4\u4e0a\u662f\u8fd9\u6837(\u7b97\u662f\u6709\u70b9\u4f5c\u5f0a, \u8df3\u8fc7\u4e86\u8def\u7531\u548c\u6570\u636e\u6301\u4e45\u5316):"]\n\n   [demo-component {:comp todomvc/todo-app\n                    :complete true\n                    :src (-\x3e "todomvc.cljs"\n                             get-source\n                             common/syntaxify)}]])\n\n(defn main []\n  (let [show-all (atom false)\n        head "Reagent: \u7ed9 ClojureScript \u7684\u6781\u7b80\u7684 React"]\n    (js/setTimeout #(reset! show-all true) 500)\n    (fn []\n      [:div.reagent-demo\n       [title head]\n       [:h1 head]\n       [intro]\n       [managing-state]\n       [essential-api]\n       [bmi-demo]\n       [performance]\n       ;; Show heavy examples on load, to make html file smaller\n       (when @show-all [complete-simple-demo])\n       (when @show-all [todomvc-demo])])))\n')
  ;
}
if (typeof reagentdemo.intro.src_for !== "undefined") {
} else {
  reagentdemo.intro.src_for = cljs.core.partial.call(null, reagentdemo.common.src_for, reagentdemo.intro.funmap);
}
reagentdemo.intro.intro = function intro() {
  var github = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "https://github.com/holmsand/reagent"], null);
  var clojurescript = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "https://github.com/clojure/clojurescript"], null);
  var react = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "http://facebook.github.io/react/"], null);
  var hiccup = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "https://github.com/weavejester/hiccup"], null);
  var dynamic_children = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "http://facebook.github.io/react/docs/multiple-components.html#dynamic-children"], null);
  return new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "\u4ecb\u7ecd\u4e00\u4e0b Reagent"], null), new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), new cljs.core.PersistentVector(null, 
  3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), github, "Reagent"], null), " \u5728\n     ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), clojurescript, "ClojureScript"], null), " \u548c ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), react, "React"], null), " \u63d0\u4f9b\u4e86\u7cbe\u7b80\u7684\u63a5\u53e3. \u5b83\u5e2e\u52a9\u4f60\u5feb\u901f\u5730\u5b9a\u4e49 React \u7ec4\u4ef6,\n     \u5b83\u5355\u7eaf\u4f7f\u7528\u7684\u662f ClojureScript \u51fd\u6570\u548c\u6570\u636e\u7c7b\u578b,\n     \u80fd\u591f\u7528\u7c7b\u4f3c ", 
  new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), hiccup, "Hiccup"], null), " \u7684\u8bed\u6cd5\u6765\u63cf\u8ff0\u7ec4\u4ef6."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Reagent \u7684\u76ee\u6807\u662f\u5b9e\u73b0\u5feb\u901f\u5b9a\u4e49\u4efb\u610f\u590d\u6742\u7684\u754c\u9762, \u800c\u53ea\u4f9d\u9760\u5f88\u5c11\u7684\u57fa\u672c\u6982\u5ff5,\n     \u540c\u65f6\u9ed8\u8ba4\u7684\u6027\u80fd\u8db3\u591f\u597d, \u4e0d\u9700\u8981\u989d\u5916\u53bb\u64cd\u5fc3."], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684 Reagent \u7ec4\u4ef6\u770b\u8d77\u662f\u8fd9\u6837: "], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), reagentdemo.intro.simple_component, 
  new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.intro.src_for.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "simple-component", "simple-component", -990785005)], null))], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u4f60\u53ef\u4ee5\u628a\u5176\u4ed6\u7ec4\u4ef6\u4f5c\u4e3a\u79ef\u6728\u6765\u521b\u9020\u65b0\u7684\u7ec4\u4ef6, \u6bd4\u5982:"], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), reagentdemo.intro.simple_parent, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.intro.src_for.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "simple-parent", "simple-parent", -1317913448)], 
  null))], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u6570\u636e\u901a\u8fc7 Clojure \u539f\u672c\u5c31\u6709\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4f20\u9012\u5230\u5b50\u7ec4\u4ef6, \u6bd4\u5982:"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
  "comp", "comp", 1191953630), reagentdemo.intro.say_hello, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.intro.src_for.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "hello-component", "hello-component", -14597636), new cljs.core.Keyword(null, "say-hello", "say-hello", -1427060073)], null))], null)], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "p", "p", 151049309), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "strong", "strong", 269529E3), "\u6ce8\u610f: "], null), "\u5728\u4e0a\u9762\u7684\u4f8b\u5b50, ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "hello-component"], null), " \u5927\u6982\u53ef\u4ee5\u540c\u65f6\u88ab\u8ba4\u4e3a\u662f\u666e\u901a\u7684\n      Clojure \u51fd\u6570, \u800c\u4e0d\u662f\u4e00\u4e2a\u7279\u6b8a\u7684 Reagent \u7ec4\u4ef6, \u6216\u8005\u8bf4, \u53ef\u4ee5\u5199\u6210\u5706\u62ec\u53f7\u800c\u4e0d\u4f7f\u7528\u82b1\u62ec\u53f7.\n      \u552f\u4e00\u7684\u5dee\u522b\u4f1a\u662f\u6027\u80fd, \u56e0\u4e3a`\u771f\u6b63`\u7684 Reagent \u7ec4\u4ef6\u53ea\u4f1a\u5728\u6570\u636e\u6539\u53d8\u65f6\u91cd\u65b0\u6e32\u67d3.\n      \u66f4\u52a0\u590d\u6742\u7684\u7ec4\u4ef6(\u89c1\u4e0b\u6587)\u5fc5\u987b\u4f7f\u7528\u65b9\u62ec\u53f7\u6765\u8c03\u7528."], 
  null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u8fd9\u662f\u53e6\u4e00\u4e2a\u4f8b\u5b50, \u628a\u5217\u8868\u5143\u7d20\u663e\u793a\u4e3a ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "seq"], null), ":"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, 
  new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), reagentdemo.intro.lister_user, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.intro.src_for.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lister", "lister", -6951889), new cljs.core.Keyword(null, "lister-user", "lister-user", -1447101430)], null))], null)], null), new cljs.core.PersistentVector(null, 
  9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "strong", "strong", 269529E3), "Note: "], null), "\u4e0a\u9762\u7684 ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "^{:key item}"], null), " \u5728\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u91cc\u5e76\u4e0d\u662f\u975e\u5e38\u5fc5\u8981,\n     \u4e0d\u8fc7\u5728\u5217\u8868\u7684\u6bcf\u4e2a\u52a8\u6001\u751f\u6210\u7684\u7ec4\u4ef6\u4e0a\u9644\u52a0\u4e00\u4e2a\u552f\u4e00\u7684 key \u662f\u4e00\u4e2a\u597d\u7684\u5b9e\u8df5,\n     \u80fd\u591f\u5e2e\u52a9 React \u63d0\u5347\u5927\u5217\u8868\u7684\u6027\u80fd. key \u53ef\u4ee5\u7528 meta-data (\u5c31\u50cf\u524d\u9762\u8fd9\u4e2a\u4f8b\u5b50), \u6216\u8005\u4f5c\u4e3a", 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), ":key"], null), " \u5143\u7d20\u8bbe\u7f6e\u5728\u7ec4\u4ef6\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570(\u9700\u8981\u662f map)\u4e0a.\n     \u9605\u8bfb React ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), dynamic_children, "\u6587\u6863"], null), "\u4e86\u89e3\u66f4\u591a."], 
  null)], null);
};
reagentdemo.intro.managing_state = function managing_state() {
  return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "Reagent \u7684\u7ba1\u7406\u72b6\u6001"], null), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Reagent \u7ba1\u7406\u72b6\u6001\u6700\u7b80\u5355\u7684\u529e\u6cd5\u662f\u7528 Reagent \u81ea\u5e26\u7684\u7248\u672c\u7684", 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "atom"], null), ". \u5b83\u548c\u5728 clojure.core \u91cc\u7684 atom \u8fd0\u884c\u8d77\u6765\u4e00\u6837,\n   \u9664\u4e86\u5b83\u4f1a\u8bb0\u5f55\u5b83\u7684\u6bcf\u6b21 deref(\u89e3\u5f15\u7528). \u6bcf\u4e2a\u7528\u4e86 ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), 
  "atom"], null), " \u7684\u7ec4\u4ef6\u5728\u5b83\u7684\u503c\u6539\u53d8\u65f6\u90fd\u4f1a\u81ea\u52a8\u91cd\u65b0\u6e32\u67d3."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u6211\u4eec\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6f14\u793a\u4e00\u4e0b:"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 
  2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), reagentdemo.intro.counting_component, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.intro.src_for.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "click-count", "click-count", -1016274336), new cljs.core.Keyword(null, "counting-component", "counting-component", 2062884465)], null))], null)], 
  null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u6709\u65f6\u4f60\u8981\u5728\u4e00\u4e2a\u7ec4\u4ef6\u5c40\u90e8\u7ef4\u62a4\u72b6\u6001.\n   \u8fd9\u79cd\u60c5\u51b5\u7528 ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "atom"], null), " \u5904\u7406\u8d77\u6765\u4e5f\u5bb9\u6613."], null), new cljs.core.PersistentVector(null, 
  4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50, \u6bcf\u6b21\u8c03\u7528 ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "setTimeout"], null), " \u7ec4\u4ef6\u5c31\u4f1a\u88ab\u6e32\u67d3\u7136\u540e\u66f4\u65b0\u8ba1\u6570\u5668:"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), reagentdemo.intro.timer_component, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.intro.src_for.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "timer-component", "timer-component", -1786326090)], null))], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "p", "p", 151049309), "\u524d\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u7528\u5230\u4e86 Reagent \u53e6\u4e00\u4e2a\u529f\u80fd:\n   \u4e00\u4e2a\u7ec4\u4ef6\u7684\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570, \u7136\u540e\u7528\u4e8e\u5b9e\u9645\u7684\u6e32\u67d3\u5f53\u4e2d.\n   \u8fd9\u4e2a\u51fd\u6570\u548c\u7b2c\u4e00\u4e2a\u51fd\u6570\u7528\u76f8\u540c\u7684\u53c2\u6570\u53bb\u8c03\u7528."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "p", "p", 151049309), "\u8fd9\u4e3a\u65b0\u521b\u5efa\u7684\u7ec4\u4ef6\u505a\u521d\u59cb\u5316\u63d0\u4f9b\u4e86\u65b9\u4fbf, \u800c\u4e0d\u7528\u4f9d\u8d56 React \u7684\u751f\u547d\u5468\u671f\u4e8b\u4ef6."], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u901a\u8fc7\u628a ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "code", "code", 1586293142), "atom"], null), " \u8fdb\u884c\u4f20\u9012, \u4f60\u5c31\u53ef\u4ee5\u5171\u4eab\u7ec4\u4ef6\u4e4b\u95f4\u7684\u72b6\u6001\u7ba1\u7406, \u6bd4\u5982:"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), reagentdemo.intro.shared_state, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.intro.src_for.call(null, 
  new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "atom-input", "atom-input", 1370868543), new cljs.core.Keyword(null, "shared-state", "shared-state", -190369316)], null))], null)], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "strong", "strong", 269529E3), "\u6ce8\u610f: "], null), "\u7ec4\u4ef6\u51fd\u6570\u53ef\u4ee5\u4e0d\u52a0\u53c2\u6570\u76f4\u63a5\u8c03\u7528, \u53ea\u8981\u5b83\u4eec\u662f\u4e0d\u53ef\u53d8\u7684.\n   \u4f60 ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "strong", "strong", 269529E3), "\u4e5f\u8bb8\u4e5f\u53ef\u4ee5"], null), " \u4f7f\u7528\u53ef\u53d8\u7684\u5bf9\u8c61, \u4f46\u90a3\u6837\u4f60\u9700\u8981\u53bb\u4fdd\u8bc1\u6570\u636e\u6539\u53d8\u65f6\u7ec4\u4ef6\u4e5f\u6539\u53d8.\n   Reagent \u9ed8\u8ba4\u4f1a\u5047\u5b9a\u4e24\u4e2a\u5f15\u7528\u76f8\u540c\u7684\u5bf9\u8c61, \u5b83\u4eec\u5c31\u662f\u76f8\u7b49\u7684."], 
  null)], null);
};
reagentdemo.intro.essential_api = function essential_api() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "\u57fa\u7840 API"], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Reagent \u652f\u6301\u5927\u591a\u6570 React \u7684 API, \u4e0d\u8fc7\u4f46\u4e0e\u7edd\u5927\u591a\u6570\u5e94\u7528,\n   \u771f\u7684\u4ec5\u4ec5\u4e00\u4e2a\u8c03\u7528\u7684\u5165\u53e3\u4f1a\u88ab\u5fc5\u987b\u88ab\u7528\u5230: ", 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "reagent.core/render-component"], null), "."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u5b83\u63a5\u6536\u4e24\u4e2a\u53c2\u6570: \u4e00\u4e2a\u7ec4\u4ef6, \u4e00\u4e2a DOM \u8282\u70b9. \u6bd4\u5982,\n   \u542f\u52a8\u6574\u4e2a\u9875\u9762\u4e0a\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u662f\u8fd9\u6837\u5199:"], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.intro.src_for.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "simple-component", "simple-component", -990785005), new cljs.core.Keyword(null, 
  "render-simple", "render-simple", 1183983100)], null))], null)], null)], null);
};
reagentdemo.intro.performance = function performance() {
  return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "\u6027\u80fd"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "React \u672c\u8eab\u5f88\u5feb, \u6240\u4ee5 Reagent \u4e5f\u662f. \u5b9e\u9645\u4e0a, Reagent\n   \u5927\u90e8\u5206\u65f6\u95f4\u4f1a\u6bd4\u4e00\u822c\u7684 React \u8fd8\u8981\u5feb, \u8fd9\u8981\u611f\u8c22 ClojureScript \u5b9e\u73b0\u7684\u4f18\u5316."], 
  null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u5df2\u7ecf\u6302\u8f7d\u7684\u7ec4\u4ef6\u53ea\u6709\u5728\u5b83\u4eec\u7684\u6570\u636e\u6539\u53d8\u65f6\u624d\u4f1a\u91cd\u65b0\u6e32\u67d3.\n   \u8fd9\u4e2a\u6539\u53d8\u53ef\u4ee5\u6765\u81ea deref(\u89e3\u5f15\u7528)\u7684", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 
  1586293142), "atom"], null), ", \u4f20\u9012\u7ed9\u7ec4\u4ef6\u7684\u53c2\u6570, \u6216\u8005\u7ec4\u4ef6\u72b6\u6001."], null), new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u8fd9\u91cc\u6240\u6709\u7684\u4fee\u6539\u7684\u68c0\u67e5\u90fd\u662f\u901a\u8fc7 ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "identical?"], 
  null), " \u51fd\u6570, \u4ec5\u4ec5\u662f\u4e00\u6b21\u6307\u9488\u7684\u5bf9\u6bd4, \u56e0\u800c\u5f00\u9500\u975e\u5e38\u4f4e.\n   \u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9\u7ec4\u4ef6\u7684 Map \u4e5f\u662f\u901a\u8fc7\u8fd9\u4e2a\u529e\u6cd5\u5bf9\u6bd4\u7684:\n   \u5b83\u4eec\u6240\u6709\u7684 entry \u662f\u4e00\u81f4\u7684, \u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u76f8\u7b49\u7684.\n   \u8fd9\u540c\u6837\u9002\u7528\u4e8e\u5185\u7f6e\u7684 React \u7ec4\u4ef6\u6bd4\u5982 ", new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), ":div"], null), ", ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), ":p"], null), ", \u7b49\u7b49."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u6240\u6709\u8fd9\u4e9b\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u76f4\u63a5\u7edd\u5927\u90e8\u5206\u65f6\u95f4\u4e0d\u53bb\u5173\u5fc3\u6027\u80fd.\n   \u4f60\u600e\u4e48\u60f3\u5c31\u600e\u4e48\u5b9a\u4e49\u4f60\u7684\u754c\u9762, \u5b83\u603b\u662f\u4f1a\u8db3\u591f\u5feb\u7684."], 
  null), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u5c3d\u7ba1\u5982\u6b64, \u6709\u4e9b\u573a\u666f\u8fd8\u662f\u9700\u8981\u7559\u610f\u4e00\u4e0b. \u5982\u679c\u4f60\u8ba9 Reagent \u53bb\u6e32\u67d3\u4e00\u4e2a\u5de8\u5927\u7684\u7ec4\u4ef6\u7684\n    ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "seq"], null), 
  ", \u4f60\u9700\u8981\u7ed9\u6bcf\u4e2a\u5143\u7d20\u63d0\u4f9b\u5bf9\u5e94\u7684 ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), ":key"], null), " \u5c5e\u6027,\n    \u7528\u6765\u63d0\u5347\u6e32\u67d3\u7684\u6027\u80fd(\u89c1\u4e0a\u6587). \u540c\u65f6\u6ce8\u610f\u533f\u540d\u51fd\u6570\u901a\u5e38\u6765\u8bf4\u4e0d\u4f1a\u76f8\u7b49,\n    \u5373\u4fbf\u5b83\u4eec\u8868\u793a\u7684\u662f\u76f8\u540c\u7684\u4ee3\u7801\u76f8\u540c\u7684\u95ed\u5305."], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u4e0d\u8fc7\u518d\u6b21\u5f3a\u8c03, \u901a\u5e38\u60c5\u51b5\u4f60\u53ea\u9700\u8981\u76f8\u4fe1 React \u548c Reagent \u4f1a\u8db3\u591f\u5feb.\n   \u8fd9\u4e2a\u7279\u522b\u7684\u9875\u9762\u662f\u7528\u4e00\u4e2a\u5355\u4e00\u7684 Reagent \u7ec4\u4ef6, \u7531\u4e0a\u5343\u4e2a\u5b50\u7ec4\u4ef6\u7ec4\u6210\u7684,\n   (\u4ee3\u7801\u5f53\u4e2d\u6bcf\u4e2a\u5706\u62ec\u53f7\u4e4b\u7c7b\u7684\u5730\u65b9\u90fd\u7b97\u4e00\u4e2a\u72ec\u7acb\u7684\u7ec4\u4ef6),\n   \u800c\u4e14\u8fd9\u4e2a\u9875\u9762\u53ef\u4ee5\u5728\u6bcf\u79d2\u66f4\u65b0\u66f4\u591a\u6b21, \u800c\u4e0d\u4f1a\u7ed9\u6d4f\u89c8\u5668\u589e\u52a0\u54ea\u6015\u4e00\u70b9\u8d1f\u62c5."], 
  null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u987a\u5e26\u8bf4\u4e00\u4e0b, \u8fd9\u4e2a\u9875\u9762\u8fd8\u7528\u5230\u4e86\u53e6\u4e00\u4e2a React \u7684\u82b1\u62db:\n   \u6574\u4e2a\u9875\u9762\u540c\u65f6\u4e5f\u7528 Node \u4ee5\u53ca ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "reagent/render-component-to-string"], 
  null), " \u505a\u4e86\u9884\u6e32\u67d3.\n   \u5f53\u5b83\u88ab\u6d4f\u89c8\u5668\u52a0\u8f7d\u65f6, React \u5728\u5df2\u7ecf\u9700\u5728\u7684 DOM \u6811\u4e0a\u81ea\u52a8\u52a0\u4e0a\u4e8b\u4ef6\u5904\u7406\u5668."], null)], null);
};
reagentdemo.intro.bmi_demo = function bmi_demo() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "\u96c6\u5408\u5230\u4e00\u8d77"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u8fd9\u662f\u4e00\u4e2a\u7a0d\u5fae\u4e0d\u90a3\u4e48\u4eba\u4e3a\u8bbe\u8ba1\u7684\u4f8b\u5b50: \u7b80\u5355\u7684 BMI \u8ba1\u7b97\u5668."], 
  null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "\u6570\u636e\u50a8\u5b58\u5728\u5355\u4e2a ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "reagent.core/atom"], null), ": \u4e00\u4e2a map,\n   \u5305\u542b height, weight \u548c BMI \u4f5c\u4e3a key."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), reagentdemo.intro.bmi_component, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.intro.src_for.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "bmi-data", "bmi-data", 370723531), new cljs.core.Keyword(null, "calc-bmi", 
  "calc-bmi", -378373501), new cljs.core.Keyword(null, "slider", "slider", -472668865), new cljs.core.Keyword(null, "bmi-component", "bmi-component", -916423875)], null))], null)], null)], null);
};
reagentdemo.intro.complete_simple_demo = function complete_simple_demo() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "Complete demo"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Reagent \u9879\u76ee\u5305\u542b\u51e0\u4e2a\u5b8c\u6574\u7684\u4f8b\u5b50, \u5305\u62ec\n   Leiningen \u9879\u76ee\u6587\u4ef6\u548c\u5168\u90e8\u4ee3\u7801. \u8fd9\u662f\u5176\u4e2d\u7684\u4e00\u4e2a:"], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), simpleexample.simple_example, new cljs.core.Keyword(null, "complete", "complete", -500388775), true, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.common.syntaxify.call(null, '\n(ns simpleexample\n  (:require [reagent.core :as reagent :refer [atom]]))\n\n(def timer (atom (js/Date.)))\n(def time-color (atom "#f34"))\n\n(defn update-time [time]\n  ;; Update the time every 1/10 second to be accurate...\n  (js/setTimeout #(reset! time (js/Date.)) 100))\n\n(defn greeting [message]\n  [:h1 message])\n\n(defn clock []\n  (update-time timer)\n  (let [time-str (-\x3e @timer .toTimeString (clojure.string/split " ") first)]\n    [:div.example-clock\n     {:style {:color @time-color}}\n     time-str]))\n\n(defn color-input []\n  [:div.color-input\n   "Time color: "\n   [:input {:type "text"\n            :value @time-color\n            :on-change #(reset! time-color (-\x3e % .-target .-value))}]])\n\n(defn simple-example []\n  [:div\n   [greeting "Hello world, it is now"]\n   [clock]\n   [color-input]])\n\n(defn ^:export run []\n  (reagent/render-component (fn [] [simple-example])\n                            (.-body js/document)))\n')], 
  null)], null)], null);
};
reagentdemo.intro.todomvc_demo = function todomvc_demo() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "Todomvc"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Todolist \u662f MVC \u65b9\u6848\u5fc5\u987b\u6709\u7684\u4f8b\u5b50,\n   Reagent \u91cc\u7684\u5927\u81f4\u4e0a\u662f\u8fd9\u6837(\u7b97\u662f\u6709\u70b9\u4f5c\u5f0a, \u8df3\u8fc7\u4e86\u8def\u7531\u548c\u6570\u636e\u6301\u4e45\u5316):"], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), todomvc.todo_app, new cljs.core.Keyword(null, "complete", "complete", -500388775), true, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.common.syntaxify.call(null, '\n(ns todomvc\n  (:require [reagent.core :as reagent :refer [atom]]))\n\n(def todos (atom (sorted-map)))\n\n(def counter (atom 0))\n\n(defn add-todo [text]\n  (let [id (swap! counter inc)]\n    (swap! todos assoc id {:id id :title text :done false})))\n\n(defn toggle [id] (swap! todos update-in [id :done] not))\n(defn save [id title] (swap! todos assoc-in [id :title] title))\n(defn delete [id] (swap! todos dissoc id))\n\n(defn mmap [m f a] (-\x3e\x3e m (f a) (into (empty m))))\n(defn complete-all [v] (swap! todos mmap map #(assoc-in % [1 :done] v)))\n(defn clear-done [] (swap! todos mmap remove #(get-in % [1 :done])))\n\n(add-todo "Rename Cloact to Reagent")\n(add-todo "Add undo demo")\n(add-todo "Make all rendering async")\n(add-todo "Allow any arguments to component functions")\n(complete-all true)\n\n(defn todo-input [{:keys [title on-save on-stop]}]\n  (let [val (atom title)\n        stop #(do (reset! val "")\n                  (if on-stop (on-stop)))\n        save #(let [v (-\x3e @val str clojure.string/trim)]\n                (if-not (empty? v) (on-save v))\n                (stop))]\n    (fn [props]\n      [:input (merge props\n                     {:type "text" :value @val :on-blur save\n                      :on-change #(reset! val (-\x3e % .-target .-value))\n                      :on-key-up #(case (.-which %)\n                                    13 (save)\n                                    27 (stop)\n                                    nil)})])))\n\n(def todo-edit (with-meta todo-input\n                 {:component-did-mount #(.focus (reagent/dom-node %))}))\n\n(defn todo-stats [{:keys [filt active done]}]\n  (let [props-for (fn [name]\n                    {:class (if (\x3d name @filt) "selected")\n                     :on-click #(reset! filt name)})]\n    [:div\n     [:span#todo-count\n      [:strong active] " " (case active 1 "item" "items") " left"]\n     [:ul#filters\n      [:li [:a (props-for :all) "All"]]\n      [:li [:a (props-for :active) "Active"]]\n      [:li [:a (props-for :done) "Completed"]]]\n     (when (pos? done)\n       [:button#clear-completed {:on-click clear-done}\n        "Clear completed " done])]))\n\n(defn todo-item []\n  (let [editing (atom false)]\n    (fn [{:keys [id done title]}]\n      [:li {:class (str (if done "completed ")\n                        (if @editing "editing"))}\n       [:div.view\n        [:input.toggle {:type "checkbox" :checked done\n                        :on-change #(toggle id)}]\n        [:label {:on-double-click #(reset! editing true)} title]\n        [:button.destroy {:on-click #(delete id)}]]\n       (when @editing\n         [todo-edit {:class "edit" :title title\n                     :on-save #(save id %)\n                     :on-stop #(reset! editing false)}])])))\n\n(defn todo-app [props]\n  (let [filt (atom :all)]\n    (fn []\n      (let [items (vals @todos)\n            done (-\x3e\x3e items (filter :done) count)\n            active (- (count items) done)]\n        [:div\n         [:section#todoapp\n          [:header#header\n           [:h1 "todos"]\n           [todo-input {:id "new-todo"\n                        :placeholder "What needs to be done?"\n                        :on-save add-todo}]]\n          (when (-\x3e items count pos?)\n            [:div\n             [:section#main\n              [:input#toggle-all {:type "checkbox" :checked (zero? active)\n                                  :on-change #(complete-all (pos? active))}]\n              [:label {:for "toggle-all"} "Mark all as complete"]\n              [:ul#todo-list\n               (for [todo (filter (case @filt\n                                    :active (complement :done)\n                                    :done :done\n                                    :all identity) items)]\n                 ^{:key (:id todo)} [todo-item todo])]]\n             [:footer#footer\n              [todo-stats {:active active :done done :filt filt}]]])]\n         [:footer#info\n          [:p "Double-click to edit a todo"]]]))))\n\n(defn ^:export run []\n  (reagent/render-component [todo-app] (.-body js/document)))\n')], 
  null)], null)], null);
};
reagentdemo.intro.main = function main() {
  var show_all = reagent.core.atom.call(null, false);
  var head = "Reagent: \u7ed9 ClojureScript \u7684\u6781\u7b80\u7684 React";
  setTimeout(function(show_all, head) {
    return function() {
      return cljs.core.reset_BANG_.call(null, show_all, true);
    };
  }(show_all, head), 500);
  return function(show_all, head) {
    return function() {
      return new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.reagent-demo", "div.reagent-demo", -2027348807), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.title, head], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), head], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
      [reagentdemo.intro.intro], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.managing_state], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.essential_api], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.bmi_demo], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.performance], 
      null), cljs.core.truth_(cljs.core.deref.call(null, show_all)) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.complete_simple_demo], null) : null, cljs.core.truth_(cljs.core.deref.call(null, show_all)) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.intro.todomvc_demo], null) : null], null);
    };
  }(show_all, head);
};
goog.provide("geometry.components");
goog.require("cljs.core");
goog.require("geometry.geometry");
goog.require("goog.events.EventType");
goog.require("geometry.geometry");
goog.require("geometry.geometry");
goog.require("goog.events");
goog.require("goog.events");
goog.require("reagent.core");
goog.require("reagent.core");
geometry.components.point_defaults = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "stroke", "stroke", 1741823555), "black", new cljs.core.Keyword(null, "stroke-width", "stroke-width", 716836435), 2, new cljs.core.Keyword(null, "fill", "fill", 883462889), "blue", new cljs.core.Keyword(null, "r", "r", -471384190), 5], null);
geometry.components.segment_defaults = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "stroke", "stroke", 1741823555), "black", new cljs.core.Keyword(null, "stroke-width", "stroke-width", 716836435), 2], null);
geometry.components.circle_defaults = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "fill", "fill", 883462889), "rgba(255,0,0,0.1)", new cljs.core.Keyword(null, "stroke", "stroke", 1741823555), "black", new cljs.core.Keyword(null, "stroke-width", "stroke-width", 716836435), 2], null);
geometry.components.drag_move_fn = function drag_move_fn(on_drag) {
  return function(evt) {
    return on_drag.call(null, evt.clientX, evt.clientY);
  };
};
geometry.components.drag_end_fn = function drag_end_fn(drag_move, drag_end) {
  return function(evt) {
    goog.events.unlisten(window, goog.events.EventType.MOUSEMOVE, drag_move);
    return goog.events.unlisten(window, goog.events.EventType.MOUSEUP, cljs.core.deref.call(null, drag_end));
  };
};
geometry.components.dragging = function dragging(on_drag) {
  var drag_move = geometry.components.drag_move_fn.call(null, on_drag);
  var drag_end_atom = cljs.core.atom.call(null, null);
  var drag_end = geometry.components.drag_end_fn.call(null, drag_move, drag_end_atom);
  cljs.core.reset_BANG_.call(null, drag_end_atom, drag_end);
  goog.events.listen(window, goog.events.EventType.MOUSEMOVE, drag_move);
  return goog.events.listen(window, goog.events.EventType.MOUSEUP, drag_end);
};
geometry.components.point = function point(p__5827, p) {
  var map__5829 = p__5827;
  var map__5829__$1 = cljs.core.seq_QMARK_.call(null, map__5829) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5829) : map__5829;
  var on_drag = cljs.core.get.call(null, map__5829__$1, new cljs.core.Keyword(null, "on-drag", "on-drag", -69159091));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "circle", "circle", 1903212362), cljs.core.merge.call(null, geometry.components.point_defaults, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "on-mouse-down", "on-mouse-down", 1147755470), function(map__5829, map__5829__$1, on_drag) {
    return function() {
      return geometry.components.dragging.call(null, on_drag);
    };
  }(map__5829, map__5829__$1, on_drag), new cljs.core.Keyword(null, "cx", "cx", 1272694324), geometry.geometry.x.call(null, p), new cljs.core.Keyword(null, "cy", "cy", 755331060), geometry.geometry.y.call(null, p)], null))], null);
};
geometry.components.segment = function segment(from, to) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "line", "line", 212345235), cljs.core.merge.call(null, geometry.components.segment_defaults, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "x1", "x1", -1863922247), geometry.geometry.x.call(null, from), new cljs.core.Keyword(null, "y1", "y1", 589123466), geometry.geometry.y.call(null, from), new cljs.core.Keyword(null, "x2", "x2", -1362513475), geometry.geometry.x.call(null, 
  to), new cljs.core.Keyword(null, "y2", "y2", -718691301), geometry.geometry.y.call(null, to)], null))], null);
};
geometry.components.triangle = function triangle(a, b, c) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "g", "g", 1738089905), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.segment, a, b], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.segment, b, c], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.segment, 
  c, a], null)], null);
};
geometry.components.circle = function circle(c, r) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "circle", "circle", 1903212362), cljs.core.merge.call(null, geometry.components.circle_defaults, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "cx", "cx", 1272694324), geometry.geometry.x.call(null, c), new cljs.core.Keyword(null, "cy", "cy", 755331060), geometry.geometry.y.call(null, c), new cljs.core.Keyword(null, "r", "r", -471384190), geometry.geometry.dist.call(null, 
  c, r)], null))], null);
};
goog.provide("geometry.core");
goog.require("cljs.core");
goog.require("geometry.geometry");
goog.require("geometry.geometry");
goog.require("geometry.components");
goog.require("geometry.components");
goog.require("reagent.core");
goog.require("reagent.core");
cljs.core.enable_console_print_BANG_.call(null);
geometry.core.points = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "p1", "p1", -936759954), geometry.geometry.point.call(null, 100, 100), new cljs.core.Keyword(null, "p2", "p2", 905500641), geometry.geometry.point.call(null, 200, 200), new cljs.core.Keyword(null, "p3", "p3", 1731040739), geometry.geometry.point.call(null, 100, 200), new cljs.core.Keyword(null, "c", "c", -1763192079), geometry.geometry.point.call(null, 250, 250), new cljs.core.Keyword(null, 
"p", "p", 151049309), geometry.geometry.point.call(null, 250, 300)], null));
geometry.core.move_point = function move_point(svg_root, p) {
  return function(x, y) {
    var bcr = reagent.core.dom_node.call(null, svg_root).getBoundingClientRect();
    return cljs.core.swap_BANG_.call(null, geometry.core.points, cljs.core.assoc, p, geometry.geometry.point.call(null, x - bcr.left, y - bcr.top));
  };
};
geometry.core.root = function root(svg_root) {
  var map__5831 = cljs.core.deref.call(null, geometry.core.points);
  var map__5831__$1 = cljs.core.seq_QMARK_.call(null, map__5831) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5831) : map__5831;
  var c = cljs.core.get.call(null, map__5831__$1, new cljs.core.Keyword(null, "c", "c", -1763192079));
  var p = cljs.core.get.call(null, map__5831__$1, new cljs.core.Keyword(null, "p", "p", 151049309));
  var p3 = cljs.core.get.call(null, map__5831__$1, new cljs.core.Keyword(null, "p3", "p3", 1731040739));
  var p2 = cljs.core.get.call(null, map__5831__$1, new cljs.core.Keyword(null, "p2", "p2", 905500641));
  var p1 = cljs.core.get.call(null, map__5831__$1, new cljs.core.Keyword(null, "p1", "p1", -936759954));
  return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "g", "g", 1738089905), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.triangle, p1, p2, p3], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.circle, p, c], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.segment, 
  p, c], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.point, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-drag", "on-drag", -69159091), geometry.core.move_point.call(null, svg_root, new cljs.core.Keyword(null, "c", "c", -1763192079))], null), c], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.point, new cljs.core.PersistentArrayMap(null, 1, 
  [new cljs.core.Keyword(null, "on-drag", "on-drag", -69159091), geometry.core.move_point.call(null, svg_root, new cljs.core.Keyword(null, "p", "p", 151049309))], null), p], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.point, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-drag", "on-drag", -69159091), geometry.core.move_point.call(null, svg_root, new cljs.core.Keyword(null, "p1", "p1", -936759954))], null), 
  p1], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.point, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-drag", "on-drag", -69159091), geometry.core.move_point.call(null, svg_root, new cljs.core.Keyword(null, "p2", "p2", 905500641))], null), p2], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.components.point, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "on-drag", "on-drag", -69159091), geometry.core.move_point.call(null, svg_root, new cljs.core.Keyword(null, "p3", "p3", 1731040739))], null), p3], null)], null);
};
geometry.core.main = function main(p__5832) {
  var map__5834 = p__5832;
  var map__5834__$1 = cljs.core.seq_QMARK_.call(null, map__5834) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5834) : map__5834;
  var height = cljs.core.get.call(null, map__5834__$1, new cljs.core.Keyword(null, "height", "height", 1025178622));
  var width = cljs.core.get.call(null, map__5834__$1, new cljs.core.Keyword(null, "width", "width", -384071477));
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "svg", "svg", 856789142), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "width", "width", -384071477), function() {
    var or__3758__auto__ = width;
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      return 800;
    }
  }(), new cljs.core.Keyword(null, "height", "height", 1025178622), function() {
    var or__3758__auto__ = height;
    if (cljs.core.truth_(or__3758__auto__)) {
      return or__3758__auto__;
    } else {
      return 600;
    }
  }(), new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "border", "border", 1444987323), "1px solid black"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
  "-webkit-user-select", "-webkit-user-select", -651687510), "none", new cljs.core.Keyword(null, "-moz-user-select", "-moz-user-select", -342302744), "none"], null), new cljs.core.Keyword(null, "x", "x", 2099068185), 20, new cljs.core.Keyword(null, "y", "y", -1757859776), 20, new cljs.core.Keyword(null, "font-size", "font-size", -1847940346), 20], null), "The points are draggable"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.core.root, reagent.core.current_component.call(null)], 
  null)], null);
};
geometry.core.by_id = function by_id(id) {
  return document.getElementById(id);
};
geometry.core.run = function run() {
  return reagent.core.render_component.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.core.main], null), geometry.core.by_id.call(null, "app"));
};
goog.exportSymbol("geometry.core.run", geometry.core.run);
goog.provide("simpleexample");
goog.require("cljs.core");
goog.require("reagent.core");
goog.require("reagent.core");
goog.require("reagent.core");
simpleexample.timer = reagent.core.atom.call(null, new Date);
simpleexample.time_color = reagent.core.atom.call(null, "#f34");
simpleexample.update_time = function update_time(time) {
  return setTimeout(function() {
    return cljs.core.reset_BANG_.call(null, time, new Date);
  }, 100);
};
simpleexample.greeting = function greeting(message) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), message], null);
};
simpleexample.clock = function clock() {
  simpleexample.update_time.call(null, simpleexample.timer);
  var time_str = cljs.core.first.call(null, clojure.string.split.call(null, cljs.core.deref.call(null, simpleexample.timer).toTimeString(), " "));
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.example-clock", "div.example-clock", 1559289088), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), cljs.core.deref.call(null, simpleexample.time_color)], null)], null), time_str], null);
};
simpleexample.color_input = function color_input() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.color-input", "div.color-input", -879914246), "Time color: ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.deref.call(null, 
  simpleexample.time_color), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__5826_SHARP_) {
    return cljs.core.reset_BANG_.call(null, simpleexample.time_color, p1__5826_SHARP_.target.value);
  }], null)], null)], null);
};
simpleexample.simple_example = function simple_example() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [simpleexample.greeting, "Hello world, it is now"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [simpleexample.clock], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [simpleexample.color_input], 
  null)], null);
};
simpleexample.run = function run() {
  return reagent.core.render_component.call(null, function() {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [simpleexample.simple_example], null);
  }, document.body);
};
goog.exportSymbol("simpleexample.run", simpleexample.run);
goog.provide("todomvc");
goog.require("cljs.core");
goog.require("reagent.core");
goog.require("reagent.core");
goog.require("reagent.core");
todomvc.todos = reagent.core.atom.call(null, cljs.core.sorted_map.call(null));
todomvc.counter = reagent.core.atom.call(null, 0);
todomvc.add_todo = function add_todo(text) {
  var id = cljs.core.swap_BANG_.call(null, todomvc.counter, cljs.core.inc);
  return cljs.core.swap_BANG_.call(null, todomvc.todos, cljs.core.assoc, id, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", -1388402092), id, new cljs.core.Keyword(null, "title", "title", 636505583), text, new cljs.core.Keyword(null, "done", "done", -889844188), false], null));
};
todomvc.toggle = function toggle(id) {
  return cljs.core.swap_BANG_.call(null, todomvc.todos, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, new cljs.core.Keyword(null, "done", "done", -889844188)], null), cljs.core.not);
};
todomvc.save = function save(id, title) {
  return cljs.core.swap_BANG_.call(null, todomvc.todos, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, new cljs.core.Keyword(null, "title", "title", 636505583)], null), title);
};
todomvc.delete$ = function delete$(id) {
  return cljs.core.swap_BANG_.call(null, todomvc.todos, cljs.core.dissoc, id);
};
todomvc.mmap = function mmap(m, f, a) {
  return cljs.core.into.call(null, cljs.core.empty.call(null, m), f.call(null, a, m));
};
todomvc.complete_all = function complete_all(v) {
  return cljs.core.swap_BANG_.call(null, todomvc.todos, todomvc.mmap, cljs.core.map, function(p1__5792_SHARP_) {
    return cljs.core.assoc_in.call(null, p1__5792_SHARP_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, new cljs.core.Keyword(null, "done", "done", -889844188)], null), v);
  });
};
todomvc.clear_done = function clear_done() {
  return cljs.core.swap_BANG_.call(null, todomvc.todos, todomvc.mmap, cljs.core.remove, function(p1__5793_SHARP_) {
    return cljs.core.get_in.call(null, p1__5793_SHARP_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, new cljs.core.Keyword(null, "done", "done", -889844188)], null));
  });
};
todomvc.add_todo.call(null, "Rename Cloact to Reagent");
todomvc.add_todo.call(null, "Add undo demo");
todomvc.add_todo.call(null, "Make all rendering async");
todomvc.add_todo.call(null, "Allow any arguments to component functions");
todomvc.complete_all.call(null, true);
todomvc.todo_input = function todo_input(p__5796) {
  var map__5799 = p__5796;
  var map__5799__$1 = cljs.core.seq_QMARK_.call(null, map__5799) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5799) : map__5799;
  var on_stop = cljs.core.get.call(null, map__5799__$1, new cljs.core.Keyword(null, "on-stop", "on-stop", 1520114515));
  var on_save = cljs.core.get.call(null, map__5799__$1, new cljs.core.Keyword(null, "on-save", "on-save", 1618176266));
  var title = cljs.core.get.call(null, map__5799__$1, new cljs.core.Keyword(null, "title", "title", 636505583));
  var val = reagent.core.atom.call(null, title);
  var stop = function(val, map__5799, map__5799__$1, on_stop, on_save, title) {
    return function() {
      cljs.core.reset_BANG_.call(null, val, "");
      if (cljs.core.truth_(on_stop)) {
        return on_stop.call(null);
      } else {
        return null;
      }
    };
  }(val, map__5799, map__5799__$1, on_stop, on_save, title);
  var save = function(val, stop, map__5799, map__5799__$1, on_stop, on_save, title) {
    return function() {
      var v = clojure.string.trim.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, val)));
      if (!cljs.core.empty_QMARK_.call(null, v)) {
        on_save.call(null, v);
      } else {
      }
      return stop.call(null);
    };
  }(val, stop, map__5799, map__5799__$1, on_stop, on_save, title);
  return function(val, stop, save, map__5799, map__5799__$1, on_stop, on_save, title) {
    return function(props) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), cljs.core.merge.call(null, props, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.deref.call(null, val), new cljs.core.Keyword(null, "on-blur", "on-blur", 814300747), save, new cljs.core.Keyword(null, "on-change", "on-change", 
      -732046149), function(val, stop, save, map__5799, map__5799__$1, on_stop, on_save, title) {
        return function(p1__5794_SHARP_) {
          return cljs.core.reset_BANG_.call(null, val, p1__5794_SHARP_.target.value);
        };
      }(val, stop, save, map__5799, map__5799__$1, on_stop, on_save, title), new cljs.core.Keyword(null, "on-key-up", "on-key-up", 884441808), function(val, stop, save, map__5799, map__5799__$1, on_stop, on_save, title) {
        return function(p1__5795_SHARP_) {
          var G__5800 = p1__5795_SHARP_.which;
          switch(G__5800) {
            case 13:
              return save.call(null);
              break;
            case 27:
              return stop.call(null);
              break;
            default:
              return null;
          }
        };
      }(val, stop, save, map__5799, map__5799__$1, on_stop, on_save, title)], null))], null);
    };
  }(val, stop, save, map__5799, map__5799__$1, on_stop, on_save, title);
};
todomvc.todo_edit = cljs.core.with_meta.call(null, todomvc.todo_input, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component-did-mount", "component-did-mount", -1126910518), function(p1__5802_SHARP_) {
  return reagent.core.dom_node.call(null, p1__5802_SHARP_).focus();
}], null));
todomvc.todo_stats = function todo_stats(p__5803) {
  var map__5806 = p__5803;
  var map__5806__$1 = cljs.core.seq_QMARK_.call(null, map__5806) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5806) : map__5806;
  var done = cljs.core.get.call(null, map__5806__$1, new cljs.core.Keyword(null, "done", "done", -889844188));
  var active = cljs.core.get.call(null, map__5806__$1, new cljs.core.Keyword(null, "active", "active", 1895962068));
  var filt = cljs.core.get.call(null, map__5806__$1, new cljs.core.Keyword(null, "filt", "filt", 169229082));
  var props_for = function(map__5806, map__5806__$1, done, active, filt) {
    return function(name) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core._EQ_.call(null, name, cljs.core.deref.call(null, filt)) ? "selected" : null, new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function(map__5806, map__5806__$1, done, active, filt) {
        return function() {
          return cljs.core.reset_BANG_.call(null, filt, name);
        };
      }(map__5806, map__5806__$1, done, active, filt)], null);
    };
  }(map__5806, map__5806__$1, done, active, filt);
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span#todo-count", "span#todo-count", -1116128108), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "strong", "strong", 269529E3), active], null), " ", function() {
    var G__5807 = active;
    switch(G__5807) {
      case 1:
        return "item";
        break;
      default:
        return "items";
    }
  }(), " left"], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul#filters", "ul#filters", -899831395), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), props_for.call(null, new cljs.core.Keyword(null, "all", 
  "all", 892129742)), "All"], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), props_for.call(null, new cljs.core.Keyword(null, "active", "active", 1895962068)), "Active"], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), props_for.call(null, new cljs.core.Keyword(null, "done", "done", -889844188)), "Completed"], null)], null)], null), done > 0 ? new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button#clear-completed", "button#clear-completed", -1698725142), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), todomvc.clear_done], null), "Clear completed ", done], null) : null], null);
};
todomvc.todo_item = function todo_item() {
  var editing = reagent.core.atom.call(null, false);
  return function(editing) {
    return function(p__5812) {
      var map__5813 = p__5812;
      var map__5813__$1 = cljs.core.seq_QMARK_.call(null, map__5813) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5813) : map__5813;
      var title = cljs.core.get.call(null, map__5813__$1, new cljs.core.Keyword(null, "title", "title", 636505583));
      var done = cljs.core.get.call(null, map__5813__$1, new cljs.core.Keyword(null, "done", "done", -889844188));
      var id = cljs.core.get.call(null, map__5813__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(done) ? "completed " : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(cljs.core.deref.call(null, editing)) ? "editing" : null)], null), new cljs.core.PersistentVector(null, 
      4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.view", "div.view", -1680900976), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input.toggle", "input.toggle", -519545942), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "checkbox", new cljs.core.Keyword(null, "checked", "checked", -50955819), done, new cljs.core.Keyword(null, "on-change", "on-change", 
      -732046149), function(map__5813, map__5813__$1, title, done, id, editing) {
        return function() {
          return todomvc.toggle.call(null, id);
        };
      }(map__5813, map__5813__$1, title, done, id, editing)], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-double-click", "on-double-click", 1434856980), function(map__5813, map__5813__$1, title, done, id, editing) {
        return function() {
          return cljs.core.reset_BANG_.call(null, editing, true);
        };
      }(map__5813, map__5813__$1, title, done, id, editing)], null), title], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button.destroy", "button.destroy", 1044866871), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function(map__5813, map__5813__$1, title, done, id, editing) {
        return function() {
          return todomvc.delete$.call(null, id);
        };
      }(map__5813, map__5813__$1, title, done, id, editing)], null)], null)], null), cljs.core.truth_(cljs.core.deref.call(null, editing)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [todomvc.todo_edit, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "class", "class", -2030961996), "edit", new cljs.core.Keyword(null, "title", "title", 636505583), title, new cljs.core.Keyword(null, "on-save", "on-save", 1618176266), function(map__5813, 
      map__5813__$1, title, done, id, editing) {
        return function(p1__5809_SHARP_) {
          return todomvc.save.call(null, id, p1__5809_SHARP_);
        };
      }(map__5813, map__5813__$1, title, done, id, editing), new cljs.core.Keyword(null, "on-stop", "on-stop", 1520114515), function(map__5813, map__5813__$1, title, done, id, editing) {
        return function() {
          return cljs.core.reset_BANG_.call(null, editing, false);
        };
      }(map__5813, map__5813__$1, title, done, id, editing)], null)], null) : null], null);
    };
  }(editing);
};
todomvc.todo_app = function todo_app(props) {
  var filt = reagent.core.atom.call(null, new cljs.core.Keyword(null, "all", "all", 892129742));
  return function(filt) {
    return function() {
      var items = cljs.core.vals.call(null, cljs.core.deref.call(null, todomvc.todos));
      var done = cljs.core.count.call(null, cljs.core.filter.call(null, new cljs.core.Keyword(null, "done", "done", -889844188), items));
      var active = cljs.core.count.call(null, items) - done;
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "section#todoapp", "section#todoapp", 41606040), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "header#header", "header#header", 1650878621), new cljs.core.PersistentVector(null, 
      2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), "todos"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [todomvc.todo_input, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", -1388402092), "new-todo", new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), "What needs to be done?", new cljs.core.Keyword(null, "on-save", "on-save", 1618176266), todomvc.add_todo], 
      null)], null)], null), cljs.core.count.call(null, items) > 0 ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "section#main", "section#main", 559170339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input#toggle-all", "input#toggle-all", 
      -512330812), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "checkbox", new cljs.core.Keyword(null, "checked", "checked", -50955819), active === 0, new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(items, done, active, filt) {
        return function() {
          return todomvc.complete_all.call(null, active > 0);
        };
      }(items, done, active, filt)], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "for", "for", -1323786319), "toggle-all"], null), "Mark all as complete"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul#todo-list", "ul#todo-list", -1648361723), 
      function() {
        var iter__4496__auto__ = function(items, done, active, filt) {
          return function iter__5819(s__5820) {
            return new cljs.core.LazySeq(null, function(items, done, active, filt) {
              return function() {
                var s__5820__$1 = s__5820;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__5820__$1);
                  if (temp__4126__auto__) {
                    var s__5820__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__5820__$2)) {
                      var c__4494__auto__ = cljs.core.chunk_first.call(null, s__5820__$2);
                      var size__4495__auto__ = cljs.core.count.call(null, c__4494__auto__);
                      var b__5822 = cljs.core.chunk_buffer.call(null, size__4495__auto__);
                      if (function() {
                        var i__5821 = 0;
                        while (true) {
                          if (i__5821 < size__4495__auto__) {
                            var todo = cljs.core._nth.call(null, c__4494__auto__, i__5821);
                            cljs.core.chunk_append.call(null, b__5822, cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [todomvc.todo_item, todo], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(todo)], null)));
                            var G__5824 = i__5821 + 1;
                            i__5821 = G__5824;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5822), iter__5819.call(null, cljs.core.chunk_rest.call(null, s__5820__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5822), null);
                      }
                    } else {
                      var todo = cljs.core.first.call(null, s__5820__$2);
                      return cljs.core.cons.call(null, cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [todomvc.todo_item, todo], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(todo)], null)), iter__5819.call(null, cljs.core.rest.call(null, s__5820__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(items, done, active, filt), null, null);
          };
        }(items, done, active, filt);
        return iter__4496__auto__.call(null, cljs.core.filter.call(null, function() {
          var G__5823 = cljs.core.deref.call(null, filt) instanceof cljs.core.Keyword ? cljs.core.deref.call(null, filt).fqn : null;
          switch(G__5823) {
            case "all":
              return cljs.core.identity;
              break;
            case "done":
              return new cljs.core.Keyword(null, "done", "done", -889844188);
              break;
            case "active":
              return cljs.core.complement.call(null, new cljs.core.Keyword(null, "done", "done", -889844188));
              break;
            default:
              throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, filt)));;
          }
        }(), items));
      }()], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "footer#footer", "footer#footer", -1164052935), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [todomvc.todo_stats, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "active", "active", 1895962068), active, new cljs.core.Keyword(null, "done", "done", -889844188), done, new cljs.core.Keyword(null, "filt", "filt", 
      169229082), filt], null)], null)], null)], null) : null], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "footer#info", "footer#info", 1634811413), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Double-click to edit a todo"], null)], null)], null);
    };
  }(filt);
};
todomvc.run = function run() {
  return reagent.core.render_component.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [todomvc.todo_app], null), document.body);
};
goog.exportSymbol("todomvc.run", todomvc.run);
goog.provide("reagentdemo.news.undodemo");
goog.require("cljs.core");
goog.require("reagentdemo.page");
goog.require("reagentdemo.common");
goog.require("reagent.core");
goog.require("todomvc");
goog.require("reagentdemo.common");
goog.require("reagentdemo.common");
goog.require("reagentdemo.page");
goog.require("reagentdemo.syntax");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.core");
goog.require("reagent.core");
reagentdemo.news.undodemo.funmap = reagentdemo.common.fun_map.call(null, '(ns reagentdemo.news.undodemo\n  (:require [reagent.core :as reagent :refer [atom]]\n            [reagent.interop :refer-macros [.\' .! fvar]]\n            [reagent.debug :refer-macros [dbg println]]\n            [reagentdemo.syntax :refer-macros [get-source]]\n            [reagentdemo.page :refer [title link page-map]]\n            [reagentdemo.common :as common :refer [demo-component]]\n            [todomvc :as todomvc]))\n\n(def funmap (-\x3e ::this get-source common/fun-map))\n(def src-for (partial common/src-for funmap))\n\n(def state todomvc/todos)\n\n(def undo-list (atom nil))\n\n(defn undo []\n  (let [undos @undo-list]\n    (when-let [old (first undos)]\n      (reset! state old)\n      (reset! undo-list (rest undos)))))\n\n(defn undo-button []\n  (let [n (count @undo-list)]\n    [:input {:type "button" :on-click undo\n             :disabled (zero? n)\n             :value (str "Undo (" n ")")}]))\n\n(defn todomvc-with-undo []\n  (add-watch state ::undo-watcher\n             (fn [_ _ old-state _]\n               (swap! undo-list conj old-state)))\n  [:div\n   [undo-button]\n   [todomvc/todo-app]])\n\n(defn undo-demo []\n  [demo-component {:comp todomvc-with-undo\n                   :src (src-for [:state :undo-list :undo :save-state\n                                  :undo-button :todomvc-with-undo])}])\n\n(def undo-demo-cleanup\n  (with-meta undo-demo {:component-will-unmount\n                        (fn []\n                          (reset! undo-list nil)\n                          (remove-watch state ::undo-watcher))}))\n\n(defn main [{:keys [summary]}]\n  (let [head "Cloact becomes Reagent: Undo is trivial"]\n    [:div.reagent-demo\n     [:h1 [link {:href (fvar main)} head]]\n     [title head]\n     [:div.demo-text\n      [:h2 "(reset! cloact-name \\"Reagent\\")"]\n\n      [:p "It turns out that \u201dCloact\u201d was a really, really bad\n      name. It made some people think about birds\u2019 behinds, in\n      possibly unhealthy ways, which even Google suggested they\n      should."]\n\n      [:p "The new name is " [:strong "Reagent"] ", which hopefully\n      doesn\u2019t bring with it the same disgusting connotations."]\n\n      [:p "The API is otherwise unchanged, so a simple\n      search-and-replace should suffice."]\n\n      (if summary\n        [link {:href (fvar main)\n               :class \'news-read-more} "Read more"]\n        [:div.demo-text\n\n         [:h2 "Undo the easy way"]\n\n         [:p "To celebrate the undoing of the apparently disgusting\n         name, here is an example of how easy it is to add undo\n         functionality to Reagent components."]\n\n         [:p "It simply saves the old state whenever it changes, and\n         restores it when the button is clicked."]\n\n         [:p "The really nice thing about ClojureScript is that not\n         only is this easy and safe to do, courtesy of immutable data\n         structures, it is also efficient. ClojureScript figures out\n         how to represent \u201dchanges\u201d to maps and vectors efficiently,\n         so that you won\u2019t have to."]\n\n         [undo-demo-cleanup]])]]))\n\n(swap! page-map assoc\n       "news/cloact-reagent-undo-demo.html" (fvar main))\n');
reagentdemo.news.undodemo.src_for = cljs.core.partial.call(null, reagentdemo.common.src_for, reagentdemo.news.undodemo.funmap);
reagentdemo.news.undodemo.state = todomvc.todos;
reagentdemo.news.undodemo.undo_list = reagent.core.atom.call(null, null);
reagentdemo.news.undodemo.undo = function undo() {
  var undos = cljs.core.deref.call(null, reagentdemo.news.undodemo.undo_list);
  var temp__4126__auto__ = cljs.core.first.call(null, undos);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var old = temp__4126__auto__;
    cljs.core.reset_BANG_.call(null, reagentdemo.news.undodemo.state, old);
    return cljs.core.reset_BANG_.call(null, reagentdemo.news.undodemo.undo_list, cljs.core.rest.call(null, undos));
  } else {
    return null;
  }
};
reagentdemo.news.undodemo.undo_button = function undo_button() {
  var n = cljs.core.count.call(null, cljs.core.deref.call(null, reagentdemo.news.undodemo.undo_list));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), "button", new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), reagentdemo.news.undodemo.undo, new cljs.core.Keyword(null, "disabled", "disabled", -1529784218), n === 0, new cljs.core.Keyword(null, "value", "value", 305978217), "Undo (" + 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + ")"], null)], null);
};
reagentdemo.news.undodemo.todomvc_with_undo = function todomvc_with_undo() {
  cljs.core.add_watch.call(null, reagentdemo.news.undodemo.state, new cljs.core.Keyword("reagentdemo.news.undodemo", "undo-watcher", "reagentdemo.news.undodemo/undo-watcher", -1793759515), function(_, ___$1, old_state, ___$2) {
    return cljs.core.swap_BANG_.call(null, reagentdemo.news.undodemo.undo_list, cljs.core.conj, old_state);
  });
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.undodemo.undo_button], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [todomvc.todo_app], null)], null);
};
reagentdemo.news.undodemo.undo_demo = function undo_demo() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), reagentdemo.news.undodemo.todomvc_with_undo, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.news.undodemo.src_for.call(null, new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state", "state", 
  -1988618099), new cljs.core.Keyword(null, "undo-list", "undo-list", 1944773622), new cljs.core.Keyword(null, "undo", "undo", -1818036302), new cljs.core.Keyword(null, "save-state", "save-state", -1689196426), new cljs.core.Keyword(null, "undo-button", "undo-button", -543825682), new cljs.core.Keyword(null, "todomvc-with-undo", "todomvc-with-undo", -41768108)], null))], null)], null);
};
reagentdemo.news.undodemo.undo_demo_cleanup = cljs.core.with_meta.call(null, reagentdemo.news.undodemo.undo_demo, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), function() {
  cljs.core.reset_BANG_.call(null, reagentdemo.news.undodemo.undo_list, null);
  return cljs.core.remove_watch.call(null, reagentdemo.news.undodemo.state, new cljs.core.Keyword("reagentdemo.news.undodemo", "undo-watcher", "reagentdemo.news.undodemo/undo-watcher", -1793759515));
}], null));
reagentdemo.news.undodemo.main = function main(p__5733) {
  var map__5737 = p__5733;
  var map__5737__$1 = cljs.core.seq_QMARK_.call(null, map__5737) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5737) : map__5737;
  var summary = cljs.core.get.call(null, map__5737__$1, new cljs.core.Keyword(null, "summary", "summary", 380847952));
  var head = "Cloact becomes Reagent: Undo is trivial";
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.reagent-demo", "div.reagent-demo", -2027348807), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", 
  -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.undodemo/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
      }
      var old__3529__auto__ = main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5738 = function(old__3529__auto__, f__3528__auto__, head, map__5737, map__5737__$1, summary) {
          return function() {
            return main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, head, map__5737, map__5737__$1, summary);
        G__5738["name"] = main.name;
        G__5738["fvar"] = true;
        return G__5738;
      }();
      main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.undodemo/main"] = v__3530__auto__;
    }
  }()], null), head], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.title, head], null), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), '(reset! cloact-name "Reagent")'], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "It turns out that \u201dCloact\u201d was a really, really bad\n      name. It made some people think about birds\u2019 behinds, in\n      possibly unhealthy ways, which even Google suggested they\n      should."], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "The new name is ", new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "strong", "strong", 269529E3), "Reagent"], null), ", which hopefully\n      doesn\u2019t bring with it the same disgusting connotations."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "The API is otherwise unchanged, so a simple\n      search-and-replace should suffice."], null), cljs.core.truth_(summary) ? new cljs.core.PersistentVector(null, 
  3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.undodemo/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
      }
      var old__3529__auto__ = main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5739 = function(old__3529__auto__, f__3528__auto__, head, map__5737, map__5737__$1, summary) {
          return function() {
            return main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, head, map__5737, map__5737__$1, summary);
        G__5739["name"] = main.name;
        G__5739["fvar"] = true;
        return G__5739;
      }();
      main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.undodemo/main"] = v__3530__auto__;
    }
  }(), new cljs.core.Keyword(null, "class", "class", -2030961996), new cljs.core.Symbol(null, "news-read-more", "news-read-more", 150793143, null)], null), "Read more"], null) : new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "Undo the easy way"], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "To celebrate the undoing of the apparently disgusting\n         name, here is an example of how easy it is to add undo\n         functionality to Reagent components."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "It simply saves the old state whenever it changes, and\n         restores it when the button is clicked."], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "The really nice thing about ClojureScript is that not\n         only is this easy and safe to do, courtesy of immutable data\n         structures, it is also efficient. ClojureScript figures out\n         how to represent \u201dchanges\u201d to maps and vectors efficiently,\n         so that you won\u2019t have to."], null), new cljs.core.PersistentVector(null, 
  1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.undodemo.undo_demo_cleanup], null)], null)], null)], null);
};
cljs.core.swap_BANG_.call(null, reagentdemo.page.page_map, cljs.core.assoc, "news/cloact-reagent-undo-demo.html", function() {
  var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.undodemo/main"];
  if (!(f__3528__auto__ == null)) {
    return f__3528__auto__;
  } else {
    if (!(reagentdemo.news.undodemo.main == null)) {
    } else {
      throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
    }
    var old__3529__auto__ = reagentdemo.news.undodemo.main["-fvar"];
    var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
      var G__5740 = function(old__3529__auto__, f__3528__auto__) {
        return function() {
          return reagentdemo.news.undodemo.main.apply(null, arguments);
        };
      }(old__3529__auto__, f__3528__auto__);
      G__5740["name"] = reagentdemo.news.undodemo.main.name;
      G__5740["fvar"] = true;
      return G__5740;
    }();
    reagentdemo.news.undodemo.main["-fvar"] = v__3530__auto__;
    return reagent.interop.fvars["reagentdemo.news.undodemo/main"] = v__3530__auto__;
  }
}());
goog.provide("reagentdemo.news.anyargs");
goog.require("cljs.core");
goog.require("reagentdemo.page");
goog.require("reagentdemo.common");
goog.require("reagent.core");
goog.require("reagent.interop");
goog.require("geometry.core");
goog.require("reagentdemo.syntax");
goog.require("reagent.core");
goog.require("reagent.core");
goog.require("reagentdemo.page");
goog.require("geometry.core");
goog.require("reagentdemo.common");
goog.require("reagent.debug");
goog.require("reagentdemo.common");
reagentdemo.news.anyargs.funmap = reagentdemo.common.fun_map.call(null, '(ns reagentdemo.news.anyargs\n  (:require [reagent.core :as r :refer [atom]]\n            [reagent.interop :refer-macros [.\' .! fvar]]\n            [reagent.debug :refer-macros [dbg println]]\n            [reagentdemo.syntax :refer-macros [get-source]]\n            [reagentdemo.page :refer [title link page-map]]\n            [reagentdemo.common :as common :refer [demo-component]]\n            [geometry.core :as geometry]))\n\n(def funmap (-\x3e ::this get-source common/fun-map))\n(def src-for (partial common/src-for funmap))\n\n(defn hello-component [name]\n  [:p "Hello, " name "!"])\n\n(defn say-hello []\n  [hello-component "world"])\n\n(defn geometry-example []\n  [geometry/main {:width "100%" :height 500}])\n\n(defn my-div []\n  (let [this (r/current-component)]\n    (into [:div.custom (r/props this)]\n          (r/children this))))\n\n(defn call-my-div []\n  [:div\n   [my-div "Some text."]\n   [my-div {:style {:font-weight \'bold}}\n    [:p "Some other text in bold."]]])\n\n(defn main [{:keys [summary]}]\n  (let [head "All arguments allowed"\n        geometry {:href "https://github.com/holmsand/reagent/tree/master/examples/geometry"}\n        jonase {:href "https://github.com/jonase"}]\n    [:div.reagent-demo\n     [:h1 [link {:href (fvar main)} head]]\n     [title (str "Reagent 0.4.0: " head)]\n     [:div.demo-text\n\n      [:h2 "If it looks like a function\u2026"]\n\n      [:p "Calling a component in Reagent looks a lot like a function\n      call. Now it also " [:em "works"] " like one."]\n\n      [:p "Before 0.4.0, component functions were always called with\n      three arguments: a map of attributes, a vector of \u201dchildren\u201d,\n      and the current React component."]\n\n      [:p "This was confusing, and an unnecessary limitation, so now\n      component functions get exactly the same arguments you pass to\n      them."]\n\n      (if summary\n        [link {:href (fvar main)\n               :class \'news-read-more} "Read more"]\n        [:div.demo-text\n         [:p "In other words, you can now do this:"]\n\n         [demo-component {:comp (fvar say-hello)\n                          :src (src-for [:hello-component :say-hello])}]\n\n         [:p "In the above example, it wouldn\u2019t make any difference at\n          all if " [:code "hello-component"] " had been called as a\n          function, i.e with parentheses instead of brackets (except\n          for performance, since components are cached between renders\n          if the arguments to them don\u2019t change)."]\n\n         [:p "But there is one drawback: component function no longer\n          receives the \u201dcurrent component\u201d as a parameter. Instead\n          you\u2019ll have to use "\n          [:code "reagent.core/current-component"]\n          " in order to get that. Beware that "\n          [:code "current-component"] " is only valid in component\n          functions, and must be called outside of e.g event handlers\n          and " [:code "for"] " expressions, so it\u2019s safest to always\n          put the call at the top, as in " [:code "my-div"] " here:"]\n\n         [demo-component {:comp (fvar call-my-div)\n                          :src (src-for [:nsr :my-div :call-my-div])}]\n\n         [:p [:em "Note: "] [:code "r/props"] " and "\n         [:code "r/children"] " correspond to React\u2019s "\n         [:code "this.props"] " and " [:code "this.props.children"] ",\n         respectively. They may be convenient to use when wrapping\n         native React components, since they follow the same\n         conventions when interpreting the arguments given."]\n\n         [:h2 "Other news in 0.4.0"]\n\n         [:ul\n\n          [:li "React has been updated to version 0.9.0."]\n\n          [:li "You can now use any object that satisfies "\n           [:code "ifn?"] " as a component function, and not just\n           plain functions. That includes functions defined with "\n           [:code "deftype"] ", " [:code "defrecord"] ", etc, as well\n           as collections like maps."]\n\n          [:li\n           [:code "reagent.core/set-state"] " and "\n           [:code "reagent.core/replace-state"] " are now implemented\n           using an " [:code "reagent.core/atom"] ", and are\n           consequently async."]\n\n          [:li "Keys associated with items in a seq (e.g \u201ddynamic\n           children\u201d in React parlance) can now be specified with\n           meta-data, as well as with a " [:code ":key"] " item in the\n           first parameter as before. In other words, these two forms\n           are now equivalent: " [:code "^{:key foo} [:li bar]"] "\n           and " [:code "[:li {:key foo} bar]"] "."]\n\n          [:li "Performance has been improved even further. For\n           example, there is now practically no overhead for\n           tracking derefs in components that don\u2019t use "\n           [:code "atom"] "s. Allocations and memory use have also\n           been reduced."]\n\n          [:li "Intro and examples have been tweaked a little to take\n          advantage of the new calling conventions."]]\n\n         [:h2 "New svg example"]\n\n         [:p "There is also a new, elegant and simple "\n          [:a geometry "example"] " of using svg with Reagent, written\n          by " [:a jonase "Jonas Enlund"] ". It also shows how you can\n          use Reagent\u2019s new calling convensions, and looks like\n          this:"]\n\n         [demo-component {:comp (fvar geometry-example)}]])]]))\n\n(swap! page-map assoc\n       "news/any-arguments.html" (fvar main))\n');
reagentdemo.news.anyargs.src_for = cljs.core.partial.call(null, reagentdemo.common.src_for, reagentdemo.news.anyargs.funmap);
reagentdemo.news.anyargs.hello_component = function hello_component(name) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Hello, ", name, "!"], null);
};
reagentdemo.news.anyargs.say_hello = function say_hello() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.anyargs.hello_component, "world"], null);
};
reagentdemo.news.anyargs.geometry_example = function geometry_example() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [geometry.core.main, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "width", "width", -384071477), "100%", new cljs.core.Keyword(null, "height", "height", 1025178622), 500], null)], null);
};
reagentdemo.news.anyargs.my_div = function my_div() {
  var this$ = reagent.core.current_component.call(null);
  return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.custom", "div.custom", 1900136768), reagent.core.props.call(null, this$)], null), reagent.core.children.call(null, this$));
};
reagentdemo.news.anyargs.call_my_div = function call_my_div() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.anyargs.my_div, "Some text."], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.anyargs.my_div, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), 
  new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "font-weight", "font-weight", 2085804583), new cljs.core.Symbol(null, "bold", "bold", 1523721992, null)], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Some other text in bold."], null)], null)], null);
};
reagentdemo.news.anyargs.main = function main(p__5690) {
  var map__5697 = p__5690;
  var map__5697__$1 = cljs.core.seq_QMARK_.call(null, map__5697) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5697) : map__5697;
  var summary = cljs.core.get.call(null, map__5697__$1, new cljs.core.Keyword(null, "summary", "summary", 380847952));
  var head = "All arguments allowed";
  var geometry__$1 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "https://github.com/holmsand/reagent/tree/master/examples/geometry"], null);
  var jonase = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "https://github.com/jonase"], null);
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.reagent-demo", "div.reagent-demo", -2027348807), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", 
  -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.anyargs/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
      }
      var old__3529__auto__ = main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5698 = function(old__3529__auto__, f__3528__auto__, head, geometry__$1, jonase, map__5697, map__5697__$1, summary) {
          return function() {
            return main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, head, geometry__$1, jonase, map__5697, map__5697__$1, summary);
        G__5698["name"] = main.name;
        G__5698["fvar"] = true;
        return G__5698;
      }();
      main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.anyargs/main"] = v__3530__auto__;
    }
  }()], null), head], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.title, "Reagent 0.4.0: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(head)], null), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", 
  -372662728), "If it looks like a function\u2026"], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Calling a component in Reagent looks a lot like a function\n      call. Now it also ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "em", "em", 707813035), "works"], null), " like one."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "p", "p", 151049309), "Before 0.4.0, component functions were always called with\n      three arguments: a map of attributes, a vector of \u201dchildren\u201d,\n      and the current React component."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "This was confusing, and an unnecessary limitation, so now\n      component functions get exactly the same arguments you pass to\n      them."], 
  null), cljs.core.truth_(summary) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.anyargs/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
      }
      var old__3529__auto__ = main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5699 = function(old__3529__auto__, f__3528__auto__, head, geometry__$1, jonase, map__5697, map__5697__$1, summary) {
          return function() {
            return main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, head, geometry__$1, jonase, map__5697, map__5697__$1, summary);
        G__5699["name"] = main.name;
        G__5699["fvar"] = true;
        return G__5699;
      }();
      main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.anyargs/main"] = v__3530__auto__;
    }
  }(), new cljs.core.Keyword(null, "class", "class", -2030961996), new cljs.core.Symbol(null, "news-read-more", "news-read-more", 150793143, null)], null), "Read more"], null) : new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "In other words, you can now do this:"], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.anyargs/say-hello"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(reagentdemo.news.anyargs.say_hello == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: say-hello\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "say-hello", "say-hello", 213471454, null))))));
      }
      var old__3529__auto__ = reagentdemo.news.anyargs.say_hello["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5700 = function(old__3529__auto__, f__3528__auto__, head, geometry__$1, jonase, map__5697, map__5697__$1, summary) {
          return function() {
            return reagentdemo.news.anyargs.say_hello.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, head, geometry__$1, jonase, map__5697, map__5697__$1, summary);
        G__5700["name"] = reagentdemo.news.anyargs.say_hello.name;
        G__5700["fvar"] = true;
        return G__5700;
      }();
      reagentdemo.news.anyargs.say_hello["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.anyargs/say-hello"] = v__3530__auto__;
    }
  }(), new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.news.anyargs.src_for.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "hello-component", "hello-component", -14597636), new cljs.core.Keyword(null, "say-hello", "say-hello", -1427060073)], null))], null)], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "In the above example, it wouldn\u2019t make any difference at\n          all if ", 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "hello-component"], null), " had been called as a\n          function, i.e with parentheses instead of brackets (except\n          for performance, since components are cached between renders\n          if the arguments to them don\u2019t change)."], null), new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "p", "p", 151049309), "But there is one drawback: component function no longer\n          receives the \u201dcurrent component\u201d as a parameter. Instead\n          you\u2019ll have to use ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "reagent.core/current-component"], null), " in order to get that. Beware that ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "code", "code", 1586293142), "current-component"], null), " is only valid in component\n          functions, and must be called outside of e.g event handlers\n          and ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "for"], null), " expressions, so it\u2019s safest to always\n          put the call at the top, as in ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "code", "code", 1586293142), "my-div"], null), " here:"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.anyargs/call-my-div"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(reagentdemo.news.anyargs.call_my_div == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: call-my-div\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "call-my-div", "call-my-div", 18693675, null))))));
      }
      var old__3529__auto__ = reagentdemo.news.anyargs.call_my_div["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5701 = function(old__3529__auto__, f__3528__auto__, head, geometry__$1, jonase, map__5697, map__5697__$1, summary) {
          return function() {
            return reagentdemo.news.anyargs.call_my_div.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, head, geometry__$1, jonase, map__5697, map__5697__$1, summary);
        G__5701["name"] = reagentdemo.news.anyargs.call_my_div.name;
        G__5701["fvar"] = true;
        return G__5701;
      }();
      reagentdemo.news.anyargs.call_my_div["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.anyargs/call-my-div"] = v__3530__auto__;
    }
  }(), new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.news.anyargs.src_for.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nsr", "nsr", -336218697), new cljs.core.Keyword(null, "my-div", "my-div", 578248245), new cljs.core.Keyword(null, "call-my-div", "call-my-div", -1621837852)], null))], null)], null), new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "p", "p", 151049309), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "em", "em", 707813035), "Note: "], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "r/props"], null), " and ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "r/children"], null), 
  " correspond to React\u2019s ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "this.props"], null), " and ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "this.props.children"], null), ",\n         respectively. They may be convenient to use when wrapping\n         native React components, since they follow the same\n         conventions when interpreting the arguments given."], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "Other news in 0.4.0"], null), new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul", "ul", -1349521403), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "React has been updated to version 0.9.0."], null), new cljs.core.PersistentVector(null, 
  8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "You can now use any object that satisfies ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "ifn?"], null), " as a component function, and not just\n           plain functions. That includes functions defined with ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "code", "code", 1586293142), "deftype"], null), ", ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "defrecord"], null), ", etc, as well\n           as collections like maps."], null), new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "code", "code", 1586293142), "reagent.core/set-state"], null), " and ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "reagent.core/replace-state"], null), " are now implemented\n           using an ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "reagent.core/atom"], null), ", and are\n           consequently async."], 
  null), new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "Keys associated with items in a seq (e.g \u201ddynamic\n           children\u201d in React parlance) can now be specified with\n           meta-data, as well as with a ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), ":key"], null), " item in the\n           first parameter as before. In other words, these two forms\n           are now equivalent: ", 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "^{:key foo} [:li bar]"], null), "\n           and ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "[:li {:key foo} bar]"], null), "."], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 
  723558921), "Performance has been improved even further. For\n           example, there is now practically no overhead for\n           tracking derefs in components that don\u2019t use ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "atom"], null), "s. Allocations and memory use have also\n           been reduced."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "li", "li", 723558921), "Intro and examples have been tweaked a little to take\n          advantage of the new calling conventions."], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "New svg example"], null), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "There is also a new, elegant and simple ", 
  new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), geometry__$1, "example"], null), " of using svg with Reagent, written\n          by ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), jonase, "Jonas Enlund"], null), ". It also shows how you can\n          use Reagent\u2019s new calling convensions, and looks like\n          this:"], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.anyargs/geometry-example"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(reagentdemo.news.anyargs.geometry_example == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: geometry-example\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "geometry-example", "geometry-example", 704464537, null))))));
      }
      var old__3529__auto__ = reagentdemo.news.anyargs.geometry_example["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5702 = function(old__3529__auto__, f__3528__auto__, head, geometry__$1, jonase, map__5697, map__5697__$1, summary) {
          return function() {
            return reagentdemo.news.anyargs.geometry_example.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, head, geometry__$1, jonase, map__5697, map__5697__$1, summary);
        G__5702["name"] = reagentdemo.news.anyargs.geometry_example.name;
        G__5702["fvar"] = true;
        return G__5702;
      }();
      reagentdemo.news.anyargs.geometry_example["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.anyargs/geometry-example"] = v__3530__auto__;
    }
  }()], null)], null)], null)], null)], null);
};
cljs.core.swap_BANG_.call(null, reagentdemo.page.page_map, cljs.core.assoc, "news/any-arguments.html", function() {
  var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.anyargs/main"];
  if (!(f__3528__auto__ == null)) {
    return f__3528__auto__;
  } else {
    if (!(reagentdemo.news.anyargs.main == null)) {
    } else {
      throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
    }
    var old__3529__auto__ = reagentdemo.news.anyargs.main["-fvar"];
    var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
      var G__5703 = function(old__3529__auto__, f__3528__auto__) {
        return function() {
          return reagentdemo.news.anyargs.main.apply(null, arguments);
        };
      }(old__3529__auto__, f__3528__auto__);
      G__5703["name"] = reagentdemo.news.anyargs.main.name;
      G__5703["fvar"] = true;
      return G__5703;
    }();
    reagentdemo.news.anyargs.main["-fvar"] = v__3530__auto__;
    return reagent.interop.fvars["reagentdemo.news.anyargs/main"] = v__3530__auto__;
  }
}());
goog.provide("reagentdemo.news.async");
goog.require("cljs.core");
goog.require("reagentdemo.page");
goog.require("reagentdemo.common");
goog.require("reagent.core");
goog.require("reagentdemo.common");
goog.require("reagentdemo.common");
goog.require("reagentdemo.page");
goog.require("reagentdemo.syntax");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.core");
goog.require("reagent.core");
reagentdemo.news.async.funmap = reagentdemo.common.fun_map.call(null, '(ns reagentdemo.news.async\n  (:require [reagent.core :as reagent :refer [atom]]\n            [reagent.interop :refer-macros [.\' .! fvar]]\n            [reagent.debug :refer-macros [dbg println]]\n            [reagentdemo.syntax :refer-macros [get-source]]\n            [reagentdemo.page :refer [title link page-map]]\n            [reagentdemo.common :as common :refer [demo-component]]))\n\n(def funmap (-\x3e "reagentdemo/news/async.cljs" get-source common/fun-map))\n(def src-for (partial common/src-for funmap))\n\n(defn timing-wrapper [f]\n  (let [start-time (atom nil)\n        render-time (atom nil)\n        now #(.now js/Date)\n        start #(reset! start-time (now))\n        stop #(reset! render-time (- (now) @start-time))\n        timed-f (with-meta f\n                  {:component-will-mount start\n                   :component-will-update start\n                   :component-did-mount stop\n                   :component-did-update stop})]\n    (fn []\n      [:div\n       [:p [:em "render time: " @render-time "ms"]]\n       [timed-f]])))\n\n(def base-color (atom {:red 130 :green 160 :blue 120}))\n(def ncolors (atom 20))\n(def random-colors (atom nil))\n\n(defn to-rgb [{:keys [red green blue]}]\n  (let [hex #(str (if (\x3c % 16) "0")\n                  (-\x3e % js/Math.round (.toString 16)))]\n    (str "#" (hex red) (hex green) (hex blue))))\n\n(defn tweak-color [{:keys [red green blue]}]\n  (let [rnd #(-\x3e (js/Math.random) (* 256))\n        tweak #(-\x3e % (+ (rnd)) (/ 2) js/Math.floor)]\n    {:red (tweak red) :green (tweak green) :blue (tweak blue)}))\n\n(defn reset-random-colors [color]\n  (reset! random-colors\n          (repeatedly #(-\x3e color tweak-color to-rgb))))\n\n(defn color-choose [color-part]\n  [:div.color-slider\n   (name color-part) " " (color-part @base-color)\n   [:input {:type "range" :min 0 :max 255\n            :value (color-part @base-color)\n            :on-change (fn [e]\n                         (swap! base-color assoc\n                                color-part (-\x3e e .-target .-value int))\n                         (reset-random-colors @base-color))}]])\n\n(defn ncolors-choose []\n  [:div.color-slider\n   "number of color divs " @ncolors\n   [:input {:type "range" :min 0 :max 500\n            :value @ncolors\n            :on-change #(reset! ncolors (-\x3e % .-target .-value))}]])\n\n(defn color-plate [color]\n  [:div.color-plate\n   {:style {:background-color color}}])\n\n(defn palette []\n  (let [color @base-color\n        n @ncolors]\n    [:div\n     [:div\n      [:p "base color: "]\n      [color-plate (to-rgb color)]]\n     [:div.color-samples\n      [:p n " random matching colors:"]\n      (map-indexed (fn [k v]\n                     ^{:key k} [color-plate v])\n                   (take n @random-colors))]]))\n\n(defn color-demo []\n  (reset-random-colors @base-color)\n  (fn []\n    [:div\n     [:h2 "Matching colors"]\n     [color-choose :red]\n     [color-choose :green]\n     [color-choose :blue]\n     [ncolors-choose]\n     [timing-wrapper palette]]))\n\n(defn main [{:keys [summary]}]\n  (let [om-article {:href "http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/"}]\n    [:div.reagent-demo\n     [title "Reagent: Faster by waiting"]\n     [:h1 [link {:href (fvar main)} "Faster by waiting"]]\n     [:div.demo-text\n      [:h2 "Reagent gets async rendering"]\n\n      [:p "Reagent already separates state from components. Now they\n      are also separated in time."]\n\n      [:p "From version 0.3.0, changes in application state (as\n      represented by Reagent\u2019s " [:code "atom"] "s) are no longer\n      rendered immediately to the DOM. Instead, Reagent waits until\n      the browser is ready to repaint the window, and then all the\n      changes are rendered in one single go."]\n\n      (if summary\n        [link {:href (fvar main)\n               :class \'news-read-more} "Read more"]\n        [:div.demo-text\n\n         [:p "This is good for all sorts of reasons:"]\n         [:ul\n\n          [:li "Reagent doesn\'t have to spend time doing renderings\n          that no one would ever see (because changes to application\n          state happened faster than the browser could repaint)."]\n\n          [:li "If two or more atoms are changed simultaneously, this\n          now leads to only one re-rendering, and not two."]\n\n          [:li "The new code does proper batching of renderings even\n          when changes to atoms are done outside of event\n          handlers (which is great for e.g core.async users)."]\n\n          [:li "Repaints can be synced by the browser with for example\n          CSS transitions, since Reagent uses requestAnimationFrame\n          to do the batching. That makes for example animations\n          smoother."]]\n\n         [:p "In short, Reagent renders less often, but at the right\n         times. For a much better description of why async rendering\n         is good, see David Nolen\u2019s " [:a om-article "excellent\n         explanation here."]]\n\n         [:h2 "The bad news"]\n\n         [:p "Lunches in general tend to be non-free, and this is no\n         exception\u2026 The downside to async rendering is that you can no\n         longer depend on changes to atoms being immediately available\n         in the DOM. (Actually, you couldn\u2019t before either, since\n         React.js itself does batching inside event handlers.)"]\n\n         [:p "This may make testing a bit more verbose: you now have\n         to call " [:code "reagent.core/flush"] " to force Reagent to\n         synchronize state with the DOM."]\n\n         [:h2 "An example"]\n\n         [:p "Here is an example to (hopefully) demonstrate the\n         virtues of async rendering. It consists of a simple color\n         chooser (three sliders to set the red, green and blue\n         components of a base color), and shows the base color + a\n         bunch of divs in random matching colors. As soon as the base\n         color is changed, a new set of random colors is shown."]\n\n         [:p "If you change one of the base color components, the base\n         color should change immediately, and smoothly (on my Macbook\n         Air, rendering takes around 2ms, with 20 colored divs\n         showing)."]\n\n         [:p "But perhaps more interesting is to see what happens when\n         the updates can\u2019t be made smoothly (because the browser\n         simply cannot re-render the colored divs quickly enough). On\n         my machine, this starts to happen if I change the number of\n         divs shown to above 150 or so."]\n\n         [:p "As you increase the number of divs, you\u2019ll notice that\n         the base color no longer changes quite so smoothly when you\n         move the color sliders."]\n\n         [:p "But the crucial point is that the sliders "\n          [:strong "still work"] ". Without async rendering, you could\n         quickly get into a situation where the browser hangs for a\n         while, doing updates corresponding to an old state. "]\n\n         [:p "With async rendering, the only thing that happens is\n         that the frame rate goes down."]\n\n         [:p "Btw, I find it quite impressive that React manages to\n         change 500 divs (12 full screens worth) in slightly more than\n         40ms. And even better: when I change the number of divs\n         shown, it only takes around 6ms to re-render the color\n         palette (because the individual divs don\u2019t have to be\n         re-rendered, divs are just added or removed from the DOM as\n         needed)."]\n\n         [demo-component\n          {:comp color-demo\n           :src (src-for\n                 [:ns :timing-wrapper :base-color :ncolors\n                  :random-colors :to-rgb :tweak-color\n                  :reset-random-colors :color-choose :ncolors-choose\n                  :palette :color-demo])}]])]]))\n\n(swap! page-map assoc\n       "news/reagent-is-async.html" (fvar main))\n');
reagentdemo.news.async.src_for = cljs.core.partial.call(null, reagentdemo.common.src_for, reagentdemo.news.async.funmap);
reagentdemo.news.async.timing_wrapper = function timing_wrapper(f) {
  var start_time = reagent.core.atom.call(null, null);
  var render_time = reagent.core.atom.call(null, null);
  var now = function(start_time, render_time) {
    return function() {
      return Date.now();
    };
  }(start_time, render_time);
  var start = function(start_time, render_time, now) {
    return function() {
      return cljs.core.reset_BANG_.call(null, start_time, now.call(null));
    };
  }(start_time, render_time, now);
  var stop = function(start_time, render_time, now, start) {
    return function() {
      return cljs.core.reset_BANG_.call(null, render_time, now.call(null) - cljs.core.deref.call(null, start_time));
    };
  }(start_time, render_time, now, start);
  var timed_f = cljs.core.with_meta.call(null, f, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "component-will-mount", "component-will-mount", 209708855), start, new cljs.core.Keyword(null, "component-will-update", "component-will-update", 335247566), start, new cljs.core.Keyword(null, "component-did-mount", "component-did-mount", -1126910518), stop, new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), stop], null));
  return function(start_time, render_time, now, start, stop, timed_f) {
    return function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "em", "em", 707813035), "render time: ", cljs.core.deref.call(null, render_time), "ms"], null)], null), new cljs.core.PersistentVector(null, 
      1, 5, cljs.core.PersistentVector.EMPTY_NODE, [timed_f], null)], null);
    };
  }(start_time, render_time, now, start, stop, timed_f);
};
reagentdemo.news.async.base_color = reagent.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "red", "red", -969428204), 130, new cljs.core.Keyword(null, "green", "green", -945526839), 160, new cljs.core.Keyword(null, "blue", "blue", -622100620), 120], null));
reagentdemo.news.async.ncolors = reagent.core.atom.call(null, 20);
reagentdemo.news.async.random_colors = reagent.core.atom.call(null, null);
reagentdemo.news.async.to_rgb = function to_rgb(p__5705) {
  var map__5707 = p__5705;
  var map__5707__$1 = cljs.core.seq_QMARK_.call(null, map__5707) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5707) : map__5707;
  var blue = cljs.core.get.call(null, map__5707__$1, new cljs.core.Keyword(null, "blue", "blue", -622100620));
  var green = cljs.core.get.call(null, map__5707__$1, new cljs.core.Keyword(null, "green", "green", -945526839));
  var red = cljs.core.get.call(null, map__5707__$1, new cljs.core.Keyword(null, "red", "red", -969428204));
  var hex = function(map__5707, map__5707__$1, blue, green, red) {
    return function(p1__5704_SHARP_) {
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__5704_SHARP_ < 16 ? "0" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(Math.round(p1__5704_SHARP_).toString(16));
    };
  }(map__5707, map__5707__$1, blue, green, red);
  return "#" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex.call(null, red)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex.call(null, green)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex.call(null, blue));
};
reagentdemo.news.async.tweak_color = function tweak_color(p__5709) {
  var map__5711 = p__5709;
  var map__5711__$1 = cljs.core.seq_QMARK_.call(null, map__5711) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5711) : map__5711;
  var blue = cljs.core.get.call(null, map__5711__$1, new cljs.core.Keyword(null, "blue", "blue", -622100620));
  var green = cljs.core.get.call(null, map__5711__$1, new cljs.core.Keyword(null, "green", "green", -945526839));
  var red = cljs.core.get.call(null, map__5711__$1, new cljs.core.Keyword(null, "red", "red", -969428204));
  var rnd = function(map__5711, map__5711__$1, blue, green, red) {
    return function() {
      return Math.random() * 256;
    };
  }(map__5711, map__5711__$1, blue, green, red);
  var tweak = function(rnd, map__5711, map__5711__$1, blue, green, red) {
    return function(p1__5708_SHARP_) {
      return Math.floor((p1__5708_SHARP_ + rnd.call(null)) / 2);
    };
  }(rnd, map__5711, map__5711__$1, blue, green, red);
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "red", "red", -969428204), tweak.call(null, red), new cljs.core.Keyword(null, "green", "green", -945526839), tweak.call(null, green), new cljs.core.Keyword(null, "blue", "blue", -622100620), tweak.call(null, blue)], null);
};
reagentdemo.news.async.reset_random_colors = function reset_random_colors(color) {
  return cljs.core.reset_BANG_.call(null, reagentdemo.news.async.random_colors, cljs.core.repeatedly.call(null, function() {
    return reagentdemo.news.async.to_rgb.call(null, reagentdemo.news.async.tweak_color.call(null, color));
  }));
};
reagentdemo.news.async.color_choose = function color_choose(color_part) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.color-slider", "div.color-slider", -843416163), cljs.core.name.call(null, color_part), " ", color_part.call(null, cljs.core.deref.call(null, reagentdemo.news.async.base_color)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, 
  "type", "type", 1174270348), "range", new cljs.core.Keyword(null, "min", "min", 444991522), 0, new cljs.core.Keyword(null, "max", "max", 61366548), 255, new cljs.core.Keyword(null, "value", "value", 305978217), color_part.call(null, cljs.core.deref.call(null, reagentdemo.news.async.base_color)), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(e) {
    cljs.core.swap_BANG_.call(null, reagentdemo.news.async.base_color, cljs.core.assoc, color_part, e.target.value | 0);
    return reagentdemo.news.async.reset_random_colors.call(null, cljs.core.deref.call(null, reagentdemo.news.async.base_color));
  }], null)], null)], null);
};
reagentdemo.news.async.ncolors_choose = function ncolors_choose() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.color-slider", "div.color-slider", -843416163), "number of color divs ", cljs.core.deref.call(null, reagentdemo.news.async.ncolors), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1174270348), "range", 
  new cljs.core.Keyword(null, "min", "min", 444991522), 0, new cljs.core.Keyword(null, "max", "max", 61366548), 500, new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.deref.call(null, reagentdemo.news.async.ncolors), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__5712_SHARP_) {
    return cljs.core.reset_BANG_.call(null, reagentdemo.news.async.ncolors, p1__5712_SHARP_.target.value);
  }], null)], null)], null);
};
reagentdemo.news.async.color_plate = function color_plate(color) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.color-plate", "div.color-plate", 915488579), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "background-color", "background-color", 570434026), color], null)], null)], null);
};
reagentdemo.news.async.palette = function palette() {
  var color = cljs.core.deref.call(null, reagentdemo.news.async.base_color);
  var n = cljs.core.deref.call(null, reagentdemo.news.async.ncolors);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "base color: "], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [reagentdemo.news.async.color_plate, reagentdemo.news.async.to_rgb.call(null, color)], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.color-samples", "div.color-samples", 1209771565), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), n, " random matching colors:"], null), cljs.core.map_indexed.call(null, function(color, n) {
    return function(k, v) {
      return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.async.color_plate, v], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), k], null));
    };
  }(color, n), cljs.core.take.call(null, n, cljs.core.deref.call(null, reagentdemo.news.async.random_colors)))], null)], null);
};
reagentdemo.news.async.color_demo = function color_demo() {
  reagentdemo.news.async.reset_random_colors.call(null, cljs.core.deref.call(null, reagentdemo.news.async.base_color));
  return function() {
    return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "Matching colors"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.async.color_choose, new cljs.core.Keyword(null, "red", "red", -969428204)], null), new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.async.color_choose, new cljs.core.Keyword(null, "green", "green", -945526839)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.async.color_choose, new cljs.core.Keyword(null, "blue", "blue", -622100620)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.async.ncolors_choose], null), new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.async.timing_wrapper, reagentdemo.news.async.palette], null)], null);
  };
};
reagentdemo.news.async.main = function main(p__5713) {
  var map__5717 = p__5713;
  var map__5717__$1 = cljs.core.seq_QMARK_.call(null, map__5717) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5717) : map__5717;
  var summary = cljs.core.get.call(null, map__5717__$1, new cljs.core.Keyword(null, "summary", "summary", 380847952));
  var om_article = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/"], null);
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.reagent-demo", "div.reagent-demo", -2027348807), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.title, "Reagent: Faster by waiting"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.async/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
      }
      var old__3529__auto__ = main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5718 = function(old__3529__auto__, f__3528__auto__, om_article, map__5717, map__5717__$1, summary) {
          return function() {
            return main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, om_article, map__5717, map__5717__$1, summary);
        G__5718["name"] = main.name;
        G__5718["fvar"] = true;
        return G__5718;
      }();
      main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.async/main"] = v__3530__auto__;
    }
  }()], null), "Faster by waiting"], null)], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "Reagent gets async rendering"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", 
  "p", 151049309), "Reagent already separates state from components. Now they\n      are also separated in time."], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "From version 0.3.0, changes in application state (as\n      represented by Reagent\u2019s ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "atom"], null), 
  "s) are no longer\n      rendered immediately to the DOM. Instead, Reagent waits until\n      the browser is ready to repaint the window, and then all the\n      changes are rendered in one single go."], null), cljs.core.truth_(summary) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.async/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
      }
      var old__3529__auto__ = main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5719 = function(old__3529__auto__, f__3528__auto__, om_article, map__5717, map__5717__$1, summary) {
          return function() {
            return main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__, om_article, map__5717, map__5717__$1, summary);
        G__5719["name"] = main.name;
        G__5719["fvar"] = true;
        return G__5719;
      }();
      main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["reagentdemo.news.async/main"] = v__3530__auto__;
    }
  }(), new cljs.core.Keyword(null, "class", "class", -2030961996), new cljs.core.Symbol(null, "news-read-more", "news-read-more", 150793143, null)], null), "Read more"], null) : new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.demo-text", "div.demo-text", 1676555125), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "This is good for all sorts of reasons:"], 
  null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul", "ul", -1349521403), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "Reagent doesn't have to spend time doing renderings\n          that no one would ever see (because changes to application\n          state happened faster than the browser could repaint)."], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "If two or more atoms are changed simultaneously, this\n          now leads to only one re-rendering, and not two."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "The new code does proper batching of renderings even\n          when changes to atoms are done outside of event\n          handlers (which is great for e.g core.async users)."], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), "Repaints can be synced by the browser with for example\n          CSS transitions, since Reagent uses requestAnimationFrame\n          to do the batching. That makes for example animations\n          smoother."], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), 
  "In short, Reagent renders less often, but at the right\n         times. For a much better description of why async rendering\n         is good, see David Nolen\u2019s ", new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), om_article, "excellent\n         explanation here."], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), 
  "The bad news"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Lunches in general tend to be non-free, and this is no\n         exception\u2026 The downside to async rendering is that you can no\n         longer depend on changes to atoms being immediately available\n         in the DOM. (Actually, you couldn\u2019t before either, since\n         React.js itself does batching inside event handlers.)"], 
  null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "This may make testing a bit more verbose: you now have\n         to call ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "code", "code", 1586293142), "reagent.core/flush"], null), " to force Reagent to\n         synchronize state with the DOM."], null), new cljs.core.PersistentVector(null, 2, 
  5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h2", "h2", -372662728), "An example"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Here is an example to (hopefully) demonstrate the\n         virtues of async rendering. It consists of a simple color\n         chooser (three sliders to set the red, green and blue\n         components of a base color), and shows the base color + a\n         bunch of divs in random matching colors. As soon as the base\n         color is changed, a new set of random colors is shown."], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "If you change one of the base color components, the base\n         color should change immediately, and smoothly (on my Macbook\n         Air, rendering takes around 2ms, with 20 colored divs\n         showing)."], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "But perhaps more interesting is to see what happens when\n         the updates can\u2019t be made smoothly (because the browser\n         simply cannot re-render the colored divs quickly enough). On\n         my machine, this starts to happen if I change the number of\n         divs shown to above 150 or so."], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "As you increase the number of divs, you\u2019ll notice that\n         the base color no longer changes quite so smoothly when you\n         move the color sliders."], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "But the crucial point is that the sliders ", new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "strong", "strong", 269529E3), "still work"], null), ". Without async rendering, you could\n         quickly get into a situation where the browser hangs for a\n         while, doing updates corresponding to an old state. "], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "With async rendering, the only thing that happens is\n         that the frame rate goes down."], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Btw, I find it quite impressive that React manages to\n         change 500 divs (12 full screens worth) in slightly more than\n         40ms. And even better: when I change the number of divs\n         shown, it only takes around 6ms to re-render the color\n         palette (because the individual divs don\u2019t have to be\n         re-rendered, divs are just added or removed from the DOM as\n         needed)."], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.common.demo_component, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comp", "comp", 1191953630), reagentdemo.news.async.color_demo, new cljs.core.Keyword(null, "src", "src", -1651076051), reagentdemo.news.async.src_for.call(null, new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, 
  "timing-wrapper", "timing-wrapper", 1605931939), new cljs.core.Keyword(null, "base-color", "base-color", -1117474436), new cljs.core.Keyword(null, "ncolors", "ncolors", 1737431336), new cljs.core.Keyword(null, "random-colors", "random-colors", 1337434241), new cljs.core.Keyword(null, "to-rgb", "to-rgb", -293124504), new cljs.core.Keyword(null, "tweak-color", "tweak-color", -162122824), new cljs.core.Keyword(null, "reset-random-colors", "reset-random-colors", 187102810), new cljs.core.Keyword(null, 
  "color-choose", "color-choose", -1385957061), new cljs.core.Keyword(null, "ncolors-choose", "ncolors-choose", -499386099), new cljs.core.Keyword(null, "palette", "palette", -456203511), new cljs.core.Keyword(null, "color-demo", "color-demo", -2135648333)], null))], null)], null)], null)], null)], null);
};
cljs.core.swap_BANG_.call(null, reagentdemo.page.page_map, cljs.core.assoc, "news/reagent-is-async.html", function() {
  var f__3528__auto__ = reagent.interop.fvars["reagentdemo.news.async/main"];
  if (!(f__3528__auto__ == null)) {
    return f__3528__auto__;
  } else {
    if (!(reagentdemo.news.async.main == null)) {
    } else {
      throw new Error("Assert failed: undefined fn: main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol(null, "main", "main", -477271134, null))))));
    }
    var old__3529__auto__ = reagentdemo.news.async.main["-fvar"];
    var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
      var G__5720 = function(old__3529__auto__, f__3528__auto__) {
        return function() {
          return reagentdemo.news.async.main.apply(null, arguments);
        };
      }(old__3529__auto__, f__3528__auto__);
      G__5720["name"] = reagentdemo.news.async.main.name;
      G__5720["fvar"] = true;
      return G__5720;
    }();
    reagentdemo.news.async.main["-fvar"] = v__3530__auto__;
    return reagent.interop.fvars["reagentdemo.news.async/main"] = v__3530__auto__;
  }
}());
goog.provide("reagentdemo.news");
goog.require("cljs.core");
goog.require("reagentdemo.page");
goog.require("reagentdemo.common");
goog.require("reagent.core");
goog.require("reagentdemo.news.clockpost");
goog.require("reagent.core");
goog.require("reagentdemo.news.anyargs");
goog.require("reagentdemo.news.undodemo");
goog.require("reagent.interop");
goog.require("reagentdemo.news.async");
goog.require("reagent.core");
goog.require("reagentdemo.news.undodemo");
goog.require("reagentdemo.page");
goog.require("reagentdemo.news.anyargs");
goog.require("reagentdemo.news.async");
goog.require("reagentdemo.news.clockpost");
goog.require("reagentdemo.common");
goog.require("reagent.debug");
goog.require("reagentdemo.common");
reagentdemo.news.main = function main() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.title, "Reagent news"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.clockpost.main, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "summary", "summary", 380847952), true], 
  null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.anyargs.main, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "summary", "summary", 380847952), true], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.async.main, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "summary", "summary", 380847952), true], null)], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.news.undodemo.main, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "summary", "summary", 380847952), true], null)], null)], null);
};
goog.provide("demo");
goog.require("cljs.core");
goog.require("reagentdemo.page");
goog.require("reagentdemo.common");
goog.require("reagent.core");
goog.require("reagentdemo.intro");
goog.require("reagent.core");
goog.require("reagentdemo.intro");
goog.require("reagent.interop");
goog.require("reagentdemo.news");
goog.require("reagent.interop");
goog.require("reagent.core");
goog.require("reagentdemo.news");
goog.require("reagentdemo.page");
goog.require("reagentdemo.page");
goog.require("clojure.string");
goog.require("reagentdemo.common");
goog.require("reagent.debug");
goog.require("clojure.string");
goog.require("reagentdemo.common");
eval('if (typeof React !\x3d \'undefined\' \x26\x26\n                      typeof console !\x3d \'undefined\') {\n                      console.log(\'WARNING: React is already defined\');\n                      }/**\n * React v0.11.2\n */\n!function(e){if("object"\x3d\x3dtypeof exports\x26\x26"undefined"!\x3dtypeof module)module.exports\x3de();else if("function"\x3d\x3dtypeof define\x26\x26define.amd)define([],e);else{var f;"undefined"!\x3dtypeof window?f\x3dwindow:"undefined"!\x3dtypeof global?f\x3dglobal:"undefined"!\x3dtypeof self\x26\x26(f\x3dself),f.React\x3de()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a\x3dtypeof require\x3d\x3d"function"\x26\x26require;if(!u\x26\x26a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module \'"+o+"\'")}var f\x3dn[o]\x3d{exports:{}};t[o][0].call(f.exports,function(e){var n\x3dt[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i\x3dtypeof require\x3d\x3d"function"\x26\x26require;for(var o\x3d0;o\x3cr.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule AutoFocusMixin\n * @typechecks static-only\n */\n\n"use strict";\n\nvar focusNode \x3d _dereq_("./focusNode");\n\nvar AutoFocusMixin \x3d {\n  componentDidMount: function() {\n    if (this.props.autoFocus) {\n      focusNode(this.getDOMNode());\n    }\n  }\n};\n\nmodule.exports \x3d AutoFocusMixin;\n\n},{"./focusNode":106}],2:[function(_dereq_,module,exports){\n/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\nvar EventPropagators \x3d _dereq_("./EventPropagators");\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\nvar SyntheticInputEvent \x3d _dereq_("./SyntheticInputEvent");\n\nvar keyOf \x3d _dereq_("./keyOf");\n\nvar canUseTextInputEvent \x3d (\n  ExecutionEnvironment.canUseDOM \x26\x26\n  \'TextEvent\' in window \x26\x26\n  !(\'documentMode\' in document || isPresto())\n);\n\n/**\n * Opera \x3c\x3d 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera \x3d window.opera;\n  return (\n    typeof opera \x3d\x3d\x3d \'object\' \x26\x26\n    typeof opera.version \x3d\x3d\x3d \'function\' \x26\x26\n    parseInt(opera.version(), 10) \x3c\x3d 12\n  );\n}\n\nvar SPACEBAR_CODE \x3d 32;\nvar SPACEBAR_CHAR \x3d String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes \x3d EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes \x3d {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onBeforeInput: null}),\n      captured: keyOf({onBeforeInputCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topTextInput,\n      topLevelTypes.topPaste\n    ]\n  }\n};\n\n// Track characters inserted via keypress and composition events.\nvar fallbackChars \x3d null;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (\n    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) \x26\x26\n    // ctrlKey \x26\x26 altKey is equivalent to AltGr, and is not a command.\n    !(nativeEvent.ctrlKey \x26\x26 nativeEvent.altKey)\n  );\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec\'d but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n */\nvar BeforeInputEventPlugin \x3d {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var chars;\n\n    if (canUseTextInputEvent) {\n      switch (topLevelType) {\n        case topLevelTypes.topKeyPress:\n          /**\n           * If native `textInput` events are available, our goal is to make\n           * use of them. However, there is a special case: the spacebar key.\n           * In Webkit, preventing default on a spacebar `textInput` event\n           * cancels character insertion, but it *also* causes the browser\n           * to fall back to its default spacebar behavior of scrolling the\n           * page.\n           *\n           * Tracking at:\n           * https://code.google.com/p/chromium/issues/detail?id\x3d355103\n           *\n           * To avoid this issue, use the keypress event as if no `textInput`\n           * event is available.\n           */\n          var which \x3d nativeEvent.which;\n          if (which !\x3d\x3d SPACEBAR_CODE) {\n            return;\n          }\n\n          chars \x3d String.fromCharCode(which);\n          break;\n\n        case topLevelTypes.topTextInput:\n          // Record the characters to be added to the DOM.\n          chars \x3d nativeEvent.data;\n\n          // If it\'s a spacebar character, assume that we have already handled\n          // it at the keypress level and bail immediately.\n          if (chars \x3d\x3d\x3d SPACEBAR_CHAR) {\n            return;\n          }\n\n          // Otherwise, carry on.\n          break;\n\n        default:\n          // For other native event types, do nothing.\n          return;\n      }\n    } else {\n      switch (topLevelType) {\n        case topLevelTypes.topPaste:\n          // If a paste event occurs after a keypress, throw out the input\n          // chars. Paste events should not lead to BeforeInput events.\n          fallbackChars \x3d null;\n          break;\n        case topLevelTypes.topKeyPress:\n          /**\n           * As of v27, Firefox may fire keypress events even when no character\n           * will be inserted. A few possibilities:\n           *\n           * - `which` is `0`. Arrow keys, Esc key, etc.\n           *\n           * - `which` is the pressed key code, but no char is available.\n           *   Ex: \'AltGr + d` in Polish. There is no modified character for\n           *   this key combination and no character is inserted into the\n           *   document, but FF fires the keypress for char code `100` anyway.\n           *   No `input` event will occur.\n           *\n           * - `which` is the pressed key code, but a command combination is\n           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n           *   `input` event will occur.\n           */\n          if (nativeEvent.which \x26\x26 !isKeypressCommand(nativeEvent)) {\n            fallbackChars \x3d String.fromCharCode(nativeEvent.which);\n          }\n          break;\n        case topLevelTypes.topCompositionEnd:\n          fallbackChars \x3d nativeEvent.data;\n          break;\n      }\n\n      // If no changes have occurred to the fallback string, no relevant\n      // event has fired and we\'re done.\n      if (fallbackChars \x3d\x3d\x3d null) {\n        return;\n      }\n\n      chars \x3d fallbackChars;\n    }\n\n    // If no characters are being inserted, no BeforeInput event should\n    // be fired.\n    if (!chars) {\n      return;\n    }\n\n    var event \x3d SyntheticInputEvent.getPooled(\n      eventTypes.beforeInput,\n      topLevelTargetID,\n      nativeEvent\n    );\n\n    event.data \x3d chars;\n    fallbackChars \x3d null;\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  }\n};\n\nmodule.exports \x3d BeforeInputEventPlugin;\n\n},{"./EventConstants":15,"./EventPropagators":20,"./ExecutionEnvironment":21,"./SyntheticInputEvent":86,"./keyOf":127}],3:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule CSSProperty\n */\n\n"use strict";\n\n/**\n * CSS properties which accept numbers but are not in units of "px".\n */\nvar isUnitlessNumber \x3d {\n  columnCount: true,\n  fillOpacity: true,\n  flex: true,\n  flexGrow: true,\n  flexShrink: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  widows: true,\n  zIndex: true,\n  zoom: true\n};\n\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nvar prefixes \x3d [\'Webkit\', \'ms\', \'Moz\', \'O\'];\n\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\nObject.keys(isUnitlessNumber).forEach(function(prop) {\n  prefixes.forEach(function(prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] \x3d isUnitlessNumber[prop];\n  });\n});\n\n/**\n * Most style properties can be unset by doing .style[prop] \x3d \'\' but IE8\n * doesn\'t like doing that with shorthand properties so for the properties that\n * IE8 breaks on, which are listed here, we instead unset each of the\n * individual properties. See http://bugs.jquery.com/ticket/12385.\n * The 4-value \'clock\' properties like margin, padding, border-width seem to\n * behave without any problems. Curiously, list-style works too without any\n * special prodding.\n */\nvar shorthandPropertyExpansions \x3d {\n  background: {\n    backgroundImage: true,\n    backgroundPosition: true,\n    backgroundRepeat: true,\n    backgroundColor: true\n  },\n  border: {\n    borderWidth: true,\n    borderStyle: true,\n    borderColor: true\n  },\n  borderBottom: {\n    borderBottomWidth: true,\n    borderBottomStyle: true,\n    borderBottomColor: true\n  },\n  borderLeft: {\n    borderLeftWidth: true,\n    borderLeftStyle: true,\n    borderLeftColor: true\n  },\n  borderRight: {\n    borderRightWidth: true,\n    borderRightStyle: true,\n    borderRightColor: true\n  },\n  borderTop: {\n    borderTopWidth: true,\n    borderTopStyle: true,\n    borderTopColor: true\n  },\n  font: {\n    fontStyle: true,\n    fontVariant: true,\n    fontWeight: true,\n    fontSize: true,\n    lineHeight: true,\n    fontFamily: true\n  }\n};\n\nvar CSSProperty \x3d {\n  isUnitlessNumber: isUnitlessNumber,\n  shorthandPropertyExpansions: shorthandPropertyExpansions\n};\n\nmodule.exports \x3d CSSProperty;\n\n},{}],4:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule CSSPropertyOperations\n * @typechecks static-only\n */\n\n"use strict";\n\nvar CSSProperty \x3d _dereq_("./CSSProperty");\n\nvar dangerousStyleValue \x3d _dereq_("./dangerousStyleValue");\nvar hyphenateStyleName \x3d _dereq_("./hyphenateStyleName");\nvar memoizeStringOnly \x3d _dereq_("./memoizeStringOnly");\n\nvar processStyleName \x3d memoizeStringOnly(function(styleName) {\n  return hyphenateStyleName(styleName);\n});\n\n/**\n * Operations for dealing with CSS properties.\n */\nvar CSSPropertyOperations \x3d {\n\n  /**\n   * Serializes a mapping of style properties for use as inline styles:\n   *\n   *   \x3e createMarkupForStyles({width: \'200px\', height: 0})\n   *   "width:200px;height:0;"\n   *\n   * Undefined values are ignored so that declarative programming is easier.\n   * The result should be HTML-escaped before insertion into the DOM.\n   *\n   * @param {object} styles\n   * @return {?string}\n   */\n  createMarkupForStyles: function(styles) {\n    var serialized \x3d \'\';\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      var styleValue \x3d styles[styleName];\n      if (styleValue !\x3d null) {\n        serialized +\x3d processStyleName(styleName) + \':\';\n        serialized +\x3d dangerousStyleValue(styleName, styleValue) + \';\';\n      }\n    }\n    return serialized || null;\n  },\n\n  /**\n   * Sets the value for multiple styles on a node.  If a value is specified as\n   * \'\' (empty string), the corresponding style property will be unset.\n   *\n   * @param {DOMElement} node\n   * @param {object} styles\n   */\n  setValueForStyles: function(node, styles) {\n    var style \x3d node.style;\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      var styleValue \x3d dangerousStyleValue(styleName, styles[styleName]);\n      if (styleValue) {\n        style[styleName] \x3d styleValue;\n      } else {\n        var expansion \x3d CSSProperty.shorthandPropertyExpansions[styleName];\n        if (expansion) {\n          // Shorthand property that IE8 won\'t like unsetting, so unset each\n          // component to placate it\n          for (var individualStyleName in expansion) {\n            style[individualStyleName] \x3d \'\';\n          }\n        } else {\n          style[styleName] \x3d \'\';\n        }\n      }\n    }\n  }\n\n};\n\nmodule.exports \x3d CSSPropertyOperations;\n\n},{"./CSSProperty":3,"./dangerousStyleValue":101,"./hyphenateStyleName":118,"./memoizeStringOnly":129}],5:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule CallbackQueue\n */\n\n"use strict";\n\nvar PooledClass \x3d _dereq_("./PooledClass");\n\nvar invariant \x3d _dereq_("./invariant");\nvar mixInto \x3d _dereq_("./mixInto");\n\n/**\n * A specialized pseudo-event module to help keep track of components waiting to\n * be notified when their DOM representations are available for use.\n *\n * This implements `PooledClass`, so you should never need to instantiate this.\n * Instead, use `CallbackQueue.getPooled()`.\n *\n * @class ReactMountReady\n * @implements PooledClass\n * @internal\n */\nfunction CallbackQueue() {\n  this._callbacks \x3d null;\n  this._contexts \x3d null;\n}\n\nmixInto(CallbackQueue, {\n\n  /**\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.\n   *\n   * @param {function} callback Invoked when `notifyAll` is invoked.\n   * @param {?object} context Context to call `callback` with.\n   * @internal\n   */\n  enqueue: function(callback, context) {\n    this._callbacks \x3d this._callbacks || [];\n    this._contexts \x3d this._contexts || [];\n    this._callbacks.push(callback);\n    this._contexts.push(context);\n  },\n\n  /**\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after\n   * the DOM representation of a component has been created or updated.\n   *\n   * @internal\n   */\n  notifyAll: function() {\n    var callbacks \x3d this._callbacks;\n    var contexts \x3d this._contexts;\n    if (callbacks) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        callbacks.length \x3d\x3d\x3d contexts.length,\n        "Mismatched list of contexts in callback queue"\n      ) : invariant(callbacks.length \x3d\x3d\x3d contexts.length));\n      this._callbacks \x3d null;\n      this._contexts \x3d null;\n      for (var i \x3d 0, l \x3d callbacks.length; i \x3c l; i++) {\n        callbacks[i].call(contexts[i]);\n      }\n      callbacks.length \x3d 0;\n      contexts.length \x3d 0;\n    }\n  },\n\n  /**\n   * Resets the internal queue.\n   *\n   * @internal\n   */\n  reset: function() {\n    this._callbacks \x3d null;\n    this._contexts \x3d null;\n  },\n\n  /**\n   * `PooledClass` looks for this.\n   */\n  destructor: function() {\n    this.reset();\n  }\n\n});\n\nPooledClass.addPoolingTo(CallbackQueue);\n\nmodule.exports \x3d CallbackQueue;\n\n},{"./PooledClass":26,"./invariant":120,"./mixInto":133}],6:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ChangeEventPlugin\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\nvar EventPluginHub \x3d _dereq_("./EventPluginHub");\nvar EventPropagators \x3d _dereq_("./EventPropagators");\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\nvar ReactUpdates \x3d _dereq_("./ReactUpdates");\nvar SyntheticEvent \x3d _dereq_("./SyntheticEvent");\n\nvar isEventSupported \x3d _dereq_("./isEventSupported");\nvar isTextInputElement \x3d _dereq_("./isTextInputElement");\nvar keyOf \x3d _dereq_("./keyOf");\n\nvar topLevelTypes \x3d EventConstants.topLevelTypes;\n\nvar eventTypes \x3d {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onChange: null}),\n      captured: keyOf({onChangeCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topChange,\n      topLevelTypes.topClick,\n      topLevelTypes.topFocus,\n      topLevelTypes.topInput,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topSelectionChange\n    ]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement \x3d null;\nvar activeElementID \x3d null;\nvar activeElementValue \x3d null;\nvar activeElementValueProp \x3d null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  return (\n    elem.nodeName \x3d\x3d\x3d \'SELECT\' ||\n    (elem.nodeName \x3d\x3d\x3d \'INPUT\' \x26\x26 elem.type \x3d\x3d\x3d \'file\')\n  );\n}\n\nvar doesChangeEventBubble \x3d false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble \x3d isEventSupported(\'change\') \x26\x26 (\n    !(\'documentMode\' in document) || document.documentMode \x3e 8\n  );\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event \x3d SyntheticEvent.getPooled(\n    eventTypes.change,\n    activeElementID,\n    nativeEvent\n  );\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we\'d just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn\'t, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don\'t work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue();\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement \x3d target;\n  activeElementID \x3d targetID;\n  activeElement.attachEvent(\'onchange\', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent(\'onchange\', manualDispatchChangeEvent);\n  activeElement \x3d null;\n  activeElementID \x3d null;\n}\n\nfunction getTargetIDForChangeEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType \x3d\x3d\x3d topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\nfunction handleEventsForChangeEventIE8(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType \x3d\x3d\x3d topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType \x3d\x3d\x3d topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported \x3d false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported \x3d isEventSupported(\'input\') \x26\x26 (\n    !(\'documentMode\' in document) || document.documentMode \x3e 9\n  );\n}\n\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp \x3d  {\n  get: function() {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function(val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue \x3d \'\' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement \x3d target;\n  activeElementID \x3d targetID;\n  activeElementValue \x3d target.value;\n  activeElementValueProp \x3d Object.getOwnPropertyDescriptor(\n    target.constructor.prototype,\n    \'value\'\n  );\n\n  Object.defineProperty(activeElement, \'value\', newValueProp);\n  activeElement.attachEvent(\'onpropertychange\', handlePropertyChange);\n}\n\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n  activeElement.detachEvent(\'onpropertychange\', handlePropertyChange);\n\n  activeElement \x3d null;\n  activeElementID \x3d null;\n  activeElementValue \x3d null;\n  activeElementValueProp \x3d null;\n}\n\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !\x3d\x3d \'value\') {\n    return;\n  }\n  var value \x3d nativeEvent.srcElement.value;\n  if (value \x3d\x3d\x3d activeElementValue) {\n    return;\n  }\n  activeElementValue \x3d value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target\'s ID.\n */\nfunction getTargetIDForInputEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType \x3d\x3d\x3d topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n}\n\n// For IE8 and IE9.\nfunction handleEventsForInputEventIE(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType \x3d\x3d\x3d topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to \'value\'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn\'t fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don\'t want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType \x3d\x3d\x3d topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetIDForInputEventIE(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType \x3d\x3d\x3d topLevelTypes.topSelectionChange ||\n      topLevelType \x3d\x3d\x3d topLevelTypes.topKeyUp ||\n      topLevelType \x3d\x3d\x3d topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn\'t\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren\'t necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it\'ll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement \x26\x26 activeElement.value !\x3d\x3d activeElementValue) {\n      activeElementValue \x3d activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return (\n    elem.nodeName \x3d\x3d\x3d \'INPUT\' \x26\x26\n    (elem.type \x3d\x3d\x3d \'checkbox\' || elem.type \x3d\x3d\x3d \'radio\')\n  );\n}\n\nfunction getTargetIDForClickEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType \x3d\x3d\x3d topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it\'s possible to\n * change the element\'s value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin \x3d {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var getTargetIDFunc, handleEventFunc;\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc \x3d getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc \x3d handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc \x3d getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc \x3d getTargetIDForInputEventIE;\n        handleEventFunc \x3d handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc \x3d getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID \x3d getTargetIDFunc(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID\n      );\n      if (targetID) {\n        var event \x3d SyntheticEvent.getPooled(\n          eventTypes.change,\n          targetID,\n          nativeEvent\n        );\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID\n      );\n    }\n  }\n\n};\n\nmodule.exports \x3d ChangeEventPlugin;\n\n},{"./EventConstants":15,"./EventPluginHub":17,"./EventPropagators":20,"./ExecutionEnvironment":21,"./ReactUpdates":76,"./SyntheticEvent":84,"./isEventSupported":121,"./isTextInputElement":123,"./keyOf":127}],7:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ClientReactRootIndex\n * @typechecks\n */\n\n"use strict";\n\nvar nextReactRootIndex \x3d 0;\n\nvar ClientReactRootIndex \x3d {\n  createReactRootIndex: function() {\n    return nextReactRootIndex++;\n  }\n};\n\nmodule.exports \x3d ClientReactRootIndex;\n\n},{}],8:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule CompositionEventPlugin\n * @typechecks static-only\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\nvar EventPropagators \x3d _dereq_("./EventPropagators");\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\nvar ReactInputSelection \x3d _dereq_("./ReactInputSelection");\nvar SyntheticCompositionEvent \x3d _dereq_("./SyntheticCompositionEvent");\n\nvar getTextContentAccessor \x3d _dereq_("./getTextContentAccessor");\nvar keyOf \x3d _dereq_("./keyOf");\n\nvar END_KEYCODES \x3d [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE \x3d 229;\n\nvar useCompositionEvent \x3d (\n  ExecutionEnvironment.canUseDOM \x26\x26\n  \'CompositionEvent\' in window\n);\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. In Korean, for example,\n// the compositionend event contains only one character regardless of\n// how many characters have been composed since compositionstart.\n// We therefore use the fallback data while still using the native\n// events as triggers.\nvar useFallbackData \x3d (\n  !useCompositionEvent ||\n  (\n    \'documentMode\' in document \x26\x26\n    document.documentMode \x3e 8 \x26\x26\n    document.documentMode \x3c\x3d 11\n  )\n);\n\nvar topLevelTypes \x3d EventConstants.topLevelTypes;\nvar currentComposition \x3d null;\n\n// Events and their corresponding property names.\nvar eventTypes \x3d {\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionEnd: null}),\n      captured: keyOf({onCompositionEndCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionStart: null}),\n      captured: keyOf({onCompositionStartCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionStart,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionUpdate: null}),\n      captured: keyOf({onCompositionUpdateCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionUpdate,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  }\n};\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackStart(topLevelType, nativeEvent) {\n  return (\n    topLevelType \x3d\x3d\x3d topLevelTypes.topKeyDown \x26\x26\n    nativeEvent.keyCode \x3d\x3d\x3d START_KEYCODE\n  );\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !\x3d\x3d -1);\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return (nativeEvent.keyCode !\x3d\x3d START_KEYCODE);\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Helper class stores information about selection and document state\n * so we can figure out what changed at a later date.\n *\n * @param {DOMEventTarget} root\n */\nfunction FallbackCompositionState(root) {\n  this.root \x3d root;\n  this.startSelection \x3d ReactInputSelection.getSelection(root);\n  this.startValue \x3d this.getText();\n}\n\n/**\n * Get current text of input.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getText \x3d function() {\n  return this.root.value || this.root[getTextContentAccessor()];\n};\n\n/**\n * Text that has changed since the start of composition.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getData \x3d function() {\n  var endValue \x3d this.getText();\n  var prefixLength \x3d this.startSelection.start;\n  var suffixLength \x3d this.startValue.length - this.startSelection.end;\n\n  return endValue.substr(\n    prefixLength,\n    endValue.length - suffixLength - prefixLength\n  );\n};\n\n/**\n * This plugin creates `onCompositionStart`, `onCompositionUpdate` and\n * `onCompositionEnd` events on inputs, textareas and contentEditable\n * nodes.\n */\nvar CompositionEventPlugin \x3d {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var eventType;\n    var data;\n\n    if (useCompositionEvent) {\n      eventType \x3d getCompositionEventType(topLevelType);\n    } else if (!currentComposition) {\n      if (isFallbackStart(topLevelType, nativeEvent)) {\n        eventType \x3d eventTypes.compositionStart;\n      }\n    } else if (isFallbackEnd(topLevelType, nativeEvent)) {\n      eventType \x3d eventTypes.compositionEnd;\n    }\n\n    if (useFallbackData) {\n      // The current composition is stored statically and must not be\n      // overwritten while composition continues.\n      if (!currentComposition \x26\x26 eventType \x3d\x3d\x3d eventTypes.compositionStart) {\n        currentComposition \x3d new FallbackCompositionState(topLevelTarget);\n      } else if (eventType \x3d\x3d\x3d eventTypes.compositionEnd) {\n        if (currentComposition) {\n          data \x3d currentComposition.getData();\n          currentComposition \x3d null;\n        }\n      }\n    }\n\n    if (eventType) {\n      var event \x3d SyntheticCompositionEvent.getPooled(\n        eventType,\n        topLevelTargetID,\n        nativeEvent\n      );\n      if (data) {\n        // Inject data generated from fallback path into the synthetic event.\n        // This matches the property of native CompositionEventInterface.\n        event.data \x3d data;\n      }\n      EventPropagators.accumulateTwoPhaseDispatches(event);\n      return event;\n    }\n  }\n};\n\nmodule.exports \x3d CompositionEventPlugin;\n\n},{"./EventConstants":15,"./EventPropagators":20,"./ExecutionEnvironment":21,"./ReactInputSelection":58,"./SyntheticCompositionEvent":82,"./getTextContentAccessor":115,"./keyOf":127}],9:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n"use strict";\n\nvar Danger \x3d _dereq_("./Danger");\nvar ReactMultiChildUpdateTypes \x3d _dereq_("./ReactMultiChildUpdateTypes");\n\nvar getTextContentAccessor \x3d _dereq_("./getTextContentAccessor");\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * The DOM property to use when setting text content.\n *\n * @type {string}\n * @private\n */\nvar textContentAccessor \x3d getTextContentAccessor();\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n  parentNode.insertBefore(\n    childNode,\n    parentNode.childNodes[index] || null\n  );\n}\n\nvar updateTextContent;\nif (textContentAccessor \x3d\x3d\x3d \'textContent\') {\n  /**\n   * Sets the text content of `node` to `text`.\n   *\n   * @param {DOMElement} node Node to change\n   * @param {string} text New text content\n   */\n  updateTextContent \x3d function(node, text) {\n    node.textContent \x3d text;\n  };\n} else {\n  /**\n   * Sets the text content of `node` to `text`.\n   *\n   * @param {DOMElement} node Node to change\n   * @param {string} text New text content\n   */\n  updateTextContent \x3d function(node, text) {\n    // In order to preserve newlines correctly, we can\'t use .innerText to set\n    // the contents (see #1080), so we empty the element then append a text node\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n    if (text) {\n      var doc \x3d node.ownerDocument || document;\n      node.appendChild(doc.createTextNode(text));\n    }\n  };\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations \x3d {\n\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n\n  updateTextContent: updateTextContent,\n\n  /**\n   * Updates a component\'s children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array\x3cobject\x3e} updates List of update configurations.\n   * @param {array\x3cstring\x3e} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function(updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren \x3d null;\n    // List of children that will be moved or removed.\n    var updatedChildren \x3d null;\n\n    for (var i \x3d 0; update \x3d updates[i]; i++) {\n      if (update.type \x3d\x3d\x3d ReactMultiChildUpdateTypes.MOVE_EXISTING ||\n          update.type \x3d\x3d\x3d ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex \x3d update.fromIndex;\n        var updatedChild \x3d update.parentNode.childNodes[updatedIndex];\n        var parentID \x3d update.parentID;\n\n        ("production" !\x3d\x3d "development" ? invariant(\n          updatedChild,\n          \'processUpdates(): Unable to find child %s of element. This \' +\n          \'probably means the DOM was unexpectedly mutated (e.g., by the \' +\n          \'browser), usually due to forgetting a \x3ctbody\x3e when using tables, \' +\n          \'nesting \x3cp\x3e or \x3ca\x3e tags, or using non-SVG elements in an \x3csvg\x3e \'+\n          \'parent. Try inspecting the child nodes of the element with React \' +\n          \'ID `%s`.\',\n          updatedIndex,\n          parentID\n        ) : invariant(updatedChild));\n\n        initialChildren \x3d initialChildren || {};\n        initialChildren[parentID] \x3d initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] \x3d updatedChild;\n\n        updatedChildren \x3d updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup \x3d Danger.dangerouslyRenderMarkup(markupList);\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j \x3d 0; j \x3c updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k \x3d 0; update \x3d updates[k]; k++) {\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(\n            update.parentNode,\n            renderedMarkup[update.markupIndex],\n            update.toIndex\n          );\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(\n            update.parentNode,\n            initialChildren[update.parentID][update.fromIndex],\n            update.toIndex\n          );\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          updateTextContent(\n            update.parentNode,\n            update.textContent\n          );\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n\n};\n\nmodule.exports \x3d DOMChildrenOperations;\n\n},{"./Danger":12,"./ReactMultiChildUpdateTypes":63,"./getTextContentAccessor":115,"./invariant":120}],10:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n/*jslint bitwise: true */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\n\nvar DOMPropertyInjection \x3d {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it\'s impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn\'t in here,\n   * it won\'t get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function(domPropertyConfig) {\n    var Properties \x3d domPropertyConfig.Properties || {};\n    var DOMAttributeNames \x3d domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames \x3d domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods \x3d domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(\n        domPropertyConfig.isCustomAttribute\n      );\n    }\n\n    for (var propName in Properties) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        !DOMProperty.isStandardName.hasOwnProperty(propName),\n        \'injectDOMPropertyConfig(...): You\\\'re trying to inject DOM property \' +\n        \'\\\'%s\\\' which has already been injected. You may be accidentally \' +\n        \'injecting the same DOM property config twice, or you may be \' +\n        \'injecting two configs that have conflicting property names.\',\n        propName\n      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));\n\n      DOMProperty.isStandardName[propName] \x3d true;\n\n      var lowerCased \x3d propName.toLowerCase();\n      DOMProperty.getPossibleStandardName[lowerCased] \x3d propName;\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName \x3d DOMAttributeNames[propName];\n        DOMProperty.getPossibleStandardName[attributeName] \x3d propName;\n        DOMProperty.getAttributeName[propName] \x3d attributeName;\n      } else {\n        DOMProperty.getAttributeName[propName] \x3d lowerCased;\n      }\n\n      DOMProperty.getPropertyName[propName] \x3d\n        DOMPropertyNames.hasOwnProperty(propName) ?\n          DOMPropertyNames[propName] :\n          propName;\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        DOMProperty.getMutationMethod[propName] \x3d DOMMutationMethods[propName];\n      } else {\n        DOMProperty.getMutationMethod[propName] \x3d null;\n      }\n\n      var propConfig \x3d Properties[propName];\n      DOMProperty.mustUseAttribute[propName] \x3d\n        propConfig \x26 DOMPropertyInjection.MUST_USE_ATTRIBUTE;\n      DOMProperty.mustUseProperty[propName] \x3d\n        propConfig \x26 DOMPropertyInjection.MUST_USE_PROPERTY;\n      DOMProperty.hasSideEffects[propName] \x3d\n        propConfig \x26 DOMPropertyInjection.HAS_SIDE_EFFECTS;\n      DOMProperty.hasBooleanValue[propName] \x3d\n        propConfig \x26 DOMPropertyInjection.HAS_BOOLEAN_VALUE;\n      DOMProperty.hasNumericValue[propName] \x3d\n        propConfig \x26 DOMPropertyInjection.HAS_NUMERIC_VALUE;\n      DOMProperty.hasPositiveNumericValue[propName] \x3d\n        propConfig \x26 DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE;\n      DOMProperty.hasOverloadedBooleanValue[propName] \x3d\n        propConfig \x26 DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\n      ("production" !\x3d\x3d "development" ? invariant(\n        !DOMProperty.mustUseAttribute[propName] ||\n          !DOMProperty.mustUseProperty[propName],\n        \'DOMProperty: Cannot require using both attribute and property: %s\',\n        propName\n      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||\n        !DOMProperty.mustUseProperty[propName]));\n      ("production" !\x3d\x3d "development" ? invariant(\n        DOMProperty.mustUseProperty[propName] ||\n          !DOMProperty.hasSideEffects[propName],\n        \'DOMProperty: Properties that have side effects must use property: %s\',\n        propName\n      ) : invariant(DOMProperty.mustUseProperty[propName] ||\n        !DOMProperty.hasSideEffects[propName]));\n      ("production" !\x3d\x3d "development" ? invariant(\n        !!DOMProperty.hasBooleanValue[propName] +\n          !!DOMProperty.hasNumericValue[propName] +\n          !!DOMProperty.hasOverloadedBooleanValue[propName] \x3c\x3d 1,\n        \'DOMProperty: Value can be one of boolean, overloaded boolean, or \' +\n        \'numeric value, but not a combination: %s\',\n        propName\n      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +\n        !!DOMProperty.hasNumericValue[propName] +\n        !!DOMProperty.hasOverloadedBooleanValue[propName] \x3c\x3d 1));\n    }\n  }\n};\nvar defaultValueCache \x3d {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   \x3e DOMProperty.isValid[\'id\']\n *   true\n *   \x3e DOMProperty.isValid[\'foobar\']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty \x3d {\n\n  ID_ATTRIBUTE_NAME: \'data-reactid\',\n\n  /**\n   * Checks whether a property name is a standard property.\n   * @type {Object}\n   */\n  isStandardName: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties.\n   * @type {Object}\n   */\n  getPossibleStandardName: {},\n\n  /**\n   * Mapping from normalized names to attribute names that differ. Attribute\n   * names are used when rendering markup or with `*Attribute()`.\n   * @type {Object}\n   */\n  getAttributeName: {},\n\n  /**\n   * Mapping from normalized names to properties on DOM node instances.\n   * (This includes properties that mutate due to external factors.)\n   * @type {Object}\n   */\n  getPropertyName: {},\n\n  /**\n   * Mapping from normalized names to mutation methods. This will only exist if\n   * mutation cannot be set simply by the property or `setAttribute()`.\n   * @type {Object}\n   */\n  getMutationMethod: {},\n\n  /**\n   * Whether the property must be accessed and mutated as an object property.\n   * @type {Object}\n   */\n  mustUseAttribute: {},\n\n  /**\n   * Whether the property must be accessed and mutated using `*Attribute()`.\n   * (This includes anything that fails `\x3cpropName\x3e in \x3celement\x3e`.)\n   * @type {Object}\n   */\n  mustUseProperty: {},\n\n  /**\n   * Whether or not setting a value causes side effects such as triggering\n   * resources to be loaded or text selection changes. We must ensure that\n   * the value is only set if it has changed.\n   * @type {Object}\n   */\n  hasSideEffects: {},\n\n  /**\n   * Whether the property should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasBooleanValue: {},\n\n  /**\n   * Whether the property must be numeric or parse as a\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasNumericValue: {},\n\n  /**\n   * Whether the property must be positive numeric or parse as a positive\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasPositiveNumericValue: {},\n\n  /**\n   * Whether the property can be used as a flag as well as with a value. Removed\n   * when strictly equal to false; present without a value when strictly equal\n   * to true; present with a value otherwise.\n   * @type {Object}\n   */\n  hasOverloadedBooleanValue: {},\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function(attributeName) {\n    for (var i \x3d 0; i \x3c DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn \x3d DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are \'\' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function(nodeName, prop) {\n    var nodeDefaults \x3d defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] \x3d nodeDefaults \x3d {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement \x3d document.createElement(nodeName);\n      nodeDefaults[prop] \x3d testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports \x3d DOMProperty;\n\n},{"./invariant":120}],11:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule DOMPropertyOperations\n * @typechecks static-only\n */\n\n"use strict";\n\nvar DOMProperty \x3d _dereq_("./DOMProperty");\n\nvar escapeTextForBrowser \x3d _dereq_("./escapeTextForBrowser");\nvar memoizeStringOnly \x3d _dereq_("./memoizeStringOnly");\nvar warning \x3d _dereq_("./warning");\n\nfunction shouldIgnoreValue(name, value) {\n  return value \x3d\x3d null ||\n    (DOMProperty.hasBooleanValue[name] \x26\x26 !value) ||\n    (DOMProperty.hasNumericValue[name] \x26\x26 isNaN(value)) ||\n    (DOMProperty.hasPositiveNumericValue[name] \x26\x26 (value \x3c 1)) ||\n    (DOMProperty.hasOverloadedBooleanValue[name] \x26\x26 value \x3d\x3d\x3d false);\n}\n\nvar processAttributeNameAndPrefix \x3d memoizeStringOnly(function(name) {\n  return escapeTextForBrowser(name) + \'\x3d"\';\n});\n\nif ("production" !\x3d\x3d "development") {\n  var reactProps \x3d {\n    children: true,\n    dangerouslySetInnerHTML: true,\n    key: true,\n    ref: true\n  };\n  var warnedProperties \x3d {};\n\n  var warnUnknownProperty \x3d function(name) {\n    if (reactProps.hasOwnProperty(name) \x26\x26 reactProps[name] ||\n        warnedProperties.hasOwnProperty(name) \x26\x26 warnedProperties[name]) {\n      return;\n    }\n\n    warnedProperties[name] \x3d true;\n    var lowerCasedName \x3d name.toLowerCase();\n\n    // data-* attributes should be lowercase; suggest the lowercase version\n    var standardName \x3d (\n      DOMProperty.isCustomAttribute(lowerCasedName) ?\n        lowerCasedName :\n      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?\n        DOMProperty.getPossibleStandardName[lowerCasedName] :\n        null\n    );\n\n    // For now, only warn when we have a suggested correction. This prevents\n    // logging too much when using transferPropsTo.\n    ("production" !\x3d\x3d "development" ? warning(\n      standardName \x3d\x3d null,\n      \'Unknown DOM property \' + name + \'. Did you mean \' + standardName + \'?\'\n    ) : null);\n\n  };\n}\n\n/**\n * Operations for dealing with DOM properties.\n */\nvar DOMPropertyOperations \x3d {\n\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function(id) {\n    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +\n      escapeTextForBrowser(id) + \'"\';\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function(name, value) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) \x26\x26\n        DOMProperty.isStandardName[name]) {\n      if (shouldIgnoreValue(name, value)) {\n        return \'\';\n      }\n      var attributeName \x3d DOMProperty.getAttributeName[name];\n      if (DOMProperty.hasBooleanValue[name] ||\n          (DOMProperty.hasOverloadedBooleanValue[name] \x26\x26 value \x3d\x3d\x3d true)) {\n        return escapeTextForBrowser(attributeName);\n      }\n      return processAttributeNameAndPrefix(attributeName) +\n        escapeTextForBrowser(value) + \'"\';\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value \x3d\x3d null) {\n        return \'\';\n      }\n      return processAttributeNameAndPrefix(name) +\n        escapeTextForBrowser(value) + \'"\';\n    } else if ("production" !\x3d\x3d "development") {\n      warnUnknownProperty(name);\n    }\n    return null;\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function(node, name, value) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) \x26\x26\n        DOMProperty.isStandardName[name]) {\n      var mutationMethod \x3d DOMProperty.getMutationMethod[name];\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(name, value)) {\n        this.deleteValueForProperty(node, name);\n      } else if (DOMProperty.mustUseAttribute[name]) {\n        node.setAttribute(DOMProperty.getAttributeName[name], \'\' + value);\n      } else {\n        var propName \x3d DOMProperty.getPropertyName[name];\n        if (!DOMProperty.hasSideEffects[name] || node[propName] !\x3d\x3d value) {\n          node[propName] \x3d value;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value \x3d\x3d null) {\n        node.removeAttribute(name);\n      } else {\n        node.setAttribute(name, \'\' + value);\n      }\n    } else if ("production" !\x3d\x3d "development") {\n      warnUnknownProperty(name);\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function(node, name) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) \x26\x26\n        DOMProperty.isStandardName[name]) {\n      var mutationMethod \x3d DOMProperty.getMutationMethod[name];\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (DOMProperty.mustUseAttribute[name]) {\n        node.removeAttribute(DOMProperty.getAttributeName[name]);\n      } else {\n        var propName \x3d DOMProperty.getPropertyName[name];\n        var defaultValue \x3d DOMProperty.getDefaultValueForProperty(\n          node.nodeName,\n          propName\n        );\n        if (!DOMProperty.hasSideEffects[name] ||\n            node[propName] !\x3d\x3d defaultValue) {\n          node[propName] \x3d defaultValue;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    } else if ("production" !\x3d\x3d "development") {\n      warnUnknownProperty(name);\n    }\n  }\n\n};\n\nmodule.exports \x3d DOMPropertyOperations;\n\n},{"./DOMProperty":10,"./escapeTextForBrowser":104,"./memoizeStringOnly":129,"./warning":143}],12:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n/*jslint evil: true, sub: true */\n\n"use strict";\n\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\n\nvar createNodesFromMarkup \x3d _dereq_("./createNodesFromMarkup");\nvar emptyFunction \x3d _dereq_("./emptyFunction");\nvar getMarkupWrap \x3d _dereq_("./getMarkupWrap");\nvar invariant \x3d _dereq_("./invariant");\n\nvar OPEN_TAG_NAME_EXP \x3d /^(\x3c[^ \\/\x3e]+)/;\nvar RESULT_INDEX_ATTR \x3d \'data-danger-index\';\n\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(\' \'));\n}\n\nvar Danger \x3d {\n\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array\x3cstring\x3e} markupList List of markup strings to render.\n   * @return {array\x3cDOMElement\x3e} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function(markupList) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      \'dangerouslyRenderMarkup(...): Cannot render markup in a Worker \' +\n      \'thread. This is likely a bug in the framework. Please report \' +\n      \'immediately.\'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    var nodeName;\n    var markupByNodeName \x3d {};\n    // Group markup by `nodeName` if a wrap is necessary, else by \'*\'.\n    for (var i \x3d 0; i \x3c markupList.length; i++) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        markupList[i],\n        \'dangerouslyRenderMarkup(...): Missing markup.\'\n      ) : invariant(markupList[i]));\n      nodeName \x3d getNodeName(markupList[i]);\n      nodeName \x3d getMarkupWrap(nodeName) ? nodeName : \'*\';\n      markupByNodeName[nodeName] \x3d markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] \x3d markupList[i];\n    }\n    var resultList \x3d [];\n    var resultListAssignmentCount \x3d 0;\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n      var markupListByNodeName \x3d markupByNodeName[nodeName];\n\n      // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don\'t rely on that.\n      for (var resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup \x3d markupListByNodeName[resultIndex];\n\n          // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a \x3c character, it\n          // will be discarded below (with an appropriate console.error).\n          markupListByNodeName[resultIndex] \x3d markup.replace(\n            OPEN_TAG_NAME_EXP,\n            // This index will be parsed back out below.\n            \'$1 \' + RESULT_INDEX_ATTR + \'\x3d"\' + resultIndex + \'" \'\n          );\n        }\n      }\n\n      // Render each group of markup with similar wrapping `nodeName`.\n      var renderNodes \x3d createNodesFromMarkup(\n        markupListByNodeName.join(\'\'),\n        emptyFunction // Do nothing special with \x3cscript\x3e tags.\n      );\n\n      for (i \x3d 0; i \x3c renderNodes.length; ++i) {\n        var renderNode \x3d renderNodes[i];\n        if (renderNode.hasAttribute \x26\x26\n            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n\n          resultIndex \x3d +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n\n          ("production" !\x3d\x3d "development" ? invariant(\n            !resultList.hasOwnProperty(resultIndex),\n            \'Danger: Assigning to an already-occupied result index.\'\n          ) : invariant(!resultList.hasOwnProperty(resultIndex)));\n\n          resultList[resultIndex] \x3d renderNode;\n\n          // This should match resultList.length and markupList.length when\n          // we\'re done.\n          resultListAssignmentCount +\x3d 1;\n\n        } else if ("production" !\x3d\x3d "development") {\n          console.error(\n            "Danger: Discarding unexpected node:",\n            renderNode\n          );\n        }\n      }\n    }\n\n    // Although resultList was populated out of order, it should now be a dense\n    // array.\n    ("production" !\x3d\x3d "development" ? invariant(\n      resultListAssignmentCount \x3d\x3d\x3d resultList.length,\n      \'Danger: Did not assign to every index of resultList.\'\n    ) : invariant(resultListAssignmentCount \x3d\x3d\x3d resultList.length));\n\n    ("production" !\x3d\x3d "development" ? invariant(\n      resultList.length \x3d\x3d\x3d markupList.length,\n      \'Danger: Expected markup to render %s nodes, but rendered %s.\',\n      markupList.length,\n      resultList.length\n    ) : invariant(resultList.length \x3d\x3d\x3d markupList.length));\n\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      \'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a \' +\n      \'worker thread. This is likely a bug in the framework. Please report \' +\n      \'immediately.\'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    ("production" !\x3d\x3d "development" ? invariant(markup, \'dangerouslyReplaceNodeWithMarkup(...): Missing markup.\') : invariant(markup));\n    ("production" !\x3d\x3d "development" ? invariant(\n      oldChild.tagName.toLowerCase() !\x3d\x3d \'html\',\n      \'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the \' +\n      \'\x3chtml\x3e node. This is because browser quirks make this unreliable \' +\n      \'and/or slow. If you want to render to the root you must use \' +\n      \'server rendering. See renderComponentToString().\'\n    ) : invariant(oldChild.tagName.toLowerCase() !\x3d\x3d \'html\'));\n\n    var newChild \x3d createNodesFromMarkup(markup, emptyFunction)[0];\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n\n};\n\nmodule.exports \x3d Danger;\n\n},{"./ExecutionEnvironment":21,"./createNodesFromMarkup":100,"./emptyFunction":102,"./getMarkupWrap":112,"./invariant":120}],13:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule DefaultEventPluginOrder\n */\n\n"use strict";\n\n var keyOf \x3d _dereq_("./keyOf");\n\n/**\n * Module that is injectable into `EventPluginHub`, that specifies a\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about\n * plugins, without having to package every one of them. This is better than\n * having plugins be ordered in the same order that they are injected because\n * that ordering would be influenced by the packaging order.\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.\n */\nvar DefaultEventPluginOrder \x3d [\n  keyOf({ResponderEventPlugin: null}),\n  keyOf({SimpleEventPlugin: null}),\n  keyOf({TapEventPlugin: null}),\n  keyOf({EnterLeaveEventPlugin: null}),\n  keyOf({ChangeEventPlugin: null}),\n  keyOf({SelectEventPlugin: null}),\n  keyOf({CompositionEventPlugin: null}),\n  keyOf({BeforeInputEventPlugin: null}),\n  keyOf({AnalyticsEventPlugin: null}),\n  keyOf({MobileSafariClickEventPlugin: null})\n];\n\nmodule.exports \x3d DefaultEventPluginOrder;\n\n},{"./keyOf":127}],14:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EnterLeaveEventPlugin\n * @typechecks static-only\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\nvar EventPropagators \x3d _dereq_("./EventPropagators");\nvar SyntheticMouseEvent \x3d _dereq_("./SyntheticMouseEvent");\n\nvar ReactMount \x3d _dereq_("./ReactMount");\nvar keyOf \x3d _dereq_("./keyOf");\n\nvar topLevelTypes \x3d EventConstants.topLevelTypes;\nvar getFirstReactDOM \x3d ReactMount.getFirstReactDOM;\n\nvar eventTypes \x3d {\n  mouseEnter: {\n    registrationName: keyOf({onMouseEnter: null}),\n    dependencies: [\n      topLevelTypes.topMouseOut,\n      topLevelTypes.topMouseOver\n    ]\n  },\n  mouseLeave: {\n    registrationName: keyOf({onMouseLeave: null}),\n    dependencies: [\n      topLevelTypes.topMouseOut,\n      topLevelTypes.topMouseOver\n    ]\n  }\n};\n\nvar extractedEvents \x3d [null, null];\n\nvar EnterLeaveEventPlugin \x3d {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    if (topLevelType \x3d\x3d\x3d topLevelTypes.topMouseOver \x26\x26\n        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !\x3d\x3d topLevelTypes.topMouseOut \x26\x26\n        topLevelType !\x3d\x3d topLevelTypes.topMouseOver) {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (topLevelTarget.window \x3d\x3d\x3d topLevelTarget) {\n      // `topLevelTarget` is probably a window object.\n      win \x3d topLevelTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc \x3d topLevelTarget.ownerDocument;\n      if (doc) {\n        win \x3d doc.defaultView || doc.parentWindow;\n      } else {\n        win \x3d window;\n      }\n    }\n\n    var from, to;\n    if (topLevelType \x3d\x3d\x3d topLevelTypes.topMouseOut) {\n      from \x3d topLevelTarget;\n      to \x3d\n        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||\n        win;\n    } else {\n      from \x3d win;\n      to \x3d topLevelTarget;\n    }\n\n    if (from \x3d\x3d\x3d to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromID \x3d from ? ReactMount.getID(from) : \'\';\n    var toID \x3d to ? ReactMount.getID(to) : \'\';\n\n    var leave \x3d SyntheticMouseEvent.getPooled(\n      eventTypes.mouseLeave,\n      fromID,\n      nativeEvent\n    );\n    leave.type \x3d \'mouseleave\';\n    leave.target \x3d from;\n    leave.relatedTarget \x3d to;\n\n    var enter \x3d SyntheticMouseEvent.getPooled(\n      eventTypes.mouseEnter,\n      toID,\n      nativeEvent\n    );\n    enter.type \x3d \'mouseenter\';\n    enter.target \x3d to;\n    enter.relatedTarget \x3d from;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);\n\n    extractedEvents[0] \x3d leave;\n    extractedEvents[1] \x3d enter;\n\n    return extractedEvents;\n  }\n\n};\n\nmodule.exports \x3d EnterLeaveEventPlugin;\n\n},{"./EventConstants":15,"./EventPropagators":20,"./ReactMount":61,"./SyntheticMouseEvent":88,"./keyOf":127}],15:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventConstants\n */\n\n"use strict";\n\nvar keyMirror \x3d _dereq_("./keyMirror");\n\nvar PropagationPhases \x3d keyMirror({bubbled: null, captured: null});\n\n/**\n * Types of raw signals from the browser caught at the top level.\n */\nvar topLevelTypes \x3d keyMirror({\n  topBlur: null,\n  topChange: null,\n  topClick: null,\n  topCompositionEnd: null,\n  topCompositionStart: null,\n  topCompositionUpdate: null,\n  topContextMenu: null,\n  topCopy: null,\n  topCut: null,\n  topDoubleClick: null,\n  topDrag: null,\n  topDragEnd: null,\n  topDragEnter: null,\n  topDragExit: null,\n  topDragLeave: null,\n  topDragOver: null,\n  topDragStart: null,\n  topDrop: null,\n  topError: null,\n  topFocus: null,\n  topInput: null,\n  topKeyDown: null,\n  topKeyPress: null,\n  topKeyUp: null,\n  topLoad: null,\n  topMouseDown: null,\n  topMouseMove: null,\n  topMouseOut: null,\n  topMouseOver: null,\n  topMouseUp: null,\n  topPaste: null,\n  topReset: null,\n  topScroll: null,\n  topSelectionChange: null,\n  topSubmit: null,\n  topTextInput: null,\n  topTouchCancel: null,\n  topTouchEnd: null,\n  topTouchMove: null,\n  topTouchStart: null,\n  topWheel: null\n});\n\nvar EventConstants \x3d {\n  topLevelTypes: topLevelTypes,\n  PropagationPhases: PropagationPhases\n};\n\nmodule.exports \x3d EventConstants;\n\n},{"./keyMirror":126}],16:[function(_dereq_,module,exports){\n/**\n * @providesModule EventListener\n * @typechecks\n */\n\nvar emptyFunction \x3d _dereq_("./emptyFunction");\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener \x3d {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. \'click\' or \'mouseover\'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent(\'on\' + eventType, callback);\n      return {\n        remove: function() {\n          target.detachEvent(\'on\' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. \'click\' or \'mouseover\'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function(target, eventType, callback) {\n    if (!target.addEventListener) {\n      if ("production" !\x3d\x3d "development") {\n        console.error(\n          \'Attempted to listen to events during the capture phase on a \' +\n          \'browser that does not support the capture phase. Your application \' +\n          \'will not receive some events.\'\n        );\n      }\n      return {\n        remove: emptyFunction\n      };\n    } else {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    }\n  },\n\n  registerDefault: function() {}\n};\n\nmodule.exports \x3d EventListener;\n\n},{"./emptyFunction":102}],17:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPluginHub\n */\n\n"use strict";\n\nvar EventPluginRegistry \x3d _dereq_("./EventPluginRegistry");\nvar EventPluginUtils \x3d _dereq_("./EventPluginUtils");\n\nvar accumulate \x3d _dereq_("./accumulate");\nvar forEachAccumulated \x3d _dereq_("./forEachAccumulated");\nvar invariant \x3d _dereq_("./invariant");\nvar isEventSupported \x3d _dereq_("./isEventSupported");\nvar monitorCodeUse \x3d _dereq_("./monitorCodeUse");\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank \x3d {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue \x3d null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\nvar executeDispatchesAndRelease \x3d function(event) {\n  if (event) {\n    var executeDispatch \x3d EventPluginUtils.executeDispatch;\n    // Plugins can provide custom behavior when dispatching events.\n    var PluginModule \x3d EventPluginRegistry.getPluginModuleForEvent(event);\n    if (PluginModule \x26\x26 PluginModule.executeDispatch) {\n      executeDispatch \x3d PluginModule.executeDispatch;\n    }\n    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle \x3d null;\n\nfunction validateInstanceHandle() {\n  var invalid \x3d !InstanceHandle||\n    !InstanceHandle.traverseTwoPhase ||\n    !InstanceHandle.traverseEnterLeave;\n  if (invalid) {\n    throw new Error(\'InstanceHandle not injected before use!\');\n  }\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub \x3d {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function(InjectedInstanceHandle) {\n      InstanceHandle \x3d InjectedInstanceHandle;\n      if ("production" !\x3d\x3d "development") {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function() {\n      if ("production" !\x3d\x3d "development") {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function(id, registrationName, listener) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      !listener || typeof listener \x3d\x3d\x3d \'function\',\n      \'Expected %s listener to be a function, instead got type %s\',\n      registrationName, typeof listener\n    ) : invariant(!listener || typeof listener \x3d\x3d\x3d \'function\'));\n\n    if ("production" !\x3d\x3d "development") {\n      // IE8 has no API for event capturing and the `onScroll` event doesn\'t\n      // bubble.\n      if (registrationName \x3d\x3d\x3d \'onScroll\' \x26\x26\n          !isEventSupported(\'scroll\', true)) {\n        monitorCodeUse(\'react_no_scroll_event\');\n        console.warn(\'This browser doesn\\\'t support the `onScroll` event\');\n      }\n    }\n    var bankForRegistrationName \x3d\n      listenerBank[registrationName] || (listenerBank[registrationName] \x3d {});\n    bankForRegistrationName[id] \x3d listener;\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function(id, registrationName) {\n    var bankForRegistrationName \x3d listenerBank[registrationName];\n    return bankForRegistrationName \x26\x26 bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function(id, registrationName) {\n    var bankForRegistrationName \x3d listenerBank[registrationName];\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function(id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var events;\n    var plugins \x3d EventPluginRegistry.plugins;\n    for (var i \x3d 0, l \x3d plugins.length; i \x3c l; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin \x3d plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents \x3d possiblePlugin.extractEvents(\n          topLevelType,\n          topLevelTarget,\n          topLevelTargetID,\n          nativeEvent\n        );\n        if (extractedEvents) {\n          events \x3d accumulate(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function(events) {\n    if (events) {\n      eventQueue \x3d accumulate(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function() {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue \x3d eventQueue;\n    eventQueue \x3d null;\n    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);\n    ("production" !\x3d\x3d "development" ? invariant(\n      !eventQueue,\n      \'processEventQueue(): Additional events were enqueued while processing \' +\n      \'an event queue. Support for this has not yet been implemented.\'\n    ) : invariant(!eventQueue));\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function() {\n    listenerBank \x3d {};\n  },\n\n  __getListenerBank: function() {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports \x3d EventPluginHub;\n\n},{"./EventPluginRegistry":18,"./EventPluginUtils":19,"./accumulate":94,"./forEachAccumulated":107,"./invariant":120,"./isEventSupported":121,"./monitorCodeUse":134}],18:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder \x3d null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins \x3d {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule \x3d namesToPlugins[pluginName];\n    var pluginIndex \x3d EventPluginOrder.indexOf(pluginName);\n    ("production" !\x3d\x3d "development" ? invariant(\n      pluginIndex \x3e -1,\n      \'EventPluginRegistry: Cannot inject event plugins that do not exist in \' +\n      \'the plugin ordering, `%s`.\',\n      pluginName\n    ) : invariant(pluginIndex \x3e -1));\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    ("production" !\x3d\x3d "development" ? invariant(\n      PluginModule.extractEvents,\n      \'EventPluginRegistry: Event plugins must implement an `extractEvents` \' +\n      \'method, but `%s` does not.\',\n      pluginName\n    ) : invariant(PluginModule.extractEvents));\n    EventPluginRegistry.plugins[pluginIndex] \x3d PluginModule;\n    var publishedEvents \x3d PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        publishEventForPlugin(\n          publishedEvents[eventName],\n          PluginModule,\n          eventName\n        ),\n        \'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.\',\n        eventName,\n        pluginName\n      ) : invariant(publishEventForPlugin(\n        publishedEvents[eventName],\n        PluginModule,\n        eventName\n      )));\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),\n    \'EventPluginHub: More than one plugin attempted to publish the same \' +\n    \'event name, `%s`.\',\n    eventName\n  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] \x3d dispatchConfig;\n\n  var phasedRegistrationNames \x3d dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName \x3d phasedRegistrationNames[phaseName];\n        publishRegistrationName(\n          phasedRegistrationName,\n          PluginModule,\n          eventName\n        );\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(\n      dispatchConfig.registrationName,\n      PluginModule,\n      eventName\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    !EventPluginRegistry.registrationNameModules[registrationName],\n    \'EventPluginHub: More than one plugin attempted to publish the same \' +\n    \'registration name, `%s`.\',\n    registrationName\n  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));\n  EventPluginRegistry.registrationNameModules[registrationName] \x3d PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] \x3d\n    PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry \x3d {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function(InjectedEventPluginOrder) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      !EventPluginOrder,\n      \'EventPluginRegistry: Cannot inject event plugin ordering more than \' +\n      \'once. You are likely trying to load more than one copy of React.\'\n    ) : invariant(!EventPluginOrder));\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder \x3d Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function(injectedNamesToPlugins) {\n    var isOrderingDirty \x3d false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule \x3d injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) ||\n          namesToPlugins[pluginName] !\x3d\x3d PluginModule) {\n        ("production" !\x3d\x3d "development" ? invariant(\n          !namesToPlugins[pluginName],\n          \'EventPluginRegistry: Cannot inject two different event plugins \' +\n          \'using the same name, `%s`.\',\n          pluginName\n        ) : invariant(!namesToPlugins[pluginName]));\n        namesToPlugins[pluginName] \x3d PluginModule;\n        isOrderingDirty \x3d true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function(event) {\n    var dispatchConfig \x3d event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[\n        dispatchConfig.registrationName\n      ] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule \x3d EventPluginRegistry.registrationNameModules[\n        dispatchConfig.phasedRegistrationNames[phase]\n      ];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function() {\n    EventPluginOrder \x3d null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length \x3d 0;\n\n    var eventNameDispatchConfigs \x3d EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules \x3d EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports \x3d EventPluginRegistry;\n\n},{"./invariant":120}],19:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPluginUtils\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Injected dependencies:\n */\n\n/**\n * - `Mount`: [required] Module that can convert between React dom IDs and\n *   actual node references.\n */\nvar injection \x3d {\n  Mount: null,\n  injectMount: function(InjectedMount) {\n    injection.Mount \x3d InjectedMount;\n    if ("production" !\x3d\x3d "development") {\n      ("production" !\x3d\x3d "development" ? invariant(\n        InjectedMount \x26\x26 InjectedMount.getNode,\n        \'EventPluginUtils.injection.injectMount(...): Injected Mount module \' +\n        \'is missing getNode.\'\n      ) : invariant(InjectedMount \x26\x26 InjectedMount.getNode));\n    }\n  }\n};\n\nvar topLevelTypes \x3d EventConstants.topLevelTypes;\n\nfunction isEndish(topLevelType) {\n  return topLevelType \x3d\x3d\x3d topLevelTypes.topMouseUp ||\n         topLevelType \x3d\x3d\x3d topLevelTypes.topTouchEnd ||\n         topLevelType \x3d\x3d\x3d topLevelTypes.topTouchCancel;\n}\n\nfunction isMoveish(topLevelType) {\n  return topLevelType \x3d\x3d\x3d topLevelTypes.topMouseMove ||\n         topLevelType \x3d\x3d\x3d topLevelTypes.topTouchMove;\n}\nfunction isStartish(topLevelType) {\n  return topLevelType \x3d\x3d\x3d topLevelTypes.topMouseDown ||\n         topLevelType \x3d\x3d\x3d topLevelTypes.topTouchStart;\n}\n\n\nvar validateEventDispatches;\nif ("production" !\x3d\x3d "development") {\n  validateEventDispatches \x3d function(event) {\n    var dispatchListeners \x3d event._dispatchListeners;\n    var dispatchIDs \x3d event._dispatchIDs;\n\n    var listenersIsArr \x3d Array.isArray(dispatchListeners);\n    var idsIsArr \x3d Array.isArray(dispatchIDs);\n    var IDsLen \x3d idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;\n    var listenersLen \x3d listenersIsArr ?\n      dispatchListeners.length :\n      dispatchListeners ? 1 : 0;\n\n    ("production" !\x3d\x3d "development" ? invariant(\n      idsIsArr \x3d\x3d\x3d listenersIsArr \x26\x26 IDsLen \x3d\x3d\x3d listenersLen,\n      \'EventPluginUtils: Invalid `event`.\'\n    ) : invariant(idsIsArr \x3d\x3d\x3d listenersIsArr \x26\x26 IDsLen \x3d\x3d\x3d listenersLen));\n  };\n}\n\n/**\n * Invokes `cb(event, listener, id)`. Avoids using call if no scope is\n * provided. The `(listener,id)` pair effectively forms the "dispatch" but are\n * kept separate to conserve memory.\n */\nfunction forEachEventDispatch(event, cb) {\n  var dispatchListeners \x3d event._dispatchListeners;\n  var dispatchIDs \x3d event._dispatchIDs;\n  if ("production" !\x3d\x3d "development") {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i \x3d 0; i \x3c dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      cb(event, dispatchListeners[i], dispatchIDs[i]);\n    }\n  } else if (dispatchListeners) {\n    cb(event, dispatchListeners, dispatchIDs);\n  }\n}\n\n/**\n * Default implementation of PluginModule.executeDispatch().\n * @param {SyntheticEvent} SyntheticEvent to handle\n * @param {function} Application-level callback\n * @param {string} domID DOM id to pass to the callback.\n */\nfunction executeDispatch(event, listener, domID) {\n  event.currentTarget \x3d injection.Mount.getNode(domID);\n  var returnValue \x3d listener(event, domID);\n  event.currentTarget \x3d null;\n  return returnValue;\n}\n\n/**\n * Standard/simple iteration through an event\'s collected dispatches.\n */\nfunction executeDispatchesInOrder(event, executeDispatch) {\n  forEachEventDispatch(event, executeDispatch);\n  event._dispatchListeners \x3d null;\n  event._dispatchIDs \x3d null;\n}\n\n/**\n * Standard/simple iteration through an event\'s collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return id of the first dispatch execution who\'s listener returns true, or\n * null if no listener returned true.\n */\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {\n  var dispatchListeners \x3d event._dispatchListeners;\n  var dispatchIDs \x3d event._dispatchIDs;\n  if ("production" !\x3d\x3d "development") {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i \x3d 0; i \x3c dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      if (dispatchListeners[i](event, dispatchIDs[i])) {\n        return dispatchIDs[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchIDs)) {\n      return dispatchIDs;\n    }\n  }\n  return null;\n}\n\n/**\n * @see executeDispatchesInOrderStopAtTrueImpl\n */\nfunction executeDispatchesInOrderStopAtTrue(event) {\n  var ret \x3d executeDispatchesInOrderStopAtTrueImpl(event);\n  event._dispatchIDs \x3d null;\n  event._dispatchListeners \x3d null;\n  return ret;\n}\n\n/**\n * Execution of a "direct" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn\'t really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with "direct" dispatches.\n *\n * @return The return value of executing the single dispatch.\n */\nfunction executeDirectDispatch(event) {\n  if ("production" !\x3d\x3d "development") {\n    validateEventDispatches(event);\n  }\n  var dispatchListener \x3d event._dispatchListeners;\n  var dispatchID \x3d event._dispatchIDs;\n  ("production" !\x3d\x3d "development" ? invariant(\n    !Array.isArray(dispatchListener),\n    \'executeDirectDispatch(...): Invalid `event`.\'\n  ) : invariant(!Array.isArray(dispatchListener)));\n  var res \x3d dispatchListener ?\n    dispatchListener(event, dispatchID) :\n    null;\n  event._dispatchListeners \x3d null;\n  event._dispatchIDs \x3d null;\n  return res;\n}\n\n/**\n * @param {SyntheticEvent} event\n * @return {bool} True iff number of dispatches accumulated is greater than 0.\n */\nfunction hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n\n/**\n * General utilities that are useful in creating custom Event Plugins.\n */\nvar EventPluginUtils \x3d {\n  isEndish: isEndish,\n  isMoveish: isMoveish,\n  isStartish: isStartish,\n\n  executeDirectDispatch: executeDirectDispatch,\n  executeDispatch: executeDispatch,\n  executeDispatchesInOrder: executeDispatchesInOrder,\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,\n  hasDispatches: hasDispatches,\n  injection: injection,\n  useTouchEvents: false\n};\n\nmodule.exports \x3d EventPluginUtils;\n\n},{"./EventConstants":15,"./invariant":120}],20:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPropagators\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\nvar EventPluginHub \x3d _dereq_("./EventPluginHub");\n\nvar accumulate \x3d _dereq_("./accumulate");\nvar forEachAccumulated \x3d _dereq_("./forEachAccumulated");\n\nvar PropagationPhases \x3d EventConstants.PropagationPhases;\nvar getListener \x3d EventPluginHub.getListener;\n\n/**\n * Some event types have a notion of different registration names for different\n * "phases" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(id, event, propagationPhase) {\n  var registrationName \x3d\n    event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(id, registrationName);\n}\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event\'s members allows us to not have to create a wrapping\n * "dispatch" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(domID, upwards, event) {\n  if ("production" !\x3d\x3d "development") {\n    if (!domID) {\n      throw new Error(\'Dispatching id must not be null\');\n    }\n  }\n  var phase \x3d upwards ? PropagationPhases.bubbled : PropagationPhases.captured;\n  var listener \x3d listenerAtPhase(domID, event, phase);\n  if (listener) {\n    event._dispatchListeners \x3d accumulate(event._dispatchListeners, listener);\n    event._dispatchIDs \x3d accumulate(event._dispatchIDs, domID);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We can not perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event \x26\x26 event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(\n      event.dispatchMarker,\n      accumulateDirectionalDispatches,\n      event\n    );\n  }\n}\n\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(id, ignoredDirection, event) {\n  if (event \x26\x26 event.dispatchConfig.registrationName) {\n    var registrationName \x3d event.dispatchConfig.registrationName;\n    var listener \x3d getListener(id, registrationName);\n    if (listener) {\n      event._dispatchListeners \x3d accumulate(event._dispatchListeners, listener);\n      event._dispatchIDs \x3d accumulate(event._dispatchIDs, id);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event \x26\x26 event.dispatchConfig.registrationName) {\n    accumulateDispatches(event.dispatchMarker, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(\n    fromID,\n    toID,\n    accumulateDispatches,\n    leave,\n    enter\n  );\n}\n\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of "dispatch ready event objects" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\nvar EventPropagators \x3d {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\n\nmodule.exports \x3d EventPropagators;\n\n},{"./EventConstants":15,"./EventPluginHub":17,"./accumulate":94,"./forEachAccumulated":107}],21:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ExecutionEnvironment\n */\n\n/*jslint evil: true */\n\n"use strict";\n\nvar canUseDOM \x3d !!(\n  typeof window !\x3d\x3d \'undefined\' \x26\x26\n  window.document \x26\x26\n  window.document.createElement\n);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment \x3d {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !\x3d\x3d \'undefined\',\n\n  canUseEventListeners:\n    canUseDOM \x26\x26 !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM \x26\x26 !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports \x3d ExecutionEnvironment;\n\n},{}],22:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule HTMLDOMPropertyConfig\n */\n\n/*jslint bitwise: true*/\n\n"use strict";\n\nvar DOMProperty \x3d _dereq_("./DOMProperty");\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\n\nvar MUST_USE_ATTRIBUTE \x3d DOMProperty.injection.MUST_USE_ATTRIBUTE;\nvar MUST_USE_PROPERTY \x3d DOMProperty.injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE \x3d DOMProperty.injection.HAS_BOOLEAN_VALUE;\nvar HAS_SIDE_EFFECTS \x3d DOMProperty.injection.HAS_SIDE_EFFECTS;\nvar HAS_NUMERIC_VALUE \x3d DOMProperty.injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE \x3d\n  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE \x3d\n  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\nvar hasSVG;\nif (ExecutionEnvironment.canUseDOM) {\n  var implementation \x3d document.implementation;\n  hasSVG \x3d (\n    implementation \x26\x26\n    implementation.hasFeature \x26\x26\n    implementation.hasFeature(\n      \'http://www.w3.org/TR/SVG11/feature#BasicStructure\',\n      \'1.1\'\n    )\n  );\n}\n\n\nvar HTMLDOMPropertyConfig \x3d {\n  isCustomAttribute: RegExp.prototype.test.bind(\n    /^(data|aria)-[a-z_][a-z\\d_.\\-]*$/\n  ),\n  Properties: {\n    /**\n     * Standard Properties\n     */\n    accept: null,\n    accessKey: null,\n    action: null,\n    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    allowTransparency: MUST_USE_ATTRIBUTE,\n    alt: null,\n    async: HAS_BOOLEAN_VALUE,\n    autoComplete: null,\n    // autoFocus is polyfilled/normalized by AutoFocusMixin\n    // autoFocus: HAS_BOOLEAN_VALUE,\n    autoPlay: HAS_BOOLEAN_VALUE,\n    cellPadding: null,\n    cellSpacing: null,\n    charSet: MUST_USE_ATTRIBUTE,\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    // To set className on SVG elements, it\'s necessary to use .setAttribute;\n    // this works on HTML elements too in all browsers except IE8. Conveniently,\n    // IE8 doesn\'t support SVG and so we can simply use the attribute in\n    // browsers that support SVG and the property in browsers that don\'t,\n    // regardless of whether the element is HTML or SVG.\n    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,\n    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    colSpan: null,\n    content: null,\n    contentEditable: null,\n    contextMenu: MUST_USE_ATTRIBUTE,\n    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    coords: null,\n    crossOrigin: null,\n    data: null, // For `\x3cobject /\x3e` acts as `src`.\n    dateTime: MUST_USE_ATTRIBUTE,\n    defer: HAS_BOOLEAN_VALUE,\n    dir: null,\n    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,\n    draggable: null,\n    encType: null,\n    form: MUST_USE_ATTRIBUTE,\n    formNoValidate: HAS_BOOLEAN_VALUE,\n    frameBorder: MUST_USE_ATTRIBUTE,\n    height: MUST_USE_ATTRIBUTE,\n    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    href: null,\n    hrefLang: null,\n    htmlFor: null,\n    httpEquiv: null,\n    icon: null,\n    id: MUST_USE_PROPERTY,\n    label: null,\n    lang: null,\n    list: null,\n    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    max: null,\n    maxLength: MUST_USE_ATTRIBUTE,\n    media: MUST_USE_ATTRIBUTE,\n    mediaGroup: null,\n    method: null,\n    min: null,\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    name: null,\n    noValidate: HAS_BOOLEAN_VALUE,\n    open: null,\n    pattern: null,\n    placeholder: null,\n    poster: null,\n    preload: null,\n    radioGroup: null,\n    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    rel: null,\n    required: HAS_BOOLEAN_VALUE,\n    role: MUST_USE_ATTRIBUTE,\n    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    rowSpan: null,\n    sandbox: null,\n    scope: null,\n    scrollLeft: MUST_USE_PROPERTY,\n    scrolling: null,\n    scrollTop: MUST_USE_PROPERTY,\n    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    shape: null,\n    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    sizes: MUST_USE_ATTRIBUTE,\n    span: HAS_POSITIVE_NUMERIC_VALUE,\n    spellCheck: null,\n    src: null,\n    srcDoc: MUST_USE_PROPERTY,\n    srcSet: MUST_USE_ATTRIBUTE,\n    start: HAS_NUMERIC_VALUE,\n    step: null,\n    style: null,\n    tabIndex: null,\n    target: null,\n    title: null,\n    type: null,\n    useMap: null,\n    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,\n    width: MUST_USE_ATTRIBUTE,\n    wmode: MUST_USE_ATTRIBUTE,\n\n    /**\n     * Non-standard Properties\n     */\n    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints\n    autoCorrect: null, // Supported in Mobile Safari for keyboard hints\n    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html\n    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html\n    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html\n    property: null // Supports OG in meta tags\n  },\n  DOMAttributeNames: {\n    className: \'class\',\n    htmlFor: \'for\',\n    httpEquiv: \'http-equiv\'\n  },\n  DOMPropertyNames: {\n    autoCapitalize: \'autocapitalize\',\n    autoComplete: \'autocomplete\',\n    autoCorrect: \'autocorrect\',\n    autoFocus: \'autofocus\',\n    autoPlay: \'autoplay\',\n    encType: \'enctype\',\n    hrefLang: \'hreflang\',\n    radioGroup: \'radiogroup\',\n    spellCheck: \'spellcheck\',\n    srcDoc: \'srcdoc\',\n    srcSet: \'srcset\'\n  }\n};\n\nmodule.exports \x3d HTMLDOMPropertyConfig;\n\n},{"./DOMProperty":10,"./ExecutionEnvironment":21}],23:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule LinkedValueUtils\n * @typechecks static-only\n */\n\n"use strict";\n\nvar ReactPropTypes \x3d _dereq_("./ReactPropTypes");\n\nvar invariant \x3d _dereq_("./invariant");\n\nvar hasReadOnlyValue \x3d {\n  \'button\': true,\n  \'checkbox\': true,\n  \'image\': true,\n  \'hidden\': true,\n  \'radio\': true,\n  \'reset\': true,\n  \'submit\': true\n};\n\nfunction _assertSingleLink(input) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    input.props.checkedLink \x3d\x3d null || input.props.valueLink \x3d\x3d null,\n    \'Cannot provide a checkedLink and a valueLink. If you want to use \' +\n    \'checkedLink, you probably don\\\'t want to use valueLink and vice versa.\'\n  ) : invariant(input.props.checkedLink \x3d\x3d null || input.props.valueLink \x3d\x3d null));\n}\nfunction _assertValueLink(input) {\n  _assertSingleLink(input);\n  ("production" !\x3d\x3d "development" ? invariant(\n    input.props.value \x3d\x3d null \x26\x26 input.props.onChange \x3d\x3d null,\n    \'Cannot provide a valueLink and a value or onChange event. If you want \' +\n    \'to use value or onChange, you probably don\\\'t want to use valueLink.\'\n  ) : invariant(input.props.value \x3d\x3d null \x26\x26 input.props.onChange \x3d\x3d null));\n}\n\nfunction _assertCheckedLink(input) {\n  _assertSingleLink(input);\n  ("production" !\x3d\x3d "development" ? invariant(\n    input.props.checked \x3d\x3d null \x26\x26 input.props.onChange \x3d\x3d null,\n    \'Cannot provide a checkedLink and a checked property or onChange event. \' +\n    \'If you want to use checked or onChange, you probably don\\\'t want to \' +\n    \'use checkedLink\'\n  ) : invariant(input.props.checked \x3d\x3d null \x26\x26 input.props.onChange \x3d\x3d null));\n}\n\n/**\n * @param {SyntheticEvent} e change event to handle\n */\nfunction _handleLinkedValueChange(e) {\n  /*jshint validthis:true */\n  this.props.valueLink.requestChange(e.target.value);\n}\n\n/**\n  * @param {SyntheticEvent} e change event to handle\n  */\nfunction _handleLinkedCheckChange(e) {\n  /*jshint validthis:true */\n  this.props.checkedLink.requestChange(e.target.checked);\n}\n\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\nvar LinkedValueUtils \x3d {\n  Mixin: {\n    propTypes: {\n      value: function(props, propName, componentName) {\n        if (!props[propName] ||\n            hasReadOnlyValue[props.type] ||\n            props.onChange ||\n            props.readOnly ||\n            props.disabled) {\n          return;\n        }\n        return new Error(\n          \'You provided a `value` prop to a form field without an \' +\n          \'`onChange` handler. This will render a read-only field. If \' +\n          \'the field should be mutable use `defaultValue`. Otherwise, \' +\n          \'set either `onChange` or `readOnly`.\'\n        );\n      },\n      checked: function(props, propName, componentName) {\n        if (!props[propName] ||\n            props.onChange ||\n            props.readOnly ||\n            props.disabled) {\n          return;\n        }\n        return new Error(\n          \'You provided a `checked` prop to a form field without an \' +\n          \'`onChange` handler. This will render a read-only field. If \' +\n          \'the field should be mutable use `defaultChecked`. Otherwise, \' +\n          \'set either `onChange` or `readOnly`.\'\n        );\n      },\n      onChange: ReactPropTypes.func\n    }\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function(input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n      return input.props.valueLink.value;\n    }\n    return input.props.value;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function(input) {\n    if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n      return input.props.checkedLink.value;\n    }\n    return input.props.checked;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {function} change callback either from onChange prop or link.\n   */\n  getOnChange: function(input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n      return _handleLinkedValueChange;\n    } else if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n      return _handleLinkedCheckChange;\n    }\n    return input.props.onChange;\n  }\n};\n\nmodule.exports \x3d LinkedValueUtils;\n\n},{"./ReactPropTypes":69,"./invariant":120}],24:[function(_dereq_,module,exports){\n/**\n * Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule LocalEventTrapMixin\n */\n\n"use strict";\n\nvar ReactBrowserEventEmitter \x3d _dereq_("./ReactBrowserEventEmitter");\n\nvar accumulate \x3d _dereq_("./accumulate");\nvar forEachAccumulated \x3d _dereq_("./forEachAccumulated");\nvar invariant \x3d _dereq_("./invariant");\n\nfunction remove(event) {\n  event.remove();\n}\n\nvar LocalEventTrapMixin \x3d {\n  trapBubbledEvent:function(topLevelType, handlerBaseName) {\n    ("production" !\x3d\x3d "development" ? invariant(this.isMounted(), \'Must be mounted to trap events\') : invariant(this.isMounted()));\n    var listener \x3d ReactBrowserEventEmitter.trapBubbledEvent(\n      topLevelType,\n      handlerBaseName,\n      this.getDOMNode()\n    );\n    this._localEventListeners \x3d accumulate(this._localEventListeners, listener);\n  },\n\n  // trapCapturedEvent would look nearly identical. We don\'t implement that\n  // method because it isn\'t currently needed.\n\n  componentWillUnmount:function() {\n    if (this._localEventListeners) {\n      forEachAccumulated(this._localEventListeners, remove);\n    }\n  }\n};\n\nmodule.exports \x3d LocalEventTrapMixin;\n\n},{"./ReactBrowserEventEmitter":29,"./accumulate":94,"./forEachAccumulated":107,"./invariant":120}],25:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule MobileSafariClickEventPlugin\n * @typechecks static-only\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\n\nvar emptyFunction \x3d _dereq_("./emptyFunction");\n\nvar topLevelTypes \x3d EventConstants.topLevelTypes;\n\n/**\n * Mobile Safari does not fire properly bubble click events on non-interactive\n * elements, which means delegated click listeners do not fire. The workaround\n * for this bug involves attaching an empty click listener on the target node.\n *\n * This particular plugin works around the bug by attaching an empty click\n * listener on `touchstart` (which does fire on every element).\n */\nvar MobileSafariClickEventPlugin \x3d {\n\n  eventTypes: null,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    if (topLevelType \x3d\x3d\x3d topLevelTypes.topTouchStart) {\n      var target \x3d nativeEvent.target;\n      if (target \x26\x26 !target.onclick) {\n        target.onclick \x3d emptyFunction;\n      }\n    }\n  }\n\n};\n\nmodule.exports \x3d MobileSafariClickEventPlugin;\n\n},{"./EventConstants":15,"./emptyFunction":102}],26:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule PooledClass\n */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler \x3d function(copyFieldsFrom) {\n  var Klass \x3d this;\n  if (Klass.instancePool.length) {\n    var instance \x3d Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler \x3d function(a1, a2) {\n  var Klass \x3d this;\n  if (Klass.instancePool.length) {\n    var instance \x3d Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler \x3d function(a1, a2, a3) {\n  var Klass \x3d this;\n  if (Klass.instancePool.length) {\n    var instance \x3d Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fiveArgumentPooler \x3d function(a1, a2, a3, a4, a5) {\n  var Klass \x3d this;\n  if (Klass.instancePool.length) {\n    var instance \x3d Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4, a5);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4, a5);\n  }\n};\n\nvar standardReleaser \x3d function(instance) {\n  var Klass \x3d this;\n  ("production" !\x3d\x3d "development" ? invariant(\n    instance instanceof Klass,\n    \'Trying to release an instance into a pool of a different type.\'\n  ) : invariant(instance instanceof Klass));\n  if (instance.destructor) {\n    instance.destructor();\n  }\n  if (Klass.instancePool.length \x3c Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE \x3d 10;\nvar DEFAULT_POOLER \x3d oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances (optional).\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo \x3d function(CopyConstructor, pooler) {\n  var NewKlass \x3d CopyConstructor;\n  NewKlass.instancePool \x3d [];\n  NewKlass.getPooled \x3d pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize \x3d DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release \x3d standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass \x3d {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fiveArgumentPooler: fiveArgumentPooler\n};\n\nmodule.exports \x3d PooledClass;\n\n},{"./invariant":120}],27:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule React\n */\n\n"use strict";\n\nvar DOMPropertyOperations \x3d _dereq_("./DOMPropertyOperations");\nvar EventPluginUtils \x3d _dereq_("./EventPluginUtils");\nvar ReactChildren \x3d _dereq_("./ReactChildren");\nvar ReactComponent \x3d _dereq_("./ReactComponent");\nvar ReactCompositeComponent \x3d _dereq_("./ReactCompositeComponent");\nvar ReactContext \x3d _dereq_("./ReactContext");\nvar ReactCurrentOwner \x3d _dereq_("./ReactCurrentOwner");\nvar ReactDescriptor \x3d _dereq_("./ReactDescriptor");\nvar ReactDOM \x3d _dereq_("./ReactDOM");\nvar ReactDOMComponent \x3d _dereq_("./ReactDOMComponent");\nvar ReactDefaultInjection \x3d _dereq_("./ReactDefaultInjection");\nvar ReactInstanceHandles \x3d _dereq_("./ReactInstanceHandles");\nvar ReactMount \x3d _dereq_("./ReactMount");\nvar ReactMultiChild \x3d _dereq_("./ReactMultiChild");\nvar ReactPerf \x3d _dereq_("./ReactPerf");\nvar ReactPropTypes \x3d _dereq_("./ReactPropTypes");\nvar ReactServerRendering \x3d _dereq_("./ReactServerRendering");\nvar ReactTextComponent \x3d _dereq_("./ReactTextComponent");\n\nvar onlyChild \x3d _dereq_("./onlyChild");\nvar warning \x3d _dereq_("./warning");\n\nReactDefaultInjection.inject();\n\n// Specifying arguments isn\'t necessary since we just use apply anyway, but it\n// makes it clear for those actually consuming this API.\nfunction createDescriptor(type, props, children) {\n  var args \x3d Array.prototype.slice.call(arguments, 1);\n  return type.apply(null, args);\n}\n\nif ("production" !\x3d\x3d "development") {\n  var _warnedForDeprecation \x3d false;\n}\n\nvar React \x3d {\n  Children: {\n    map: ReactChildren.map,\n    forEach: ReactChildren.forEach,\n    count: ReactChildren.count,\n    only: onlyChild\n  },\n  DOM: ReactDOM,\n  PropTypes: ReactPropTypes,\n  initializeTouchEvents: function(shouldUseTouch) {\n    EventPluginUtils.useTouchEvents \x3d shouldUseTouch;\n  },\n  createClass: ReactCompositeComponent.createClass,\n  createDescriptor: function() {\n    if ("production" !\x3d\x3d "development") {\n      ("production" !\x3d\x3d "development" ? warning(\n        _warnedForDeprecation,\n        \'React.createDescriptor is deprecated and will be removed in the \' +\n        \'next version of React. Use React.createElement instead.\'\n      ) : null);\n      _warnedForDeprecation \x3d true;\n    }\n    return createDescriptor.apply(this, arguments);\n  },\n  createElement: createDescriptor,\n  constructAndRenderComponent: ReactMount.constructAndRenderComponent,\n  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,\n  renderComponent: ReactPerf.measure(\n    \'React\',\n    \'renderComponent\',\n    ReactMount.renderComponent\n  ),\n  renderComponentToString: ReactServerRendering.renderComponentToString,\n  renderComponentToStaticMarkup:\n    ReactServerRendering.renderComponentToStaticMarkup,\n  unmountComponentAtNode: ReactMount.unmountComponentAtNode,\n  isValidClass: ReactDescriptor.isValidFactory,\n  isValidComponent: ReactDescriptor.isValidDescriptor,\n  withContext: ReactContext.withContext,\n  __internals: {\n    Component: ReactComponent,\n    CurrentOwner: ReactCurrentOwner,\n    DOMComponent: ReactDOMComponent,\n    DOMPropertyOperations: DOMPropertyOperations,\n    InstanceHandles: ReactInstanceHandles,\n    Mount: ReactMount,\n    MultiChild: ReactMultiChild,\n    TextComponent: ReactTextComponent\n  }\n};\n\nif ("production" !\x3d\x3d "development") {\n  var ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\n  if (ExecutionEnvironment.canUseDOM \x26\x26\n      window.top \x3d\x3d\x3d window.self \x26\x26\n      navigator.userAgent.indexOf(\'Chrome\') \x3e -1) {\n    console.debug(\n      \'Download the React DevTools for a better development experience: \' +\n      \'http://fb.me/react-devtools\'\n    );\n\n    var expectedFeatures \x3d [\n      // shims\n      Array.isArray,\n      Array.prototype.every,\n      Array.prototype.forEach,\n      Array.prototype.indexOf,\n      Array.prototype.map,\n      Date.now,\n      Function.prototype.bind,\n      Object.keys,\n      String.prototype.split,\n      String.prototype.trim,\n\n      // shams\n      Object.create,\n      Object.freeze\n    ];\n\n    for (var i in expectedFeatures) {\n      if (!expectedFeatures[i]) {\n        console.error(\n          \'One or more ES5 shim/shams expected by React are not available: \' +\n          \'http://fb.me/react-warning-polyfills\'\n        );\n        break;\n      }\n    }\n  }\n}\n\n// Version exists only in the open-source version of React, not in Facebook\'s\n// internal version.\nReact.version \x3d \'0.11.2\';\n\nmodule.exports \x3d React;\n\n},{"./DOMPropertyOperations":11,"./EventPluginUtils":19,"./ExecutionEnvironment":21,"./ReactChildren":30,"./ReactComponent":31,"./ReactCompositeComponent":33,"./ReactContext":34,"./ReactCurrentOwner":35,"./ReactDOM":36,"./ReactDOMComponent":38,"./ReactDefaultInjection":48,"./ReactDescriptor":51,"./ReactInstanceHandles":59,"./ReactMount":61,"./ReactMultiChild":62,"./ReactPerf":65,"./ReactPropTypes":69,"./ReactServerRendering":73,"./ReactTextComponent":75,"./onlyChild":135,"./warning":143}],28:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactBrowserComponentMixin\n */\n\n"use strict";\n\nvar ReactEmptyComponent \x3d _dereq_("./ReactEmptyComponent");\nvar ReactMount \x3d _dereq_("./ReactMount");\n\nvar invariant \x3d _dereq_("./invariant");\n\nvar ReactBrowserComponentMixin \x3d {\n  /**\n   * Returns the DOM node rendered by this component.\n   *\n   * @return {DOMElement} The root node of this component.\n   * @final\n   * @protected\n   */\n  getDOMNode: function() {\n    ("production" !\x3d\x3d "development" ? invariant(\n      this.isMounted(),\n      \'getDOMNode(): A component must be mounted to have a DOM node.\'\n    ) : invariant(this.isMounted()));\n    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {\n      return null;\n    }\n    return ReactMount.getNode(this._rootNodeID);\n  }\n};\n\nmodule.exports \x3d ReactBrowserComponentMixin;\n\n},{"./ReactEmptyComponent":53,"./ReactMount":61,"./invariant":120}],29:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactBrowserEventEmitter\n * @typechecks static-only\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\nvar EventPluginHub \x3d _dereq_("./EventPluginHub");\nvar EventPluginRegistry \x3d _dereq_("./EventPluginRegistry");\nvar ReactEventEmitterMixin \x3d _dereq_("./ReactEventEmitterMixin");\nvar ViewportMetrics \x3d _dereq_("./ViewportMetrics");\n\nvar isEventSupported \x3d _dereq_("./isEventSupported");\nvar merge \x3d _dereq_("./merge");\n\n/**\n * Summary of `ReactBrowserEventEmitter` event handling:\n *\n *  - Top-level delegation is used to trap most native browser events. This\n *    may only occur in the main thread and is the responsibility of\n *    ReactEventListener, which is injected and can therefore support pluggable\n *    event sources. This is the only work that occurs in the main thread.\n *\n *  - We normalize and de-duplicate events to account for browser quirks. This\n *    may be done in the worker thread.\n *\n *  - Forward these native events (with the associated top-level type used to\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want\n *    to extract any synthetic events.\n *\n *  - The `EventPluginHub` will then process each event by annotating them with\n *    "dispatches", a sequence of listeners and IDs that care about that event.\n *\n *  - The `EventPluginHub` then dispatches the events.\n *\n * Overview of React and the event system:\n *\n * +------------+    .\n * |    DOM     |    .\n * +------------+    .\n *       |           .\n *       v           .\n * +------------+    .\n * | ReactEvent |    .\n * |  Listener  |    .\n * +------------+    .                         +-----------+\n *       |           .               +--------+|SimpleEvent|\n *       |           .               |         |Plugin     |\n * +-----|------+    .               v         +-----------+\n * |     |      |    .    +--------------+                    +------------+\n * |     +-----------.---\x3e|EventPluginHub|                    |    Event   |\n * |            |    .    |              |     +-----------+  | Propagators|\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|\n * |  Emitter   |    .    |              |\x3c---+|Plugin     |  |other plugin|\n * |            |    .    |              |     +-----------+  |  utilities |\n * |     +-----------.---\x3e|              |                    +------------+\n * |     |      |    .    +--------------+\n * +-----|------+    .                ^        +-----------+\n *       |           .                |        |Enter/Leave|\n *       +           .                +-------+|Plugin     |\n * +-------------+   .                         +-----------+\n * | application |   .\n * |-------------|   .\n * |             |   .\n * |             |   .\n * +-------------+   .\n *                   .\n *    React Core     .  General Purpose Event Plugin System\n */\n\nvar alreadyListeningTo \x3d {};\nvar isMonitoringScrollValue \x3d false;\nvar reactTopListenersCounter \x3d 0;\n\n// For events like \'submit\' which don\'t consistently bubble (which we trap at a\n// lower node than `document`), binding at `document` would cause duplicate\n// events so we don\'t include them here\nvar topEventMapping \x3d {\n  topBlur: \'blur\',\n  topChange: \'change\',\n  topClick: \'click\',\n  topCompositionEnd: \'compositionend\',\n  topCompositionStart: \'compositionstart\',\n  topCompositionUpdate: \'compositionupdate\',\n  topContextMenu: \'contextmenu\',\n  topCopy: \'copy\',\n  topCut: \'cut\',\n  topDoubleClick: \'dblclick\',\n  topDrag: \'drag\',\n  topDragEnd: \'dragend\',\n  topDragEnter: \'dragenter\',\n  topDragExit: \'dragexit\',\n  topDragLeave: \'dragleave\',\n  topDragOver: \'dragover\',\n  topDragStart: \'dragstart\',\n  topDrop: \'drop\',\n  topFocus: \'focus\',\n  topInput: \'input\',\n  topKeyDown: \'keydown\',\n  topKeyPress: \'keypress\',\n  topKeyUp: \'keyup\',\n  topMouseDown: \'mousedown\',\n  topMouseMove: \'mousemove\',\n  topMouseOut: \'mouseout\',\n  topMouseOver: \'mouseover\',\n  topMouseUp: \'mouseup\',\n  topPaste: \'paste\',\n  topScroll: \'scroll\',\n  topSelectionChange: \'selectionchange\',\n  topTextInput: \'textInput\',\n  topTouchCancel: \'touchcancel\',\n  topTouchEnd: \'touchend\',\n  topTouchMove: \'touchmove\',\n  topTouchStart: \'touchstart\',\n  topWheel: \'wheel\'\n};\n\n/**\n * To ensure no conflicts with other potential React instances on the page\n */\nvar topListenersIDKey \x3d "_reactListenersID" + String(Math.random()).slice(2);\n\nfunction getListeningForDocument(mountAt) {\n  // In IE8, `mountAt` is a host object and doesn\'t have `hasOwnProperty`\n  // directly.\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {\n    mountAt[topListenersIDKey] \x3d reactTopListenersCounter++;\n    alreadyListeningTo[mountAt[topListenersIDKey]] \x3d {};\n  }\n  return alreadyListeningTo[mountAt[topListenersIDKey]];\n}\n\n/**\n * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For\n * example:\n *\n *   ReactBrowserEventEmitter.putListener(\'myID\', \'onClick\', myFunction);\n *\n * This would allocate a "registration" of `(\'onClick\', myFunction)` on \'myID\'.\n *\n * @internal\n */\nvar ReactBrowserEventEmitter \x3d merge(ReactEventEmitterMixin, {\n\n  /**\n   * Injectable event backend\n   */\n  ReactEventListener: null,\n\n  injection: {\n    /**\n     * @param {object} ReactEventListener\n     */\n    injectReactEventListener: function(ReactEventListener) {\n      ReactEventListener.setHandleTopLevel(\n        ReactBrowserEventEmitter.handleTopLevel\n      );\n      ReactBrowserEventEmitter.ReactEventListener \x3d ReactEventListener;\n    }\n  },\n\n  /**\n   * Sets whether or not any created callbacks should be enabled.\n   *\n   * @param {boolean} enabled True if callbacks should be enabled.\n   */\n  setEnabled: function(enabled) {\n    if (ReactBrowserEventEmitter.ReactEventListener) {\n      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);\n    }\n  },\n\n  /**\n   * @return {boolean} True if callbacks are enabled.\n   */\n  isEnabled: function() {\n    return !!(\n      ReactBrowserEventEmitter.ReactEventListener \x26\x26\n      ReactBrowserEventEmitter.ReactEventListener.isEnabled()\n    );\n  },\n\n  /**\n   * We listen for bubbled touch events on the document object.\n   *\n   * Firefox v8.01 (and possibly others) exhibited strange behavior when\n   * mounting `onmousemove` events at some node that was not the document\n   * element. The symptoms were that if your mouse is not moving over something\n   * contained within that mount point (for example on the background) the\n   * top-level listeners for `onmousemove` won\'t be called. However, if you\n   * register the `mousemove` on the document object, then it will of course\n   * catch all `mousemove`s. This along with iOS quirks, justifies restricting\n   * top-level listeners to the document object only, at least for these\n   * movement types of events and possibly all events.\n   *\n   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n   *\n   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but\n   * they bubble to document.\n   *\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {object} contentDocumentHandle Document which owns the container\n   */\n  listenTo: function(registrationName, contentDocumentHandle) {\n    var mountAt \x3d contentDocumentHandle;\n    var isListening \x3d getListeningForDocument(mountAt);\n    var dependencies \x3d EventPluginRegistry.\n      registrationNameDependencies[registrationName];\n\n    var topLevelTypes \x3d EventConstants.topLevelTypes;\n    for (var i \x3d 0, l \x3d dependencies.length; i \x3c l; i++) {\n      var dependency \x3d dependencies[i];\n      if (!(\n            isListening.hasOwnProperty(dependency) \x26\x26\n            isListening[dependency]\n          )) {\n        if (dependency \x3d\x3d\x3d topLevelTypes.topWheel) {\n          if (isEventSupported(\'wheel\')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topWheel,\n              \'wheel\',\n              mountAt\n            );\n          } else if (isEventSupported(\'mousewheel\')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topWheel,\n              \'mousewheel\',\n              mountAt\n            );\n          } else {\n            // Firefox needs to capture a different mouse scroll event.\n            // @see http://www.quirksmode.org/dom/events/tests/scroll.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topWheel,\n              \'DOMMouseScroll\',\n              mountAt\n            );\n          }\n        } else if (dependency \x3d\x3d\x3d topLevelTypes.topScroll) {\n\n          if (isEventSupported(\'scroll\', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n              topLevelTypes.topScroll,\n              \'scroll\',\n              mountAt\n            );\n          } else {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topScroll,\n              \'scroll\',\n              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE\n            );\n          }\n        } else if (dependency \x3d\x3d\x3d topLevelTypes.topFocus ||\n            dependency \x3d\x3d\x3d topLevelTypes.topBlur) {\n\n          if (isEventSupported(\'focus\', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n              topLevelTypes.topFocus,\n              \'focus\',\n              mountAt\n            );\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n              topLevelTypes.topBlur,\n              \'blur\',\n              mountAt\n            );\n          } else if (isEventSupported(\'focusin\')) {\n            // IE has `focusin` and `focusout` events which bubble.\n            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topFocus,\n              \'focusin\',\n              mountAt\n            );\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topBlur,\n              \'focusout\',\n              mountAt\n            );\n          }\n\n          // to make sure blur and focus event listeners are only attached once\n          isListening[topLevelTypes.topBlur] \x3d true;\n          isListening[topLevelTypes.topFocus] \x3d true;\n        } else if (topEventMapping.hasOwnProperty(dependency)) {\n          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n            dependency,\n            topEventMapping[dependency],\n            mountAt\n          );\n        }\n\n        isListening[dependency] \x3d true;\n      }\n    }\n  },\n\n  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n      topLevelType,\n      handlerBaseName,\n      handle\n    );\n  },\n\n  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n      topLevelType,\n      handlerBaseName,\n      handle\n    );\n  },\n\n  /**\n   * Listens to window scroll and resize events. We cache scroll values so that\n   * application code can access them without triggering reflows.\n   *\n   * NOTE: Scroll events do not bubble.\n   *\n   * @see http://www.quirksmode.org/dom/events/scroll.html\n   */\n  ensureScrollValueMonitoring: function(){\n    if (!isMonitoringScrollValue) {\n      var refresh \x3d ViewportMetrics.refreshScrollValues;\n      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);\n      isMonitoringScrollValue \x3d true;\n    }\n  },\n\n  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginHub.registrationNameModules,\n\n  putListener: EventPluginHub.putListener,\n\n  getListener: EventPluginHub.getListener,\n\n  deleteListener: EventPluginHub.deleteListener,\n\n  deleteAllListeners: EventPluginHub.deleteAllListeners\n\n});\n\nmodule.exports \x3d ReactBrowserEventEmitter;\n\n},{"./EventConstants":15,"./EventPluginHub":17,"./EventPluginRegistry":18,"./ReactEventEmitterMixin":55,"./ViewportMetrics":93,"./isEventSupported":121,"./merge":130}],30:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactChildren\n */\n\n"use strict";\n\nvar PooledClass \x3d _dereq_("./PooledClass");\n\nvar traverseAllChildren \x3d _dereq_("./traverseAllChildren");\nvar warning \x3d _dereq_("./warning");\n\nvar twoArgumentPooler \x3d PooledClass.twoArgumentPooler;\nvar threeArgumentPooler \x3d PooledClass.threeArgumentPooler;\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * traversal. Allows avoiding binding callbacks.\n *\n * @constructor ForEachBookKeeping\n * @param {!function} forEachFunction Function to perform traversal with.\n * @param {?*} forEachContext Context to perform context with.\n */\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {\n  this.forEachFunction \x3d forEachFunction;\n  this.forEachContext \x3d forEachContext;\n}\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);\n\nfunction forEachSingleChild(traverseContext, child, name, i) {\n  var forEachBookKeeping \x3d traverseContext;\n  forEachBookKeeping.forEachFunction.call(\n    forEachBookKeeping.forEachContext, child, i);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc.\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children \x3d\x3d null) {\n    return children;\n  }\n\n  var traverseContext \x3d\n    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  ForEachBookKeeping.release(traverseContext);\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * mapping. Allows avoiding binding callbacks.\n *\n * @constructor MapBookKeeping\n * @param {!*} mapResult Object containing the ordered map of results.\n * @param {!function} mapFunction Function to perform mapping with.\n * @param {?*} mapContext Context to perform mapping with.\n */\nfunction MapBookKeeping(mapResult, mapFunction, mapContext) {\n  this.mapResult \x3d mapResult;\n  this.mapFunction \x3d mapFunction;\n  this.mapContext \x3d mapContext;\n}\nPooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);\n\nfunction mapSingleChildIntoContext(traverseContext, child, name, i) {\n  var mapBookKeeping \x3d traverseContext;\n  var mapResult \x3d mapBookKeeping.mapResult;\n\n  var keyUnique \x3d !mapResult.hasOwnProperty(name);\n  ("production" !\x3d\x3d "development" ? warning(\n    keyUnique,\n    \'ReactChildren.map(...): Encountered two children with the same key, \' +\n    \'`%s`. Child keys must be unique; when two children share a key, only \' +\n    \'the first child will be used.\',\n    name\n  ) : null);\n\n  if (keyUnique) {\n    var mappedChild \x3d\n      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);\n    mapResult[name] \x3d mappedChild;\n  }\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * TODO: This may likely break any calls to `ReactChildren.map` that were\n * previously relying on the fact that we guarded against null children.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} mapFunction.\n * @param {*} mapContext Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children \x3d\x3d null) {\n    return children;\n  }\n\n  var mapResult \x3d {};\n  var traverseContext \x3d MapBookKeeping.getPooled(mapResult, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  MapBookKeeping.release(traverseContext);\n  return mapResult;\n}\n\nfunction forEachSingleChildDummy(traverseContext, child, name, i) {\n  return null;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children, context) {\n  return traverseAllChildren(children, forEachSingleChildDummy, null);\n}\n\nvar ReactChildren \x3d {\n  forEach: forEachChildren,\n  map: mapChildren,\n  count: countChildren\n};\n\nmodule.exports \x3d ReactChildren;\n\n},{"./PooledClass":26,"./traverseAllChildren":142,"./warning":143}],31:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactComponent\n */\n\n"use strict";\n\nvar ReactDescriptor \x3d _dereq_("./ReactDescriptor");\nvar ReactOwner \x3d _dereq_("./ReactOwner");\nvar ReactUpdates \x3d _dereq_("./ReactUpdates");\n\nvar invariant \x3d _dereq_("./invariant");\nvar keyMirror \x3d _dereq_("./keyMirror");\nvar merge \x3d _dereq_("./merge");\n\n/**\n * Every React component is in one of these life cycles.\n */\nvar ComponentLifeCycle \x3d keyMirror({\n  /**\n   * Mounted components have a DOM node representation and are capable of\n   * receiving new props.\n   */\n  MOUNTED: null,\n  /**\n   * Unmounted components are inactive and cannot receive new props.\n   */\n  UNMOUNTED: null\n});\n\nvar injected \x3d false;\n\n/**\n * Optionally injectable environment dependent cleanup hook. (server vs.\n * browser etc). Example: A browser system caches DOM nodes based on component\n * ID and must remove that cache entry when this instance is unmounted.\n *\n * @private\n */\nvar unmountIDFromEnvironment \x3d null;\n\n/**\n * The "image" of a component tree, is the platform specific (typically\n * serialized) data that represents a tree of lower level UI building blocks.\n * On the web, this "image" is HTML markup which describes a construction of\n * low level `div` and `span` nodes. Other platforms may have different\n * encoding of this "image". This must be injected.\n *\n * @private\n */\nvar mountImageIntoNode \x3d null;\n\n/**\n * Components are the basic units of composition in React.\n *\n * Every component accepts a set of keyed input parameters known as "props" that\n * are initialized by the constructor. Once a component is mounted, the props\n * can be mutated using `setProps` or `replaceProps`.\n *\n * Every component is capable of the following operations:\n *\n *   `mountComponent`\n *     Initializes the component, renders markup, and registers event listeners.\n *\n *   `receiveComponent`\n *     Updates the rendered DOM nodes to match the given component.\n *\n *   `unmountComponent`\n *     Releases any resources allocated by this component.\n *\n * Components can also be "owned" by other components. Being owned by another\n * component means being constructed by that component. This is different from\n * being the child of a component, which means having a DOM representation that\n * is a child of the DOM representation of that component.\n *\n * @class ReactComponent\n */\nvar ReactComponent \x3d {\n\n  injection: {\n    injectEnvironment: function(ReactComponentEnvironment) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        !injected,\n        \'ReactComponent: injectEnvironment() can only be called once.\'\n      ) : invariant(!injected));\n      mountImageIntoNode \x3d ReactComponentEnvironment.mountImageIntoNode;\n      unmountIDFromEnvironment \x3d\n        ReactComponentEnvironment.unmountIDFromEnvironment;\n      ReactComponent.BackendIDOperations \x3d\n        ReactComponentEnvironment.BackendIDOperations;\n      injected \x3d true;\n    }\n  },\n\n  /**\n   * @internal\n   */\n  LifeCycle: ComponentLifeCycle,\n\n  /**\n   * Injected module that provides ability to mutate individual properties.\n   * Injected into the base class because many different subclasses need access\n   * to this.\n   *\n   * @internal\n   */\n  BackendIDOperations: null,\n\n  /**\n   * Base functionality for every ReactComponent constructor. Mixed into the\n   * `ReactComponent` prototype, but exposed statically for easy access.\n   *\n   * @lends {ReactComponent.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Checks whether or not this component is mounted.\n     *\n     * @return {boolean} True if mounted, false otherwise.\n     * @final\n     * @protected\n     */\n    isMounted: function() {\n      return this._lifeCycleState \x3d\x3d\x3d ComponentLifeCycle.MOUNTED;\n    },\n\n    /**\n     * Sets a subset of the props.\n     *\n     * @param {object} partialProps Subset of the next props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    setProps: function(partialProps, callback) {\n      // Merge with the pending descriptor if it exists, otherwise with existing\n      // descriptor props.\n      var descriptor \x3d this._pendingDescriptor || this._descriptor;\n      this.replaceProps(\n        merge(descriptor.props, partialProps),\n        callback\n      );\n    },\n\n    /**\n     * Replaces all of the props.\n     *\n     * @param {object} props New props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    replaceProps: function(props, callback) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        this.isMounted(),\n        \'replaceProps(...): Can only update a mounted component.\'\n      ) : invariant(this.isMounted()));\n      ("production" !\x3d\x3d "development" ? invariant(\n        this._mountDepth \x3d\x3d\x3d 0,\n        \'replaceProps(...): You called `setProps` or `replaceProps` on a \' +\n        \'component with a parent. This is an anti-pattern since props will \' +\n        \'get reactively updated when rendered. Instead, change the owner\\\'s \' +\n        \'`render` method to pass the correct value as props to the component \' +\n        \'where it is created.\'\n      ) : invariant(this._mountDepth \x3d\x3d\x3d 0));\n      // This is a deoptimized path. We optimize for always having a descriptor.\n      // This creates an extra internal descriptor.\n      this._pendingDescriptor \x3d ReactDescriptor.cloneAndReplaceProps(\n        this._pendingDescriptor || this._descriptor,\n        props\n      );\n      ReactUpdates.enqueueUpdate(this, callback);\n    },\n\n    /**\n     * Schedule a partial update to the props. Only used for internal testing.\n     *\n     * @param {object} partialProps Subset of the next props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @internal\n     */\n    _setPropsInternal: function(partialProps, callback) {\n      // This is a deoptimized path. We optimize for always having a descriptor.\n      // This creates an extra internal descriptor.\n      var descriptor \x3d this._pendingDescriptor || this._descriptor;\n      this._pendingDescriptor \x3d ReactDescriptor.cloneAndReplaceProps(\n        descriptor,\n        merge(descriptor.props, partialProps)\n      );\n      ReactUpdates.enqueueUpdate(this, callback);\n    },\n\n    /**\n     * Base constructor for all React components.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.construct.call(this, ...)`.\n     *\n     * @param {ReactDescriptor} descriptor\n     * @internal\n     */\n    construct: function(descriptor) {\n      // This is the public exposed props object after it has been processed\n      // with default props. The descriptor\'s props represents the true internal\n      // state of the props.\n      this.props \x3d descriptor.props;\n      // Record the component responsible for creating this component.\n      // This is accessible through the descriptor but we maintain an extra\n      // field for compatibility with devtools and as a way to make an\n      // incremental update. TODO: Consider deprecating this field.\n      this._owner \x3d descriptor._owner;\n\n      // All components start unmounted.\n      this._lifeCycleState \x3d ComponentLifeCycle.UNMOUNTED;\n\n      // See ReactUpdates.\n      this._pendingCallbacks \x3d null;\n\n      // We keep the old descriptor and a reference to the pending descriptor\n      // to track updates.\n      this._descriptor \x3d descriptor;\n      this._pendingDescriptor \x3d null;\n    },\n\n    /**\n     * Initializes the component, renders markup, and registers event listeners.\n     *\n     * NOTE: This does not insert any nodes into the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n     * @param {number} mountDepth number of components in the owner hierarchy.\n     * @return {?string} Rendered markup to be inserted into the DOM.\n     * @internal\n     */\n    mountComponent: function(rootID, transaction, mountDepth) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        !this.isMounted(),\n        \'mountComponent(%s, ...): Can only mount an unmounted component. \' +\n        \'Make sure to avoid storing components between renders or reusing a \' +\n        \'single component instance in multiple places.\',\n        rootID\n      ) : invariant(!this.isMounted()));\n      var props \x3d this._descriptor.props;\n      if (props.ref !\x3d null) {\n        var owner \x3d this._descriptor._owner;\n        ReactOwner.addComponentAsRefTo(this, props.ref, owner);\n      }\n      this._rootNodeID \x3d rootID;\n      this._lifeCycleState \x3d ComponentLifeCycle.MOUNTED;\n      this._mountDepth \x3d mountDepth;\n      // Effectively: return \'\';\n    },\n\n    /**\n     * Releases any resources allocated by `mountComponent`.\n     *\n     * NOTE: This does not remove any nodes from the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.unmountComponent.call(this)`.\n     *\n     * @internal\n     */\n    unmountComponent: function() {\n      ("production" !\x3d\x3d "development" ? invariant(\n        this.isMounted(),\n        \'unmountComponent(): Can only unmount a mounted component.\'\n      ) : invariant(this.isMounted()));\n      var props \x3d this.props;\n      if (props.ref !\x3d null) {\n        ReactOwner.removeComponentAsRefFrom(this, props.ref, this._owner);\n      }\n      unmountIDFromEnvironment(this._rootNodeID);\n      this._rootNodeID \x3d null;\n      this._lifeCycleState \x3d ComponentLifeCycle.UNMOUNTED;\n    },\n\n    /**\n     * Given a new instance of this component, updates the rendered DOM nodes\n     * as if that instance was rendered instead.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.\n     *\n     * @param {object} nextComponent Next set of properties.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    receiveComponent: function(nextDescriptor, transaction) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        this.isMounted(),\n        \'receiveComponent(...): Can only update a mounted component.\'\n      ) : invariant(this.isMounted()));\n      this._pendingDescriptor \x3d nextDescriptor;\n      this.performUpdateIfNecessary(transaction);\n    },\n\n    /**\n     * If `_pendingDescriptor` is set, update the component.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    performUpdateIfNecessary: function(transaction) {\n      if (this._pendingDescriptor \x3d\x3d null) {\n        return;\n      }\n      var prevDescriptor \x3d this._descriptor;\n      var nextDescriptor \x3d this._pendingDescriptor;\n      this._descriptor \x3d nextDescriptor;\n      this.props \x3d nextDescriptor.props;\n      this._owner \x3d nextDescriptor._owner;\n      this._pendingDescriptor \x3d null;\n      this.updateComponent(transaction, prevDescriptor);\n    },\n\n    /**\n     * Updates the component\'s currently mounted representation.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @param {object} prevDescriptor\n     * @internal\n     */\n    updateComponent: function(transaction, prevDescriptor) {\n      var nextDescriptor \x3d this._descriptor;\n\n      // If either the owner or a `ref` has changed, make sure the newest owner\n      // has stored a reference to `this`, and the previous owner (if different)\n      // has forgotten the reference to `this`. We use the descriptor instead\n      // of the public this.props because the post processing cannot determine\n      // a ref. The ref conceptually lives on the descriptor.\n\n      // TODO: Should this even be possible? The owner cannot change because\n      // it\'s forbidden by shouldUpdateReactComponent. The ref can change\n      // if you swap the keys of but not the refs. Reconsider where this check\n      // is made. It probably belongs where the key checking and\n      // instantiateReactComponent is done.\n\n      if (nextDescriptor._owner !\x3d\x3d prevDescriptor._owner ||\n          nextDescriptor.props.ref !\x3d\x3d prevDescriptor.props.ref) {\n        if (prevDescriptor.props.ref !\x3d null) {\n          ReactOwner.removeComponentAsRefFrom(\n            this, prevDescriptor.props.ref, prevDescriptor._owner\n          );\n        }\n        // Correct, even if the owner is the same, and only the ref has changed.\n        if (nextDescriptor.props.ref !\x3d null) {\n          ReactOwner.addComponentAsRefTo(\n            this,\n            nextDescriptor.props.ref,\n            nextDescriptor._owner\n          );\n        }\n      }\n    },\n\n    /**\n     * Mounts this component and inserts it into the DOM.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @internal\n     * @see {ReactMount.renderComponent}\n     */\n    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {\n      var transaction \x3d ReactUpdates.ReactReconcileTransaction.getPooled();\n      transaction.perform(\n        this._mountComponentIntoNode,\n        this,\n        rootID,\n        container,\n        transaction,\n        shouldReuseMarkup\n      );\n      ReactUpdates.ReactReconcileTransaction.release(transaction);\n    },\n\n    /**\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {ReactReconcileTransaction} transaction\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @private\n     */\n    _mountComponentIntoNode: function(\n        rootID,\n        container,\n        transaction,\n        shouldReuseMarkup) {\n      var markup \x3d this.mountComponent(rootID, transaction, 0);\n      mountImageIntoNode(markup, container, shouldReuseMarkup);\n    },\n\n    /**\n     * Checks if this component is owned by the supplied `owner` component.\n     *\n     * @param {ReactComponent} owner Component to check.\n     * @return {boolean} True if `owners` owns this component.\n     * @final\n     * @internal\n     */\n    isOwnedBy: function(owner) {\n      return this._owner \x3d\x3d\x3d owner;\n    },\n\n    /**\n     * Gets another component, that shares the same owner as this one, by ref.\n     *\n     * @param {string} ref of a sibling Component.\n     * @return {?ReactComponent} the actual sibling Component.\n     * @final\n     * @internal\n     */\n    getSiblingByRef: function(ref) {\n      var owner \x3d this._owner;\n      if (!owner || !owner.refs) {\n        return null;\n      }\n      return owner.refs[ref];\n    }\n  }\n};\n\nmodule.exports \x3d ReactComponent;\n\n},{"./ReactDescriptor":51,"./ReactOwner":64,"./ReactUpdates":76,"./invariant":120,"./keyMirror":126,"./merge":130}],32:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactComponentBrowserEnvironment\n */\n\n/*jslint evil: true */\n\n"use strict";\n\nvar ReactDOMIDOperations \x3d _dereq_("./ReactDOMIDOperations");\nvar ReactMarkupChecksum \x3d _dereq_("./ReactMarkupChecksum");\nvar ReactMount \x3d _dereq_("./ReactMount");\nvar ReactPerf \x3d _dereq_("./ReactPerf");\nvar ReactReconcileTransaction \x3d _dereq_("./ReactReconcileTransaction");\n\nvar getReactRootElementInContainer \x3d _dereq_("./getReactRootElementInContainer");\nvar invariant \x3d _dereq_("./invariant");\nvar setInnerHTML \x3d _dereq_("./setInnerHTML");\n\n\nvar ELEMENT_NODE_TYPE \x3d 1;\nvar DOC_NODE_TYPE \x3d 9;\n\n\n/**\n * Abstracts away all functionality of `ReactComponent` requires knowledge of\n * the browser context.\n */\nvar ReactComponentBrowserEnvironment \x3d {\n  ReactReconcileTransaction: ReactReconcileTransaction,\n\n  BackendIDOperations: ReactDOMIDOperations,\n\n  /**\n   * If a particular environment requires that some resources be cleaned up,\n   * specify this in the injected Mixin. In the DOM, we would likely want to\n   * purge any cached node ID lookups.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: function(rootNodeID) {\n    ReactMount.purgeID(rootNodeID);\n  },\n\n  /**\n   * @param {string} markup Markup string to place into the DOM Element.\n   * @param {DOMElement} container DOM Element to insert markup into.\n   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the\n   * container if possible.\n   */\n  mountImageIntoNode: ReactPerf.measure(\n    \'ReactComponentBrowserEnvironment\',\n    \'mountImageIntoNode\',\n    function(markup, container, shouldReuseMarkup) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        container \x26\x26 (\n          container.nodeType \x3d\x3d\x3d ELEMENT_NODE_TYPE ||\n            container.nodeType \x3d\x3d\x3d DOC_NODE_TYPE\n        ),\n        \'mountComponentIntoNode(...): Target container is not valid.\'\n      ) : invariant(container \x26\x26 (\n        container.nodeType \x3d\x3d\x3d ELEMENT_NODE_TYPE ||\n          container.nodeType \x3d\x3d\x3d DOC_NODE_TYPE\n      )));\n\n      if (shouldReuseMarkup) {\n        if (ReactMarkupChecksum.canReuseMarkup(\n          markup,\n          getReactRootElementInContainer(container))) {\n          return;\n        } else {\n          ("production" !\x3d\x3d "development" ? invariant(\n            container.nodeType !\x3d\x3d DOC_NODE_TYPE,\n            \'You\\\'re trying to render a component to the document using \' +\n            \'server rendering but the checksum was invalid. This usually \' +\n            \'means you rendered a different component type or props on \' +\n            \'the client from the one on the server, or your render() \' +\n            \'methods are impure. React cannot handle this case due to \' +\n            \'cross-browser quirks by rendering at the document root. You \' +\n            \'should look for environment dependent code in your components \' +\n            \'and ensure the props are the same client and server side.\'\n          ) : invariant(container.nodeType !\x3d\x3d DOC_NODE_TYPE));\n\n          if ("production" !\x3d\x3d "development") {\n            console.warn(\n              \'React attempted to use reuse markup in a container but the \' +\n              \'checksum was invalid. This generally means that you are \' +\n              \'using server rendering and the markup generated on the \' +\n              \'server was not what the client was expecting. React injected \' +\n              \'new markup to compensate which works but you have lost many \' +\n              \'of the benefits of server rendering. Instead, figure out \' +\n              \'why the markup being generated is different on the client \' +\n              \'or server.\'\n            );\n          }\n        }\n      }\n\n      ("production" !\x3d\x3d "development" ? invariant(\n        container.nodeType !\x3d\x3d DOC_NODE_TYPE,\n        \'You\\\'re trying to render a component to the document but \' +\n          \'you didn\\\'t use server rendering. We can\\\'t do this \' +\n          \'without using server rendering due to cross-browser quirks. \' +\n          \'See renderComponentToString() for server rendering.\'\n      ) : invariant(container.nodeType !\x3d\x3d DOC_NODE_TYPE));\n\n      setInnerHTML(container, markup);\n    }\n  )\n};\n\nmodule.exports \x3d ReactComponentBrowserEnvironment;\n\n},{"./ReactDOMIDOperations":40,"./ReactMarkupChecksum":60,"./ReactMount":61,"./ReactPerf":65,"./ReactReconcileTransaction":71,"./getReactRootElementInContainer":114,"./invariant":120,"./setInnerHTML":138}],33:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactCompositeComponent\n */\n\n"use strict";\n\nvar ReactComponent \x3d _dereq_("./ReactComponent");\nvar ReactContext \x3d _dereq_("./ReactContext");\nvar ReactCurrentOwner \x3d _dereq_("./ReactCurrentOwner");\nvar ReactDescriptor \x3d _dereq_("./ReactDescriptor");\nvar ReactDescriptorValidator \x3d _dereq_("./ReactDescriptorValidator");\nvar ReactEmptyComponent \x3d _dereq_("./ReactEmptyComponent");\nvar ReactErrorUtils \x3d _dereq_("./ReactErrorUtils");\nvar ReactOwner \x3d _dereq_("./ReactOwner");\nvar ReactPerf \x3d _dereq_("./ReactPerf");\nvar ReactPropTransferer \x3d _dereq_("./ReactPropTransferer");\nvar ReactPropTypeLocations \x3d _dereq_("./ReactPropTypeLocations");\nvar ReactPropTypeLocationNames \x3d _dereq_("./ReactPropTypeLocationNames");\nvar ReactUpdates \x3d _dereq_("./ReactUpdates");\n\nvar instantiateReactComponent \x3d _dereq_("./instantiateReactComponent");\nvar invariant \x3d _dereq_("./invariant");\nvar keyMirror \x3d _dereq_("./keyMirror");\nvar merge \x3d _dereq_("./merge");\nvar mixInto \x3d _dereq_("./mixInto");\nvar monitorCodeUse \x3d _dereq_("./monitorCodeUse");\nvar mapObject \x3d _dereq_("./mapObject");\nvar shouldUpdateReactComponent \x3d _dereq_("./shouldUpdateReactComponent");\nvar warning \x3d _dereq_("./warning");\n\n/**\n * Policies that describe methods in `ReactCompositeComponentInterface`.\n */\nvar SpecPolicy \x3d keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base ReactCompositeComponent class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\n\nvar injectedMixins \x3d [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactCompositeComponent`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent \x3d React.createClass({\n *     render: function() {\n *       return \x3cdiv\x3eHello World\x3c/div\x3e;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactCompositeComponentInterface\n * @internal\n */\nvar ReactCompositeComponentInterface \x3d {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component\'s constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // \x3d\x3d\x3d\x3d Definition methods \x3d\x3d\x3d\x3d\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name \x3d this.props.name;\n   *     return \x3cdiv\x3eHello, {name}!\x3c/div\x3e;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n\n\n  // \x3d\x3d\x3d\x3d Delegate methods \x3d\x3d\x3d\x3d\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount \x3e this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you\'re certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component\'s DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n\n\n  // \x3d\x3d\x3d\x3d Advanced methods \x3d\x3d\x3d\x3d\n\n  /**\n   * Updates the component\'s currently mounted DOM representation.\n   *\n   * By default, this implements React\'s rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the "statics" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS \x3d {\n  displayName: function(Constructor, displayName) {\n    Constructor.displayName \x3d displayName;\n  },\n  mixins: function(Constructor, mixins) {\n    if (mixins) {\n      for (var i \x3d 0; i \x3c mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function(Constructor, childContextTypes) {\n    validateTypeDef(\n      Constructor,\n      childContextTypes,\n      ReactPropTypeLocations.childContext\n    );\n    Constructor.childContextTypes \x3d merge(\n      Constructor.childContextTypes,\n      childContextTypes\n    );\n  },\n  contextTypes: function(Constructor, contextTypes) {\n    validateTypeDef(\n      Constructor,\n      contextTypes,\n      ReactPropTypeLocations.context\n    );\n    Constructor.contextTypes \x3d merge(Constructor.contextTypes, contextTypes);\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function(Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps \x3d createMergedResultFunction(\n        Constructor.getDefaultProps,\n        getDefaultProps\n      );\n    } else {\n      Constructor.getDefaultProps \x3d getDefaultProps;\n    }\n  },\n  propTypes: function(Constructor, propTypes) {\n    validateTypeDef(\n      Constructor,\n      propTypes,\n      ReactPropTypeLocations.prop\n    );\n    Constructor.propTypes \x3d merge(Constructor.propTypes, propTypes);\n  },\n  statics: function(Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  }\n};\n\nfunction getDeclarationErrorAddendum(component) {\n  var owner \x3d component._owner || null;\n  if (owner \x26\x26 owner.constructor \x26\x26 owner.constructor.displayName) {\n    return \' Check the render method of `\' + owner.constructor.displayName +\n      \'`.\';\n  }\n  return \'\';\n}\n\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        typeof typeDef[propName] \x3d\x3d \'function\',\n        \'%s: %s type `%s` is invalid; it must be a function, usually from \' +\n        \'React.PropTypes.\',\n        Constructor.displayName || \'ReactCompositeComponent\',\n        ReactPropTypeLocationNames[location],\n        propName\n      ) : invariant(typeof typeDef[propName] \x3d\x3d \'function\'));\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy \x3d ReactCompositeComponentInterface.hasOwnProperty(name) ?\n    ReactCompositeComponentInterface[name] :\n    null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      specPolicy \x3d\x3d\x3d SpecPolicy.OVERRIDE_BASE,\n      \'ReactCompositeComponentInterface: You are attempting to override \' +\n      \'`%s` from your class specification. Ensure that your method names \' +\n      \'do not overlap with React methods.\',\n      name\n    ) : invariant(specPolicy \x3d\x3d\x3d SpecPolicy.OVERRIDE_BASE));\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      specPolicy \x3d\x3d\x3d SpecPolicy.DEFINE_MANY ||\n      specPolicy \x3d\x3d\x3d SpecPolicy.DEFINE_MANY_MERGED,\n      \'ReactCompositeComponentInterface: You are attempting to define \' +\n      \'`%s` on your component more than once. This conflict may be due \' +\n      \'to a mixin.\',\n      name\n    ) : invariant(specPolicy \x3d\x3d\x3d SpecPolicy.DEFINE_MANY ||\n    specPolicy \x3d\x3d\x3d SpecPolicy.DEFINE_MANY_MERGED));\n  }\n}\n\nfunction validateLifeCycleOnReplaceState(instance) {\n  var compositeLifeCycleState \x3d instance._compositeLifeCycleState;\n  ("production" !\x3d\x3d "development" ? invariant(\n    instance.isMounted() ||\n      compositeLifeCycleState \x3d\x3d\x3d CompositeLifeCycle.MOUNTING,\n    \'replaceState(...): Can only update a mounted or mounting component.\'\n  ) : invariant(instance.isMounted() ||\n    compositeLifeCycleState \x3d\x3d\x3d CompositeLifeCycle.MOUNTING));\n  ("production" !\x3d\x3d "development" ? invariant(compositeLifeCycleState !\x3d\x3d CompositeLifeCycle.RECEIVING_STATE,\n    \'replaceState(...): Cannot update during an existing state transition \' +\n    \'(such as within `render`). This could potentially cause an infinite \' +\n    \'loop so it is forbidden.\'\n  ) : invariant(compositeLifeCycleState !\x3d\x3d CompositeLifeCycle.RECEIVING_STATE));\n  ("production" !\x3d\x3d "development" ? invariant(compositeLifeCycleState !\x3d\x3d CompositeLifeCycle.UNMOUNTING,\n    \'replaceState(...): Cannot update while unmounting component. This \' +\n    \'usually means you called setState() on an unmounted component.\'\n  ) : invariant(compositeLifeCycleState !\x3d\x3d CompositeLifeCycle.UNMOUNTING));\n}\n\n/**\n * Custom version of `mixInto` which handles policy validation and reserved\n * specification keys when building `ReactCompositeComponent` classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    !ReactDescriptor.isValidFactory(spec),\n    \'ReactCompositeComponent: You\\\'re attempting to \' +\n    \'use a component class as a mixin. Instead, just use a regular object.\'\n  ) : invariant(!ReactDescriptor.isValidFactory(spec)));\n  ("production" !\x3d\x3d "development" ? invariant(\n    !ReactDescriptor.isValidDescriptor(spec),\n    \'ReactCompositeComponent: You\\\'re attempting to \' +\n    \'use a component as a mixin. Instead, just use a regular object.\'\n  ) : invariant(!ReactDescriptor.isValidDescriptor(spec)));\n\n  var proto \x3d Constructor.prototype;\n  for (var name in spec) {\n    var property \x3d spec[name];\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactCompositeComponent methods (in the "interface").\n      // 2. Overridden methods (that were mixed in).\n      var isCompositeComponentMethod \x3d\n        ReactCompositeComponentInterface.hasOwnProperty(name);\n      var isAlreadyDefined \x3d proto.hasOwnProperty(name);\n      var markedDontBind \x3d property \x26\x26 property.__reactDontBind;\n      var isFunction \x3d typeof property \x3d\x3d\x3d \'function\';\n      var shouldAutoBind \x3d\n        isFunction \x26\x26\n        !isCompositeComponentMethod \x26\x26\n        !isAlreadyDefined \x26\x26\n        !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap \x3d {};\n        }\n        proto.__reactAutoBindMap[name] \x3d property;\n        proto[name] \x3d property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy \x3d ReactCompositeComponentInterface[name];\n\n          // These cases should already be caught by validateMethodOverride\n          ("production" !\x3d\x3d "development" ? invariant(\n            isCompositeComponentMethod \x26\x26 (\n              specPolicy \x3d\x3d\x3d SpecPolicy.DEFINE_MANY_MERGED ||\n              specPolicy \x3d\x3d\x3d SpecPolicy.DEFINE_MANY\n            ),\n            \'ReactCompositeComponent: Unexpected spec policy %s for key %s \' +\n            \'when mixing in component specs.\',\n            specPolicy,\n            name\n          ) : invariant(isCompositeComponentMethod \x26\x26 (\n            specPolicy \x3d\x3d\x3d SpecPolicy.DEFINE_MANY_MERGED ||\n            specPolicy \x3d\x3d\x3d SpecPolicy.DEFINE_MANY\n          )));\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy \x3d\x3d\x3d SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] \x3d createMergedResultFunction(proto[name], property);\n          } else if (specPolicy \x3d\x3d\x3d SpecPolicy.DEFINE_MANY) {\n            proto[name] \x3d createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] \x3d property;\n          if ("production" !\x3d\x3d "development") {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property \x3d\x3d\x3d \'function\' \x26\x26 spec.displayName) {\n              proto[name].displayName \x3d spec.displayName + \'_\' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property \x3d statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isInherited \x3d name in Constructor;\n    var result \x3d property;\n    if (isInherited) {\n      var existingProperty \x3d Constructor[name];\n      var existingType \x3d typeof existingProperty;\n      var propertyType \x3d typeof property;\n      ("production" !\x3d\x3d "development" ? invariant(\n        existingType \x3d\x3d\x3d \'function\' \x26\x26 propertyType \x3d\x3d\x3d \'function\',\n        \'ReactCompositeComponent: You are attempting to define \' +\n        \'`%s` on your component more than once, but that is only supported \' +\n        \'for functions, which are chained together. This conflict may be \' +\n        \'due to a mixin.\',\n        name\n      ) : invariant(existingType \x3d\x3d\x3d \'function\' \x26\x26 propertyType \x3d\x3d\x3d \'function\'));\n      result \x3d createChainedFunction(existingProperty, property);\n    }\n    Constructor[name] \x3d result;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeObjectsWithNoDuplicateKeys(one, two) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    one \x26\x26 two \x26\x26 typeof one \x3d\x3d\x3d \'object\' \x26\x26 typeof two \x3d\x3d\x3d \'object\',\n    \'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects\'\n  ) : invariant(one \x26\x26 two \x26\x26 typeof one \x3d\x3d\x3d \'object\' \x26\x26 typeof two \x3d\x3d\x3d \'object\'));\n\n  mapObject(two, function(value, key) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      one[key] \x3d\x3d\x3d undefined,\n      \'mergeObjectsWithNoDuplicateKeys(): \' +\n      \'Tried to merge two objects with the same key: %s\',\n      key\n    ) : invariant(one[key] \x3d\x3d\x3d undefined));\n    one[key] \x3d value;\n  });\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a \x3d one.apply(this, arguments);\n    var b \x3d two.apply(this, arguments);\n    if (a \x3d\x3d null) {\n      return b;\n    } else if (b \x3d\x3d null) {\n      return a;\n    }\n    return mergeObjectsWithNoDuplicateKeys(a, b);\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * `ReactCompositeComponent` maintains an auxiliary life cycle state in\n * `this._compositeLifeCycleState` (which can be null).\n *\n * This is different from the life cycle state maintained by `ReactComponent` in\n * `this._lifeCycleState`. The following diagram shows how the states overlap in\n * time. There are times when the CompositeLifeCycle is null - at those times it\n * is only meaningful to look at ComponentLifeCycle alone.\n *\n * Top Row: ReactComponent.ComponentLifeCycle\n * Low Row: ReactComponent.CompositeLifeCycle\n *\n * +-------+------------------------------------------------------+--------+\n * |  UN   |                    MOUNTED                           |   UN   |\n * |MOUNTED|                                                      | MOUNTED|\n * +-------+------------------------------------------------------+--------+\n * |       ^--------+   +------+   +------+   +------+   +--------^        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |---\x3e0   |\n * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       +--------+   +------+   +------+   +------+   +--------+        |\n * |       |                                                      |        |\n * +-------+------------------------------------------------------+--------+\n */\nvar CompositeLifeCycle \x3d keyMirror({\n  /**\n   * Components in the process of being mounted respond to state changes\n   * differently.\n   */\n  MOUNTING: null,\n  /**\n   * Components in the process of being unmounted are guarded against state\n   * changes.\n   */\n  UNMOUNTING: null,\n  /**\n   * Components that are mounted and receiving new props respond to state\n   * changes differently.\n   */\n  RECEIVING_PROPS: null,\n  /**\n   * Components that are mounted and receiving new state are guarded against\n   * additional state changes.\n   */\n  RECEIVING_STATE: null\n});\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin \x3d {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactDescriptor} descriptor\n   * @final\n   * @internal\n   */\n  construct: function(descriptor) {\n    // Children can be either an array or more than one argument\n    ReactComponent.Mixin.construct.apply(this, arguments);\n    ReactOwner.Mixin.construct.apply(this, arguments);\n\n    this.state \x3d null;\n    this._pendingState \x3d null;\n\n    // This is the public post-processed context. The real context and pending\n    // context lives on the descriptor.\n    this.context \x3d null;\n\n    this._compositeLifeCycleState \x3d null;\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function() {\n    return ReactComponent.Mixin.isMounted.call(this) \x26\x26\n      this._compositeLifeCycleState !\x3d\x3d CompositeLifeCycle.MOUNTING;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: ReactPerf.measure(\n    \'ReactCompositeComponent\',\n    \'mountComponent\',\n    function(rootID, transaction, mountDepth) {\n      ReactComponent.Mixin.mountComponent.call(\n        this,\n        rootID,\n        transaction,\n        mountDepth\n      );\n      this._compositeLifeCycleState \x3d CompositeLifeCycle.MOUNTING;\n\n      if (this.__reactAutoBindMap) {\n        this._bindAutoBindMethods();\n      }\n\n      this.context \x3d this._processContext(this._descriptor._context);\n      this.props \x3d this._processProps(this.props);\n\n      this.state \x3d this.getInitialState ? this.getInitialState() : null;\n      ("production" !\x3d\x3d "development" ? invariant(\n        typeof this.state \x3d\x3d\x3d \'object\' \x26\x26 !Array.isArray(this.state),\n        \'%s.getInitialState(): must return an object or null\',\n        this.constructor.displayName || \'ReactCompositeComponent\'\n      ) : invariant(typeof this.state \x3d\x3d\x3d \'object\' \x26\x26 !Array.isArray(this.state)));\n\n      this._pendingState \x3d null;\n      this._pendingForceUpdate \x3d false;\n\n      if (this.componentWillMount) {\n        this.componentWillMount();\n        // When mounting, calls to `setState` by `componentWillMount` will set\n        // `this._pendingState` without triggering a re-render.\n        if (this._pendingState) {\n          this.state \x3d this._pendingState;\n          this._pendingState \x3d null;\n        }\n      }\n\n      this._renderedComponent \x3d instantiateReactComponent(\n        this._renderValidatedComponent()\n      );\n\n      // Done with mounting, `setState` will now trigger UI changes.\n      this._compositeLifeCycleState \x3d null;\n      var markup \x3d this._renderedComponent.mountComponent(\n        rootID,\n        transaction,\n        mountDepth + 1\n      );\n      if (this.componentDidMount) {\n        transaction.getReactMountReady().enqueue(this.componentDidMount, this);\n      }\n      return markup;\n    }\n  ),\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function() {\n    this._compositeLifeCycleState \x3d CompositeLifeCycle.UNMOUNTING;\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n    this._compositeLifeCycleState \x3d null;\n\n    this._renderedComponent.unmountComponent();\n    this._renderedComponent \x3d null;\n\n    ReactComponent.Mixin.unmountComponent.call(this);\n\n    // Some existing components rely on this.props even after they\'ve been\n    // destroyed (in event handlers).\n    // TODO: this.props \x3d null;\n    // TODO: this.state \x3d null;\n  },\n\n  /**\n   * Sets a subset of the state. Always use this or `replaceState` to mutate\n   * state. You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * There is no guarantee that calls to `setState` will run synchronously,\n   * as they may eventually be batched together.  You can provide an optional\n   * callback that will be executed when the call to setState is actually\n   * completed.\n   *\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  setState: function(partialState, callback) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      typeof partialState \x3d\x3d\x3d \'object\' || partialState \x3d\x3d null,\n      \'setState(...): takes an object of state variables to update.\'\n    ) : invariant(typeof partialState \x3d\x3d\x3d \'object\' || partialState \x3d\x3d null));\n    if ("production" !\x3d\x3d "development"){\n      ("production" !\x3d\x3d "development" ? warning(\n        partialState !\x3d null,\n        \'setState(...): You passed an undefined or null state object; \' +\n        \'instead, use forceUpdate().\'\n      ) : null);\n    }\n    // Merge with `_pendingState` if it exists, otherwise with existing state.\n    this.replaceState(\n      merge(this._pendingState || this.state, partialState),\n      callback\n    );\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  replaceState: function(completeState, callback) {\n    validateLifeCycleOnReplaceState(this);\n    this._pendingState \x3d completeState;\n    if (this._compositeLifeCycleState !\x3d\x3d CompositeLifeCycle.MOUNTING) {\n      // If we\'re in a componentWillMount handler, don\'t enqueue a rerender\n      // because ReactUpdates assumes we\'re in a browser context (which is wrong\n      // for server rendering) and we\'re about to do a render anyway.\n      // TODO: The callback here is ignored when setState is called from\n      // componentWillMount. Either fix it or disallow doing so completely in\n      // favor of getInitialState.\n      ReactUpdates.enqueueUpdate(this, callback);\n    }\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function(context) {\n    var maskedContext \x3d null;\n    var contextTypes \x3d this.constructor.contextTypes;\n    if (contextTypes) {\n      maskedContext \x3d {};\n      for (var contextName in contextTypes) {\n        maskedContext[contextName] \x3d context[contextName];\n      }\n      if ("production" !\x3d\x3d "development") {\n        this._checkPropTypes(\n          contextTypes,\n          maskedContext,\n          ReactPropTypeLocations.context\n        );\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function(currentContext) {\n    var childContext \x3d this.getChildContext \x26\x26 this.getChildContext();\n    var displayName \x3d this.constructor.displayName || \'ReactCompositeComponent\';\n    if (childContext) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        typeof this.constructor.childContextTypes \x3d\x3d\x3d \'object\',\n        \'%s.getChildContext(): childContextTypes must be defined in order to \' +\n        \'use getChildContext().\',\n        displayName\n      ) : invariant(typeof this.constructor.childContextTypes \x3d\x3d\x3d \'object\'));\n      if ("production" !\x3d\x3d "development") {\n        this._checkPropTypes(\n          this.constructor.childContextTypes,\n          childContext,\n          ReactPropTypeLocations.childContext\n        );\n      }\n      for (var name in childContext) {\n        ("production" !\x3d\x3d "development" ? invariant(\n          name in this.constructor.childContextTypes,\n          \'%s.getChildContext(): key "%s" is not defined in childContextTypes.\',\n          displayName,\n          name\n        ) : invariant(name in this.constructor.childContextTypes));\n      }\n      return merge(currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function(newProps) {\n    var defaultProps \x3d this.constructor.defaultProps;\n    var props;\n    if (defaultProps) {\n      props \x3d merge(newProps);\n      for (var propName in defaultProps) {\n        if (typeof props[propName] \x3d\x3d\x3d \'undefined\') {\n          props[propName] \x3d defaultProps[propName];\n        }\n      }\n    } else {\n      props \x3d newProps;\n    }\n    if ("production" !\x3d\x3d "development") {\n      var propTypes \x3d this.constructor.propTypes;\n      if (propTypes) {\n        this._checkPropTypes(propTypes, props, ReactPropTypeLocations.prop);\n      }\n    }\n    return props;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. "prop", "context", "child context"\n   * @private\n   */\n  _checkPropTypes: function(propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the descriptor\n    // validation.\n    var componentName \x3d this.constructor.displayName;\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error \x3d\n          propTypes[propName](props, propName, componentName, location);\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // renderComponent calls, so I\'m abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum \x3d getDeclarationErrorAddendum(this);\n          ("production" !\x3d\x3d "development" ? warning(false, error.message + addendum) : null);\n        }\n      }\n    }\n  },\n\n  /**\n   * If any of `_pendingDescriptor`, `_pendingState`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function(transaction) {\n    var compositeLifeCycleState \x3d this._compositeLifeCycleState;\n    // Do not trigger a state transition if we are in the middle of mounting or\n    // receiving props because both of those will already be doing this.\n    if (compositeLifeCycleState \x3d\x3d\x3d CompositeLifeCycle.MOUNTING ||\n        compositeLifeCycleState \x3d\x3d\x3d CompositeLifeCycle.RECEIVING_PROPS) {\n      return;\n    }\n\n    if (this._pendingDescriptor \x3d\x3d null \x26\x26\n        this._pendingState \x3d\x3d null \x26\x26\n        !this._pendingForceUpdate) {\n      return;\n    }\n\n    var nextContext \x3d this.context;\n    var nextProps \x3d this.props;\n    var nextDescriptor \x3d this._descriptor;\n    if (this._pendingDescriptor !\x3d null) {\n      nextDescriptor \x3d this._pendingDescriptor;\n      nextContext \x3d this._processContext(nextDescriptor._context);\n      nextProps \x3d this._processProps(nextDescriptor.props);\n      this._pendingDescriptor \x3d null;\n\n      this._compositeLifeCycleState \x3d CompositeLifeCycle.RECEIVING_PROPS;\n      if (this.componentWillReceiveProps) {\n        this.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    this._compositeLifeCycleState \x3d CompositeLifeCycle.RECEIVING_STATE;\n\n    var nextState \x3d this._pendingState || this.state;\n    this._pendingState \x3d null;\n\n    try {\n      var shouldUpdate \x3d\n        this._pendingForceUpdate ||\n        !this.shouldComponentUpdate ||\n        this.shouldComponentUpdate(nextProps, nextState, nextContext);\n\n      if ("production" !\x3d\x3d "development") {\n        if (typeof shouldUpdate \x3d\x3d\x3d "undefined") {\n          console.warn(\n            (this.constructor.displayName || \'ReactCompositeComponent\') +\n            \'.shouldComponentUpdate(): Returned undefined instead of a \' +\n            \'boolean value. Make sure to return true or false.\'\n          );\n        }\n      }\n\n      if (shouldUpdate) {\n        this._pendingForceUpdate \x3d false;\n        // Will set `this.props`, `this.state` and `this.context`.\n        this._performComponentUpdate(\n          nextDescriptor,\n          nextProps,\n          nextState,\n          nextContext,\n          transaction\n        );\n      } else {\n        // If it\'s determined that a component should not update, we still want\n        // to set props and state.\n        this._descriptor \x3d nextDescriptor;\n        this.props \x3d nextProps;\n        this.state \x3d nextState;\n        this.context \x3d nextContext;\n\n        // Owner cannot change because shouldUpdateReactComponent doesn\'t allow\n        // it. TODO: Remove this._owner completely.\n        this._owner \x3d nextDescriptor._owner;\n      }\n    } finally {\n      this._compositeLifeCycleState \x3d null;\n    }\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactDescriptor} nextDescriptor Next descriptor\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @private\n   */\n  _performComponentUpdate: function(\n    nextDescriptor,\n    nextProps,\n    nextState,\n    nextContext,\n    transaction\n  ) {\n    var prevDescriptor \x3d this._descriptor;\n    var prevProps \x3d this.props;\n    var prevState \x3d this.state;\n    var prevContext \x3d this.context;\n\n    if (this.componentWillUpdate) {\n      this.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this._descriptor \x3d nextDescriptor;\n    this.props \x3d nextProps;\n    this.state \x3d nextState;\n    this.context \x3d nextContext;\n\n    // Owner cannot change because shouldUpdateReactComponent doesn\'t allow\n    // it. TODO: Remove this._owner completely.\n    this._owner \x3d nextDescriptor._owner;\n\n    this.updateComponent(\n      transaction,\n      prevDescriptor\n    );\n\n    if (this.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(\n        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),\n        this\n      );\n    }\n  },\n\n  receiveComponent: function(nextDescriptor, transaction) {\n    if (nextDescriptor \x3d\x3d\x3d this._descriptor \x26\x26\n        nextDescriptor._owner !\x3d null) {\n      // Since descriptors are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It\'s possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the descriptor. We explicitly check for the existence of an owner since\n      // it\'s possible for a descriptor created outside a composite to be\n      // deeply mutated and reused.\n      return;\n    }\n\n    ReactComponent.Mixin.receiveComponent.call(\n      this,\n      nextDescriptor,\n      transaction\n    );\n  },\n\n  /**\n   * Updates the component\'s currently mounted DOM representation.\n   *\n   * By default, this implements React\'s rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactDescriptor} prevDescriptor\n   * @internal\n   * @overridable\n   */\n  updateComponent: ReactPerf.measure(\n    \'ReactCompositeComponent\',\n    \'updateComponent\',\n    function(transaction, prevParentDescriptor) {\n      ReactComponent.Mixin.updateComponent.call(\n        this,\n        transaction,\n        prevParentDescriptor\n      );\n\n      var prevComponentInstance \x3d this._renderedComponent;\n      var prevDescriptor \x3d prevComponentInstance._descriptor;\n      var nextDescriptor \x3d this._renderValidatedComponent();\n      if (shouldUpdateReactComponent(prevDescriptor, nextDescriptor)) {\n        prevComponentInstance.receiveComponent(nextDescriptor, transaction);\n      } else {\n        // These two IDs are actually the same! But nothing should rely on that.\n        var thisID \x3d this._rootNodeID;\n        var prevComponentID \x3d prevComponentInstance._rootNodeID;\n        prevComponentInstance.unmountComponent();\n        this._renderedComponent \x3d instantiateReactComponent(nextDescriptor);\n        var nextMarkup \x3d this._renderedComponent.mountComponent(\n          thisID,\n          transaction,\n          this._mountDepth + 1\n        );\n        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(\n          prevComponentID,\n          nextMarkup\n        );\n      }\n    }\n  ),\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component\'s state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldUpdateComponent`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {?function} callback Called after update is complete.\n   * @final\n   * @protected\n   */\n  forceUpdate: function(callback) {\n    var compositeLifeCycleState \x3d this._compositeLifeCycleState;\n    ("production" !\x3d\x3d "development" ? invariant(\n      this.isMounted() ||\n        compositeLifeCycleState \x3d\x3d\x3d CompositeLifeCycle.MOUNTING,\n      \'forceUpdate(...): Can only force an update on mounted or mounting \' +\n        \'components.\'\n    ) : invariant(this.isMounted() ||\n      compositeLifeCycleState \x3d\x3d\x3d CompositeLifeCycle.MOUNTING));\n    ("production" !\x3d\x3d "development" ? invariant(\n      compositeLifeCycleState !\x3d\x3d CompositeLifeCycle.RECEIVING_STATE \x26\x26\n      compositeLifeCycleState !\x3d\x3d CompositeLifeCycle.UNMOUNTING,\n      \'forceUpdate(...): Cannot force an update while unmounting component \' +\n      \'or during an existing state transition (such as within `render`).\'\n    ) : invariant(compositeLifeCycleState !\x3d\x3d CompositeLifeCycle.RECEIVING_STATE \x26\x26\n    compositeLifeCycleState !\x3d\x3d CompositeLifeCycle.UNMOUNTING));\n    this._pendingForceUpdate \x3d true;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: ReactPerf.measure(\n    \'ReactCompositeComponent\',\n    \'_renderValidatedComponent\',\n    function() {\n      var renderedComponent;\n      var previousContext \x3d ReactContext.current;\n      ReactContext.current \x3d this._processChildContext(\n        this._descriptor._context\n      );\n      ReactCurrentOwner.current \x3d this;\n      try {\n        renderedComponent \x3d this.render();\n        if (renderedComponent \x3d\x3d\x3d null || renderedComponent \x3d\x3d\x3d false) {\n          renderedComponent \x3d ReactEmptyComponent.getEmptyComponent();\n          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);\n        } else {\n          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);\n        }\n      } finally {\n        ReactContext.current \x3d previousContext;\n        ReactCurrentOwner.current \x3d null;\n      }\n      ("production" !\x3d\x3d "development" ? invariant(\n        ReactDescriptor.isValidDescriptor(renderedComponent),\n        \'%s.render(): A valid ReactComponent must be returned. You may have \' +\n          \'returned undefined, an array or some other invalid object.\',\n        this.constructor.displayName || \'ReactCompositeComponent\'\n      ) : invariant(ReactDescriptor.isValidDescriptor(renderedComponent)));\n      return renderedComponent;\n    }\n  ),\n\n  /**\n   * @private\n   */\n  _bindAutoBindMethods: function() {\n    for (var autoBindKey in this.__reactAutoBindMap) {\n      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n        continue;\n      }\n      var method \x3d this.__reactAutoBindMap[autoBindKey];\n      this[autoBindKey] \x3d this._bindAutoBindMethod(ReactErrorUtils.guard(\n        method,\n        this.constructor.displayName + \'.\' + autoBindKey\n      ));\n    }\n  },\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {function} method Method to be bound.\n   * @private\n   */\n  _bindAutoBindMethod: function(method) {\n    var component \x3d this;\n    var boundMethod \x3d function() {\n      return method.apply(component, arguments);\n    };\n    if ("production" !\x3d\x3d "development") {\n      boundMethod.__reactBoundContext \x3d component;\n      boundMethod.__reactBoundMethod \x3d method;\n      boundMethod.__reactBoundArguments \x3d null;\n      var componentName \x3d component.constructor.displayName;\n      var _bind \x3d boundMethod.bind;\n      boundMethod.bind \x3d function(newThis ) {var args\x3dArray.prototype.slice.call(arguments,1);\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of "this" that the user is trying to use, so\n        // let\'s warn.\n        if (newThis !\x3d\x3d component \x26\x26 newThis !\x3d\x3d null) {\n          monitorCodeUse(\'react_bind_warning\', { component: componentName });\n          console.warn(\n            \'bind(): React component methods may only be bound to the \' +\n            \'component instance. See \' + componentName\n          );\n        } else if (!args.length) {\n          monitorCodeUse(\'react_bind_warning\', { component: componentName });\n          console.warn(\n            \'bind(): You are binding a component method to the component. \' +\n            \'React does this for you automatically in a high-performance \' +\n            \'way, so you can safely remove this call. See \' + componentName\n          );\n          return boundMethod;\n        }\n        var reboundMethod \x3d _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext \x3d component;\n        reboundMethod.__reactBoundMethod \x3d method;\n        reboundMethod.__reactBoundArguments \x3d args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n};\n\nvar ReactCompositeComponentBase \x3d function() {};\nmixInto(ReactCompositeComponentBase, ReactComponent.Mixin);\nmixInto(ReactCompositeComponentBase, ReactOwner.Mixin);\nmixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);\nmixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactCompositeComponent\n * @extends ReactComponent\n * @extends ReactOwner\n * @extends ReactPropTransferer\n */\nvar ReactCompositeComponent \x3d {\n\n  LifeCycle: CompositeLifeCycle,\n\n  Base: ReactCompositeComponentBase,\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function(spec) {\n    var Constructor \x3d function(props, owner) {\n      this.construct(props, owner);\n    };\n    Constructor.prototype \x3d new ReactCompositeComponentBase();\n    Constructor.prototype.constructor \x3d Constructor;\n\n    injectedMixins.forEach(\n      mixSpecIntoComponent.bind(null, Constructor)\n    );\n\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps \x3d Constructor.getDefaultProps();\n    }\n\n    ("production" !\x3d\x3d "development" ? invariant(\n      Constructor.prototype.render,\n      \'createClass(...): Class specification must implement a `render` method.\'\n    ) : invariant(Constructor.prototype.render));\n\n    if ("production" !\x3d\x3d "development") {\n      if (Constructor.prototype.componentShouldUpdate) {\n        monitorCodeUse(\n          \'react_component_should_update_warning\',\n          { component: spec.displayName }\n        );\n        console.warn(\n          (spec.displayName || \'A component\') + \' has a method called \' +\n          \'componentShouldUpdate(). Did you mean shouldComponentUpdate()? \' +\n          \'The name is phrased as a question because the function is \' +\n          \'expected to return a value.\'\n         );\n      }\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactCompositeComponentInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] \x3d null;\n      }\n    }\n\n    var descriptorFactory \x3d ReactDescriptor.createFactory(Constructor);\n\n    if ("production" !\x3d\x3d "development") {\n      return ReactDescriptorValidator.createFactory(\n        descriptorFactory,\n        Constructor.propTypes,\n        Constructor.contextTypes\n      );\n    }\n\n    return descriptorFactory;\n  },\n\n  injection: {\n    injectMixin: function(mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n};\n\nmodule.exports \x3d ReactCompositeComponent;\n\n},{"./ReactComponent":31,"./ReactContext":34,"./ReactCurrentOwner":35,"./ReactDescriptor":51,"./ReactDescriptorValidator":52,"./ReactEmptyComponent":53,"./ReactErrorUtils":54,"./ReactOwner":64,"./ReactPerf":65,"./ReactPropTransferer":66,"./ReactPropTypeLocationNames":67,"./ReactPropTypeLocations":68,"./ReactUpdates":76,"./instantiateReactComponent":119,"./invariant":120,"./keyMirror":126,"./mapObject":128,"./merge":130,"./mixInto":133,"./monitorCodeUse":134,"./shouldUpdateReactComponent":140,"./warning":143}],34:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactContext\n */\n\n"use strict";\n\nvar merge \x3d _dereq_("./merge");\n\n/**\n * Keeps track of the current context.\n *\n * The context is automatically passed down the component ownership hierarchy\n * and is accessible via `this.context` on ReactCompositeComponents.\n */\nvar ReactContext \x3d {\n\n  /**\n   * @internal\n   * @type {object}\n   */\n  current: {},\n\n  /**\n   * Temporarily extends the current context while executing scopedCallback.\n   *\n   * A typical use case might look like\n   *\n   *  render: function() {\n   *    var children \x3d ReactContext.withContext({foo: \'foo\'} () \x3d\x3e (\n   *\n   *    ));\n   *    return \x3cdiv\x3e{children}\x3c/div\x3e;\n   *  }\n   *\n   * @param {object} newContext New context to merge into the existing context\n   * @param {function} scopedCallback Callback to run with the new context\n   * @return {ReactComponent|array\x3cReactComponent\x3e}\n   */\n  withContext: function(newContext, scopedCallback) {\n    var result;\n    var previousContext \x3d ReactContext.current;\n    ReactContext.current \x3d merge(previousContext, newContext);\n    try {\n      result \x3d scopedCallback();\n    } finally {\n      ReactContext.current \x3d previousContext;\n    }\n    return result;\n  }\n\n};\n\nmodule.exports \x3d ReactContext;\n\n},{"./merge":130}],35:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactCurrentOwner\n */\n\n"use strict";\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n *\n * The depth indicate how many composite components are above this render level.\n */\nvar ReactCurrentOwner \x3d {\n\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n\n};\n\nmodule.exports \x3d ReactCurrentOwner;\n\n},{}],36:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOM\n * @typechecks static-only\n */\n\n"use strict";\n\nvar ReactDescriptor \x3d _dereq_("./ReactDescriptor");\nvar ReactDescriptorValidator \x3d _dereq_("./ReactDescriptorValidator");\nvar ReactDOMComponent \x3d _dereq_("./ReactDOMComponent");\n\nvar mergeInto \x3d _dereq_("./mergeInto");\nvar mapObject \x3d _dereq_("./mapObject");\n\n/**\n * Creates a new React class that is idempotent and capable of containing other\n * React components. It accepts event listeners and DOM properties that are\n * valid according to `DOMProperty`.\n *\n *  - Event listeners: `onClick`, `onMouseDown`, etc.\n *  - DOM properties: `className`, `name`, `title`, etc.\n *\n * The `style` property functions differently from the DOM API. It accepts an\n * object mapping of style properties to values.\n *\n * @param {boolean} omitClose True if the close tag should be omitted.\n * @param {string} tag Tag name (e.g. `div`).\n * @private\n */\nfunction createDOMComponentClass(omitClose, tag) {\n  var Constructor \x3d function(descriptor) {\n    this.construct(descriptor);\n  };\n  Constructor.prototype \x3d new ReactDOMComponent(tag, omitClose);\n  Constructor.prototype.constructor \x3d Constructor;\n  Constructor.displayName \x3d tag;\n\n  var ConvenienceConstructor \x3d ReactDescriptor.createFactory(Constructor);\n\n  if ("production" !\x3d\x3d "development") {\n    return ReactDescriptorValidator.createFactory(\n      ConvenienceConstructor\n    );\n  }\n\n  return ConvenienceConstructor;\n}\n\n/**\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.\n * This is also accessible via `React.DOM`.\n *\n * @public\n */\nvar ReactDOM \x3d mapObject({\n  a: false,\n  abbr: false,\n  address: false,\n  area: true,\n  article: false,\n  aside: false,\n  audio: false,\n  b: false,\n  base: true,\n  bdi: false,\n  bdo: false,\n  big: false,\n  blockquote: false,\n  body: false,\n  br: true,\n  button: false,\n  canvas: false,\n  caption: false,\n  cite: false,\n  code: false,\n  col: true,\n  colgroup: false,\n  data: false,\n  datalist: false,\n  dd: false,\n  del: false,\n  details: false,\n  dfn: false,\n  dialog: false,\n  div: false,\n  dl: false,\n  dt: false,\n  em: false,\n  embed: true,\n  fieldset: false,\n  figcaption: false,\n  figure: false,\n  footer: false,\n  form: false, // NOTE: Injected, see `ReactDOMForm`.\n  h1: false,\n  h2: false,\n  h3: false,\n  h4: false,\n  h5: false,\n  h6: false,\n  head: false,\n  header: false,\n  hr: true,\n  html: false,\n  i: false,\n  iframe: false,\n  img: true,\n  input: true,\n  ins: false,\n  kbd: false,\n  keygen: true,\n  label: false,\n  legend: false,\n  li: false,\n  link: true,\n  main: false,\n  map: false,\n  mark: false,\n  menu: false,\n  menuitem: false, // NOTE: Close tag should be omitted, but causes problems.\n  meta: true,\n  meter: false,\n  nav: false,\n  noscript: false,\n  object: false,\n  ol: false,\n  optgroup: false,\n  option: false,\n  output: false,\n  p: false,\n  param: true,\n  picture: false,\n  pre: false,\n  progress: false,\n  q: false,\n  rp: false,\n  rt: false,\n  ruby: false,\n  s: false,\n  samp: false,\n  script: false,\n  section: false,\n  select: false,\n  small: false,\n  source: true,\n  span: false,\n  strong: false,\n  style: false,\n  sub: false,\n  summary: false,\n  sup: false,\n  table: false,\n  tbody: false,\n  td: false,\n  textarea: false, // NOTE: Injected, see `ReactDOMTextarea`.\n  tfoot: false,\n  th: false,\n  thead: false,\n  time: false,\n  title: false,\n  tr: false,\n  track: true,\n  u: false,\n  ul: false,\n  \'var\': false,\n  video: false,\n  wbr: true,\n\n  // SVG\n  circle: false,\n  defs: false,\n  ellipse: false,\n  g: false,\n  line: false,\n  linearGradient: false,\n  mask: false,\n  path: false,\n  pattern: false,\n  polygon: false,\n  polyline: false,\n  radialGradient: false,\n  rect: false,\n  stop: false,\n  svg: false,\n  text: false,\n  tspan: false\n}, createDOMComponentClass);\n\nvar injection \x3d {\n  injectComponentClasses: function(componentClasses) {\n    mergeInto(ReactDOM, componentClasses);\n  }\n};\n\nReactDOM.injection \x3d injection;\n\nmodule.exports \x3d ReactDOM;\n\n},{"./ReactDOMComponent":38,"./ReactDescriptor":51,"./ReactDescriptorValidator":52,"./mapObject":128,"./mergeInto":132}],37:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMButton\n */\n\n"use strict";\n\nvar AutoFocusMixin \x3d _dereq_("./AutoFocusMixin");\nvar ReactBrowserComponentMixin \x3d _dereq_("./ReactBrowserComponentMixin");\nvar ReactCompositeComponent \x3d _dereq_("./ReactCompositeComponent");\nvar ReactDOM \x3d _dereq_("./ReactDOM");\n\nvar keyMirror \x3d _dereq_("./keyMirror");\n\n// Store a reference to the \x3cbutton\x3e `ReactDOMComponent`.\nvar button \x3d ReactDOM.button;\n\nvar mouseListenerNames \x3d keyMirror({\n  onClick: true,\n  onDoubleClick: true,\n  onMouseDown: true,\n  onMouseMove: true,\n  onMouseUp: true,\n  onClickCapture: true,\n  onDoubleClickCapture: true,\n  onMouseDownCapture: true,\n  onMouseMoveCapture: true,\n  onMouseUpCapture: true\n});\n\n/**\n * Implements a \x3cbutton\x3e native component that does not receive mouse events\n * when `disabled` is set.\n */\nvar ReactDOMButton \x3d ReactCompositeComponent.createClass({\n  displayName: \'ReactDOMButton\',\n\n  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],\n\n  render: function() {\n    var props \x3d {};\n\n    // Copy the props; except the mouse listeners if we\'re disabled\n    for (var key in this.props) {\n      if (this.props.hasOwnProperty(key) \x26\x26\n          (!this.props.disabled || !mouseListenerNames[key])) {\n        props[key] \x3d this.props[key];\n      }\n    }\n\n    return button(props, this.props.children);\n  }\n\n});\n\nmodule.exports \x3d ReactDOMButton;\n\n},{"./AutoFocusMixin":1,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36,"./keyMirror":126}],38:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMComponent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar CSSPropertyOperations \x3d _dereq_("./CSSPropertyOperations");\nvar DOMProperty \x3d _dereq_("./DOMProperty");\nvar DOMPropertyOperations \x3d _dereq_("./DOMPropertyOperations");\nvar ReactBrowserComponentMixin \x3d _dereq_("./ReactBrowserComponentMixin");\nvar ReactComponent \x3d _dereq_("./ReactComponent");\nvar ReactBrowserEventEmitter \x3d _dereq_("./ReactBrowserEventEmitter");\nvar ReactMount \x3d _dereq_("./ReactMount");\nvar ReactMultiChild \x3d _dereq_("./ReactMultiChild");\nvar ReactPerf \x3d _dereq_("./ReactPerf");\n\nvar escapeTextForBrowser \x3d _dereq_("./escapeTextForBrowser");\nvar invariant \x3d _dereq_("./invariant");\nvar keyOf \x3d _dereq_("./keyOf");\nvar merge \x3d _dereq_("./merge");\nvar mixInto \x3d _dereq_("./mixInto");\n\nvar deleteListener \x3d ReactBrowserEventEmitter.deleteListener;\nvar listenTo \x3d ReactBrowserEventEmitter.listenTo;\nvar registrationNameModules \x3d ReactBrowserEventEmitter.registrationNameModules;\n\n// For quickly matching children type, to test if can be treated as content.\nvar CONTENT_TYPES \x3d {\'string\': true, \'number\': true};\n\nvar STYLE \x3d keyOf({style: null});\n\nvar ELEMENT_NODE_TYPE \x3d 1;\n\n/**\n * @param {?object} props\n */\nfunction assertValidProps(props) {\n  if (!props) {\n    return;\n  }\n  // Note the use of `\x3d\x3d` which checks for null or undefined.\n  ("production" !\x3d\x3d "development" ? invariant(\n    props.children \x3d\x3d null || props.dangerouslySetInnerHTML \x3d\x3d null,\n    \'Can only set one of `children` or `props.dangerouslySetInnerHTML`.\'\n  ) : invariant(props.children \x3d\x3d null || props.dangerouslySetInnerHTML \x3d\x3d null));\n  ("production" !\x3d\x3d "development" ? invariant(\n    props.style \x3d\x3d null || typeof props.style \x3d\x3d\x3d \'object\',\n    \'The `style` prop expects a mapping from style properties to values, \' +\n    \'not a string.\'\n  ) : invariant(props.style \x3d\x3d null || typeof props.style \x3d\x3d\x3d \'object\'));\n}\n\nfunction putListener(id, registrationName, listener, transaction) {\n  var container \x3d ReactMount.findReactContainerForID(id);\n  if (container) {\n    var doc \x3d container.nodeType \x3d\x3d\x3d ELEMENT_NODE_TYPE ?\n      container.ownerDocument :\n      container;\n    listenTo(registrationName, doc);\n  }\n  transaction.getPutListenerQueue().enqueuePutListener(\n    id,\n    registrationName,\n    listener\n  );\n}\n\n\n/**\n * @constructor ReactDOMComponent\n * @extends ReactComponent\n * @extends ReactMultiChild\n */\nfunction ReactDOMComponent(tag, omitClose) {\n  this._tagOpen \x3d \'\x3c\' + tag;\n  this._tagClose \x3d omitClose ? \'\' : \'\x3c/\' + tag + \'\x3e\';\n  this.tagName \x3d tag.toUpperCase();\n}\n\nReactDOMComponent.Mixin \x3d {\n\n  /**\n   * Generates root tag markup then recurses. This method has side effects and\n   * is not idempotent.\n   *\n   * @internal\n   * @param {string} rootID The root DOM ID for this node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} The computed markup.\n   */\n  mountComponent: ReactPerf.measure(\n    \'ReactDOMComponent\',\n    \'mountComponent\',\n    function(rootID, transaction, mountDepth) {\n      ReactComponent.Mixin.mountComponent.call(\n        this,\n        rootID,\n        transaction,\n        mountDepth\n      );\n      assertValidProps(this.props);\n      return (\n        this._createOpenTagMarkupAndPutListeners(transaction) +\n        this._createContentMarkup(transaction) +\n        this._tagClose\n      );\n    }\n  ),\n\n  /**\n   * Creates markup for the open tag and all attributes.\n   *\n   * This method has side effects because events get registered.\n   *\n   * Iterating over object properties is faster than iterating over arrays.\n   * @see http://jsperf.com/obj-vs-arr-iteration\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup of opening tag.\n   */\n  _createOpenTagMarkupAndPutListeners: function(transaction) {\n    var props \x3d this.props;\n    var ret \x3d this._tagOpen;\n\n    for (var propKey in props) {\n      if (!props.hasOwnProperty(propKey)) {\n        continue;\n      }\n      var propValue \x3d props[propKey];\n      if (propValue \x3d\x3d null) {\n        continue;\n      }\n      if (registrationNameModules.hasOwnProperty(propKey)) {\n        putListener(this._rootNodeID, propKey, propValue, transaction);\n      } else {\n        if (propKey \x3d\x3d\x3d STYLE) {\n          if (propValue) {\n            propValue \x3d props.style \x3d merge(props.style);\n          }\n          propValue \x3d CSSPropertyOperations.createMarkupForStyles(propValue);\n        }\n        var markup \x3d\n          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);\n        if (markup) {\n          ret +\x3d \' \' + markup;\n        }\n      }\n    }\n\n    // For static pages, no need to put React ID and checksum. Saves lots of\n    // bytes.\n    if (transaction.renderToStaticMarkup) {\n      return ret + \'\x3e\';\n    }\n\n    var markupForID \x3d DOMPropertyOperations.createMarkupForID(this._rootNodeID);\n    return ret + \' \' + markupForID + \'\x3e\';\n  },\n\n  /**\n   * Creates markup for the content between the tags.\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Content markup.\n   */\n  _createContentMarkup: function(transaction) {\n    // Intentional use of !\x3d to avoid catching zero/false.\n    var innerHTML \x3d this.props.dangerouslySetInnerHTML;\n    if (innerHTML !\x3d null) {\n      if (innerHTML.__html !\x3d null) {\n        return innerHTML.__html;\n      }\n    } else {\n      var contentToUse \x3d\n        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;\n      var childrenToUse \x3d contentToUse !\x3d null ? null : this.props.children;\n      if (contentToUse !\x3d null) {\n        return escapeTextForBrowser(contentToUse);\n      } else if (childrenToUse !\x3d null) {\n        var mountImages \x3d this.mountChildren(\n          childrenToUse,\n          transaction\n        );\n        return mountImages.join(\'\');\n      }\n    }\n    return \'\';\n  },\n\n  receiveComponent: function(nextDescriptor, transaction) {\n    if (nextDescriptor \x3d\x3d\x3d this._descriptor \x26\x26\n        nextDescriptor._owner !\x3d null) {\n      // Since descriptors are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It\'s possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the descriptor. We explicitly check for the existence of an owner since\n      // it\'s possible for a descriptor created outside a composite to be\n      // deeply mutated and reused.\n      return;\n    }\n\n    ReactComponent.Mixin.receiveComponent.call(\n      this,\n      nextDescriptor,\n      transaction\n    );\n  },\n\n  /**\n   * Updates a native DOM component after it has already been allocated and\n   * attached to the DOM. Reconciles the root DOM node, then recurses.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactDescriptor} prevDescriptor\n   * @internal\n   * @overridable\n   */\n  updateComponent: ReactPerf.measure(\n    \'ReactDOMComponent\',\n    \'updateComponent\',\n    function(transaction, prevDescriptor) {\n      assertValidProps(this._descriptor.props);\n      ReactComponent.Mixin.updateComponent.call(\n        this,\n        transaction,\n        prevDescriptor\n      );\n      this._updateDOMProperties(prevDescriptor.props, transaction);\n      this._updateDOMChildren(prevDescriptor.props, transaction);\n    }\n  ),\n\n  /**\n   * Reconciles the properties by detecting differences in property values and\n   * updating the DOM as necessary. This function is probably the single most\n   * critical path for performance optimization.\n   *\n   * TODO: Benchmark whether checking for changed values in memory actually\n   *       improves performance (especially statically positioned elements).\n   * TODO: Benchmark the effects of putting this at the top since 99% of props\n   *       do not change for a given reconciliation.\n   * TODO: Benchmark areas that can be improved with caching.\n   *\n   * @private\n   * @param {object} lastProps\n   * @param {ReactReconcileTransaction} transaction\n   */\n  _updateDOMProperties: function(lastProps, transaction) {\n    var nextProps \x3d this.props;\n    var propKey;\n    var styleName;\n    var styleUpdates;\n    for (propKey in lastProps) {\n      if (nextProps.hasOwnProperty(propKey) ||\n         !lastProps.hasOwnProperty(propKey)) {\n        continue;\n      }\n      if (propKey \x3d\x3d\x3d STYLE) {\n        var lastStyle \x3d lastProps[propKey];\n        for (styleName in lastStyle) {\n          if (lastStyle.hasOwnProperty(styleName)) {\n            styleUpdates \x3d styleUpdates || {};\n            styleUpdates[styleName] \x3d \'\';\n          }\n        }\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        deleteListener(this._rootNodeID, propKey);\n      } else if (\n          DOMProperty.isStandardName[propKey] ||\n          DOMProperty.isCustomAttribute(propKey)) {\n        ReactComponent.BackendIDOperations.deletePropertyByID(\n          this._rootNodeID,\n          propKey\n        );\n      }\n    }\n    for (propKey in nextProps) {\n      var nextProp \x3d nextProps[propKey];\n      var lastProp \x3d lastProps[propKey];\n      if (!nextProps.hasOwnProperty(propKey) || nextProp \x3d\x3d\x3d lastProp) {\n        continue;\n      }\n      if (propKey \x3d\x3d\x3d STYLE) {\n        if (nextProp) {\n          nextProp \x3d nextProps.style \x3d merge(nextProp);\n        }\n        if (lastProp) {\n          // Unset styles on `lastProp` but not on `nextProp`.\n          for (styleName in lastProp) {\n            if (lastProp.hasOwnProperty(styleName) \x26\x26\n                (!nextProp || !nextProp.hasOwnProperty(styleName))) {\n              styleUpdates \x3d styleUpdates || {};\n              styleUpdates[styleName] \x3d \'\';\n            }\n          }\n          // Update styles that changed since `lastProp`.\n          for (styleName in nextProp) {\n            if (nextProp.hasOwnProperty(styleName) \x26\x26\n                lastProp[styleName] !\x3d\x3d nextProp[styleName]) {\n              styleUpdates \x3d styleUpdates || {};\n              styleUpdates[styleName] \x3d nextProp[styleName];\n            }\n          }\n        } else {\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.\n          styleUpdates \x3d nextProp;\n        }\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        putListener(this._rootNodeID, propKey, nextProp, transaction);\n      } else if (\n          DOMProperty.isStandardName[propKey] ||\n          DOMProperty.isCustomAttribute(propKey)) {\n        ReactComponent.BackendIDOperations.updatePropertyByID(\n          this._rootNodeID,\n          propKey,\n          nextProp\n        );\n      }\n    }\n    if (styleUpdates) {\n      ReactComponent.BackendIDOperations.updateStylesByID(\n        this._rootNodeID,\n        styleUpdates\n      );\n    }\n  },\n\n  /**\n   * Reconciles the children with the various properties that affect the\n   * children content.\n   *\n   * @param {object} lastProps\n   * @param {ReactReconcileTransaction} transaction\n   */\n  _updateDOMChildren: function(lastProps, transaction) {\n    var nextProps \x3d this.props;\n\n    var lastContent \x3d\n      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;\n    var nextContent \x3d\n      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;\n\n    var lastHtml \x3d\n      lastProps.dangerouslySetInnerHTML \x26\x26\n      lastProps.dangerouslySetInnerHTML.__html;\n    var nextHtml \x3d\n      nextProps.dangerouslySetInnerHTML \x26\x26\n      nextProps.dangerouslySetInnerHTML.__html;\n\n    // Note the use of `!\x3d` which checks for null or undefined.\n    var lastChildren \x3d lastContent !\x3d null ? null : lastProps.children;\n    var nextChildren \x3d nextContent !\x3d null ? null : nextProps.children;\n\n    // If we\'re switching from children to content/html or vice versa, remove\n    // the old content\n    var lastHasContentOrHtml \x3d lastContent !\x3d null || lastHtml !\x3d null;\n    var nextHasContentOrHtml \x3d nextContent !\x3d null || nextHtml !\x3d null;\n    if (lastChildren !\x3d null \x26\x26 nextChildren \x3d\x3d null) {\n      this.updateChildren(null, transaction);\n    } else if (lastHasContentOrHtml \x26\x26 !nextHasContentOrHtml) {\n      this.updateTextContent(\'\');\n    }\n\n    if (nextContent !\x3d null) {\n      if (lastContent !\x3d\x3d nextContent) {\n        this.updateTextContent(\'\' + nextContent);\n      }\n    } else if (nextHtml !\x3d null) {\n      if (lastHtml !\x3d\x3d nextHtml) {\n        ReactComponent.BackendIDOperations.updateInnerHTMLByID(\n          this._rootNodeID,\n          nextHtml\n        );\n      }\n    } else if (nextChildren !\x3d null) {\n      this.updateChildren(nextChildren, transaction);\n    }\n  },\n\n  /**\n   * Destroys all event registrations for this instance. Does not remove from\n   * the DOM. That must be done by the parent.\n   *\n   * @internal\n   */\n  unmountComponent: function() {\n    this.unmountChildren();\n    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);\n    ReactComponent.Mixin.unmountComponent.call(this);\n  }\n\n};\n\nmixInto(ReactDOMComponent, ReactComponent.Mixin);\nmixInto(ReactDOMComponent, ReactDOMComponent.Mixin);\nmixInto(ReactDOMComponent, ReactMultiChild.Mixin);\nmixInto(ReactDOMComponent, ReactBrowserComponentMixin);\n\nmodule.exports \x3d ReactDOMComponent;\n\n},{"./CSSPropertyOperations":4,"./DOMProperty":10,"./DOMPropertyOperations":11,"./ReactBrowserComponentMixin":28,"./ReactBrowserEventEmitter":29,"./ReactComponent":31,"./ReactMount":61,"./ReactMultiChild":62,"./ReactPerf":65,"./escapeTextForBrowser":104,"./invariant":120,"./keyOf":127,"./merge":130,"./mixInto":133}],39:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMForm\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\nvar LocalEventTrapMixin \x3d _dereq_("./LocalEventTrapMixin");\nvar ReactBrowserComponentMixin \x3d _dereq_("./ReactBrowserComponentMixin");\nvar ReactCompositeComponent \x3d _dereq_("./ReactCompositeComponent");\nvar ReactDOM \x3d _dereq_("./ReactDOM");\n\n// Store a reference to the \x3cform\x3e `ReactDOMComponent`.\nvar form \x3d ReactDOM.form;\n\n/**\n * Since onSubmit doesn\'t bubble OR capture on the top level in IE8, we need\n * to capture it on the \x3cform\x3e element itself. There are lots of hacks we could\n * do to accomplish this, but the most reliable is to make \x3cform\x3e a\n * composite component and use `componentDidMount` to attach the event handlers.\n */\nvar ReactDOMForm \x3d ReactCompositeComponent.createClass({\n  displayName: \'ReactDOMForm\',\n\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],\n\n  render: function() {\n    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,\n    // `jshint` fails to parse JSX so in order for linting to work in the open\n    // source repo, we need to just use `ReactDOM.form`.\n    return this.transferPropsTo(form(null, this.props.children));\n  },\n\n  componentDidMount: function() {\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, \'reset\');\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, \'submit\');\n  }\n});\n\nmodule.exports \x3d ReactDOMForm;\n\n},{"./EventConstants":15,"./LocalEventTrapMixin":24,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36}],40:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n\n"use strict";\n\nvar CSSPropertyOperations \x3d _dereq_("./CSSPropertyOperations");\nvar DOMChildrenOperations \x3d _dereq_("./DOMChildrenOperations");\nvar DOMPropertyOperations \x3d _dereq_("./DOMPropertyOperations");\nvar ReactMount \x3d _dereq_("./ReactMount");\nvar ReactPerf \x3d _dereq_("./ReactPerf");\n\nvar invariant \x3d _dereq_("./invariant");\nvar setInnerHTML \x3d _dereq_("./setInnerHTML");\n\n/**\n * Errors for properties that should not be updated with `updatePropertyById()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS \x3d {\n  dangerouslySetInnerHTML:\n    \'`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.\',\n  style: \'`style` must be set using `updateStylesByID()`.\'\n};\n\n/**\n * Operations used to process updates to DOM nodes. This is made injectable via\n * `ReactComponent.BackendIDOperations`.\n */\nvar ReactDOMIDOperations \x3d {\n\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: ReactPerf.measure(\n    \'ReactDOMIDOperations\',\n    \'updatePropertyByID\',\n    function(id, name, value) {\n      var node \x3d ReactMount.getNode(id);\n      ("production" !\x3d\x3d "development" ? invariant(\n        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n        \'updatePropertyByID(...): %s\',\n        INVALID_PROPERTY_ERRORS[name]\n      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n\n      // If we\'re updating to null or undefined, we should remove the property\n      // from the DOM node instead of inadvertantly setting to a string. This\n      // brings us in line with the same behavior we have on initial render.\n      if (value !\x3d null) {\n        DOMPropertyOperations.setValueForProperty(node, name, value);\n      } else {\n        DOMPropertyOperations.deleteValueForProperty(node, name);\n      }\n    }\n  ),\n\n  /**\n   * Updates a DOM node to remove a property. This should only be used to remove\n   * DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A property name to remove, see `DOMProperty`.\n   * @internal\n   */\n  deletePropertyByID: ReactPerf.measure(\n    \'ReactDOMIDOperations\',\n    \'deletePropertyByID\',\n    function(id, name, value) {\n      var node \x3d ReactMount.getNode(id);\n      ("production" !\x3d\x3d "development" ? invariant(\n        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n        \'updatePropertyByID(...): %s\',\n        INVALID_PROPERTY_ERRORS[name]\n      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n      DOMPropertyOperations.deleteValueForProperty(node, name, value);\n    }\n  ),\n\n  /**\n   * Updates a DOM node with new style values. If a value is specified as \'\',\n   * the corresponding style property will be unset.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {object} styles Mapping from styles to values.\n   * @internal\n   */\n  updateStylesByID: ReactPerf.measure(\n    \'ReactDOMIDOperations\',\n    \'updateStylesByID\',\n    function(id, styles) {\n      var node \x3d ReactMount.getNode(id);\n      CSSPropertyOperations.setValueForStyles(node, styles);\n    }\n  ),\n\n  /**\n   * Updates a DOM node\'s innerHTML.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} html An HTML string.\n   * @internal\n   */\n  updateInnerHTMLByID: ReactPerf.measure(\n    \'ReactDOMIDOperations\',\n    \'updateInnerHTMLByID\',\n    function(id, html) {\n      var node \x3d ReactMount.getNode(id);\n      setInnerHTML(node, html);\n    }\n  ),\n\n  /**\n   * Updates a DOM node\'s text content set by `props.content`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} content Text content.\n   * @internal\n   */\n  updateTextContentByID: ReactPerf.measure(\n    \'ReactDOMIDOperations\',\n    \'updateTextContentByID\',\n    function(id, content) {\n      var node \x3d ReactMount.getNode(id);\n      DOMChildrenOperations.updateTextContent(node, content);\n    }\n  ),\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(\n    \'ReactDOMIDOperations\',\n    \'dangerouslyReplaceNodeWithMarkupByID\',\n    function(id, markup) {\n      var node \x3d ReactMount.getNode(id);\n      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n    }\n  ),\n\n  /**\n   * Updates a component\'s children by processing a series of updates.\n   *\n   * @param {array\x3cobject\x3e} updates List of update configurations.\n   * @param {array\x3cstring\x3e} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: ReactPerf.measure(\n    \'ReactDOMIDOperations\',\n    \'dangerouslyProcessChildrenUpdates\',\n    function(updates, markup) {\n      for (var i \x3d 0; i \x3c updates.length; i++) {\n        updates[i].parentNode \x3d ReactMount.getNode(updates[i].parentID);\n      }\n      DOMChildrenOperations.processUpdates(updates, markup);\n    }\n  )\n};\n\nmodule.exports \x3d ReactDOMIDOperations;\n\n},{"./CSSPropertyOperations":4,"./DOMChildrenOperations":9,"./DOMPropertyOperations":11,"./ReactMount":61,"./ReactPerf":65,"./invariant":120,"./setInnerHTML":138}],41:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMImg\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\nvar LocalEventTrapMixin \x3d _dereq_("./LocalEventTrapMixin");\nvar ReactBrowserComponentMixin \x3d _dereq_("./ReactBrowserComponentMixin");\nvar ReactCompositeComponent \x3d _dereq_("./ReactCompositeComponent");\nvar ReactDOM \x3d _dereq_("./ReactDOM");\n\n// Store a reference to the \x3cimg\x3e `ReactDOMComponent`.\nvar img \x3d ReactDOM.img;\n\n/**\n * Since onLoad doesn\'t bubble OR capture on the top level in IE8, we need to\n * capture it on the \x3cimg\x3e element itself. There are lots of hacks we could do\n * to accomplish this, but the most reliable is to make \x3cimg\x3e a composite\n * component and use `componentDidMount` to attach the event handlers.\n */\nvar ReactDOMImg \x3d ReactCompositeComponent.createClass({\n  displayName: \'ReactDOMImg\',\n  tagName: \'IMG\',\n\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],\n\n  render: function() {\n    return img(this.props);\n  },\n\n  componentDidMount: function() {\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, \'load\');\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, \'error\');\n  }\n});\n\nmodule.exports \x3d ReactDOMImg;\n\n},{"./EventConstants":15,"./LocalEventTrapMixin":24,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36}],42:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMInput\n */\n\n"use strict";\n\nvar AutoFocusMixin \x3d _dereq_("./AutoFocusMixin");\nvar DOMPropertyOperations \x3d _dereq_("./DOMPropertyOperations");\nvar LinkedValueUtils \x3d _dereq_("./LinkedValueUtils");\nvar ReactBrowserComponentMixin \x3d _dereq_("./ReactBrowserComponentMixin");\nvar ReactCompositeComponent \x3d _dereq_("./ReactCompositeComponent");\nvar ReactDOM \x3d _dereq_("./ReactDOM");\nvar ReactMount \x3d _dereq_("./ReactMount");\n\nvar invariant \x3d _dereq_("./invariant");\nvar merge \x3d _dereq_("./merge");\n\n// Store a reference to the \x3cinput\x3e `ReactDOMComponent`.\nvar input \x3d ReactDOM.input;\n\nvar instancesByReactID \x3d {};\n\n/**\n * Implements an \x3cinput\x3e native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput \x3d ReactCompositeComponent.createClass({\n  displayName: \'ReactDOMInput\',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue \x3d this.props.defaultValue;\n    return {\n      checked: this.props.defaultChecked || false,\n      value: defaultValue !\x3d null ? defaultValue : null\n    };\n  },\n\n  shouldComponentUpdate: function() {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n\n  render: function() {\n    // Clone `this.props` so we don\'t mutate the input.\n    var props \x3d merge(this.props);\n\n    props.defaultChecked \x3d null;\n    props.defaultValue \x3d null;\n\n    var value \x3d LinkedValueUtils.getValue(this);\n    props.value \x3d value !\x3d null ? value : this.state.value;\n\n    var checked \x3d LinkedValueUtils.getChecked(this);\n    props.checked \x3d checked !\x3d null ? checked : this.state.checked;\n\n    props.onChange \x3d this._handleChange;\n\n    return input(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    var id \x3d ReactMount.getID(this.getDOMNode());\n    instancesByReactID[id] \x3d this;\n  },\n\n  componentWillUnmount: function() {\n    var rootNode \x3d this.getDOMNode();\n    var id \x3d ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var rootNode \x3d this.getDOMNode();\n    if (this.props.checked !\x3d null) {\n      DOMPropertyOperations.setValueForProperty(\n        rootNode,\n        \'checked\',\n        this.props.checked || false\n      );\n    }\n\n    var value \x3d LinkedValueUtils.getValue(this);\n    if (value !\x3d null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn\'t.\n      DOMPropertyOperations.setValueForProperty(rootNode, \'value\', \'\' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange \x3d LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      this._isChanging \x3d true;\n      returnValue \x3d onChange.call(this, event);\n      this._isChanging \x3d false;\n    }\n    this.setState({\n      checked: event.target.checked,\n      value: event.target.value\n    });\n\n    var name \x3d this.props.name;\n    if (this.props.type \x3d\x3d\x3d \'radio\' \x26\x26 name !\x3d null) {\n      var rootNode \x3d this.getDOMNode();\n      var queryRoot \x3d rootNode;\n\n      while (queryRoot.parentNode) {\n        queryRoot \x3d queryRoot.parentNode;\n      }\n\n      // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won\'t include inputs that use the HTML5 `form\x3d` attribute. Since\n      // the input might not even be in a form, let\'s just use the global\n      // `querySelectorAll` to ensure we don\'t miss anything.\n      var group \x3d queryRoot.querySelectorAll(\n        \'input[name\x3d\' + JSON.stringify(\'\' + name) + \'][type\x3d"radio"]\');\n\n      for (var i \x3d 0, groupLen \x3d group.length; i \x3c groupLen; i++) {\n        var otherNode \x3d group[i];\n        if (otherNode \x3d\x3d\x3d rootNode ||\n            otherNode.form !\x3d\x3d rootNode.form) {\n          continue;\n        }\n        var otherID \x3d ReactMount.getID(otherNode);\n        ("production" !\x3d\x3d "development" ? invariant(\n          otherID,\n          \'ReactDOMInput: Mixing React and non-React radio inputs with the \' +\n          \'same `name` is not supported.\'\n        ) : invariant(otherID));\n        var otherInstance \x3d instancesByReactID[otherID];\n        ("production" !\x3d\x3d "development" ? invariant(\n          otherInstance,\n          \'ReactDOMInput: Unknown radio button ID %s.\',\n          otherID\n        ) : invariant(otherInstance));\n        // In some cases, this will actually change the `checked` state value.\n        // In other cases, there\'s no change but this forces a reconcile upon\n        // which componentDidUpdate will reset the DOM property to whatever it\n        // should be.\n        otherInstance.setState({\n          checked: false\n        });\n      }\n    }\n\n    return returnValue;\n  }\n\n});\n\nmodule.exports \x3d ReactDOMInput;\n\n},{"./AutoFocusMixin":1,"./DOMPropertyOperations":11,"./LinkedValueUtils":23,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36,"./ReactMount":61,"./invariant":120,"./merge":130}],43:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMOption\n */\n\n"use strict";\n\nvar ReactBrowserComponentMixin \x3d _dereq_("./ReactBrowserComponentMixin");\nvar ReactCompositeComponent \x3d _dereq_("./ReactCompositeComponent");\nvar ReactDOM \x3d _dereq_("./ReactDOM");\n\nvar warning \x3d _dereq_("./warning");\n\n// Store a reference to the \x3coption\x3e `ReactDOMComponent`.\nvar option \x3d ReactDOM.option;\n\n/**\n * Implements an \x3coption\x3e native component that warns when `selected` is set.\n */\nvar ReactDOMOption \x3d ReactCompositeComponent.createClass({\n  displayName: \'ReactDOMOption\',\n\n  mixins: [ReactBrowserComponentMixin],\n\n  componentWillMount: function() {\n    // TODO (yungsters): Remove support for `selected` in \x3coption\x3e.\n    if ("production" !\x3d\x3d "development") {\n      ("production" !\x3d\x3d "development" ? warning(\n        this.props.selected \x3d\x3d null,\n        \'Use the `defaultValue` or `value` props on \x3cselect\x3e instead of \' +\n        \'setting `selected` on \x3coption\x3e.\'\n      ) : null);\n    }\n  },\n\n  render: function() {\n    return option(this.props, this.props.children);\n  }\n\n});\n\nmodule.exports \x3d ReactDOMOption;\n\n},{"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36,"./warning":143}],44:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMSelect\n */\n\n"use strict";\n\nvar AutoFocusMixin \x3d _dereq_("./AutoFocusMixin");\nvar LinkedValueUtils \x3d _dereq_("./LinkedValueUtils");\nvar ReactBrowserComponentMixin \x3d _dereq_("./ReactBrowserComponentMixin");\nvar ReactCompositeComponent \x3d _dereq_("./ReactCompositeComponent");\nvar ReactDOM \x3d _dereq_("./ReactDOM");\n\nvar merge \x3d _dereq_("./merge");\n\n// Store a reference to the \x3cselect\x3e `ReactDOMComponent`.\nvar select \x3d ReactDOM.select;\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] \x3d\x3d null) {\n    return;\n  }\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\n        ("The `" + propName + "` prop supplied to \x3cselect\x3e must be an array if ") +\n        ("`multiple` is true.")\n      );\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\n        ("The `" + propName + "` prop supplied to \x3cselect\x3e must be a scalar ") +\n        ("value if `multiple` is false.")\n      );\n    }\n  }\n}\n\n/**\n * If `value` is supplied, updates \x3coption\x3e elements on mount and update.\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {?*} propValue For uncontrolled components, null/undefined. For\n * controlled components, a string (or with `multiple`, a list of strings).\n * @private\n */\nfunction updateOptions(component, propValue) {\n  var multiple \x3d component.props.multiple;\n  var value \x3d propValue !\x3d null ? propValue : component.state.value;\n  var options \x3d component.getDOMNode().options;\n  var selectedValue, i, l;\n  if (multiple) {\n    selectedValue \x3d {};\n    for (i \x3d 0, l \x3d value.length; i \x3c l; ++i) {\n      selectedValue[\'\' + value[i]] \x3d true;\n    }\n  } else {\n    selectedValue \x3d \'\' + value;\n  }\n  for (i \x3d 0, l \x3d options.length; i \x3c l; i++) {\n    var selected \x3d multiple ?\n      selectedValue.hasOwnProperty(options[i].value) :\n      options[i].value \x3d\x3d\x3d selectedValue;\n\n    if (selected !\x3d\x3d options[i].selected) {\n      options[i].selected \x3d selected;\n    }\n  }\n}\n\n/**\n * Implements a \x3cselect\x3e native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * string. If `multiple` is true, the prop must be an array of strings.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect \x3d ReactCompositeComponent.createClass({\n  displayName: \'ReactDOMSelect\',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n\n  getInitialState: function() {\n    return {value: this.props.defaultValue || (this.props.multiple ? [] : \'\')};\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    if (!this.props.multiple \x26\x26 nextProps.multiple) {\n      this.setState({value: [this.state.value]});\n    } else if (this.props.multiple \x26\x26 !nextProps.multiple) {\n      this.setState({value: this.state.value[0]});\n    }\n  },\n\n  shouldComponentUpdate: function() {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n\n  render: function() {\n    // Clone `this.props` so we don\'t mutate the input.\n    var props \x3d merge(this.props);\n\n    props.onChange \x3d this._handleChange;\n    props.value \x3d null;\n\n    return select(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    updateOptions(this, LinkedValueUtils.getValue(this));\n  },\n\n  componentDidUpdate: function(prevProps) {\n    var value \x3d LinkedValueUtils.getValue(this);\n    var prevMultiple \x3d !!prevProps.multiple;\n    var multiple \x3d !!this.props.multiple;\n    if (value !\x3d null || prevMultiple !\x3d\x3d multiple) {\n      updateOptions(this, value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange \x3d LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      this._isChanging \x3d true;\n      returnValue \x3d onChange.call(this, event);\n      this._isChanging \x3d false;\n    }\n\n    var selectedValue;\n    if (this.props.multiple) {\n      selectedValue \x3d [];\n      var options \x3d event.target.options;\n      for (var i \x3d 0, l \x3d options.length; i \x3c l; i++) {\n        if (options[i].selected) {\n          selectedValue.push(options[i].value);\n        }\n      }\n    } else {\n      selectedValue \x3d event.target.value;\n    }\n\n    this.setState({value: selectedValue});\n    return returnValue;\n  }\n\n});\n\nmodule.exports \x3d ReactDOMSelect;\n\n},{"./AutoFocusMixin":1,"./LinkedValueUtils":23,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36,"./merge":130}],45:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMSelection\n */\n\n"use strict";\n\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\n\nvar getNodeForCharacterOffset \x3d _dereq_("./getNodeForCharacterOffset");\nvar getTextContentAccessor \x3d _dereq_("./getTextContentAccessor");\n\n/**\n * While `isCollapsed` is available on the Selection object and `collapsed`\n * is available on the Range object, IE11 sometimes gets them wrong.\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\n */\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode \x3d\x3d\x3d focusNode \x26\x26 anchorOffset \x3d\x3d\x3d focusOffset;\n}\n\n/**\n * Get the appropriate anchor and focus node/offset pairs for IE.\n *\n * The catch here is that IE\'s selection API doesn\'t provide information\n * about whether the selection is forward or backward, so we have to\n * behave as though it\'s always forward.\n *\n * IE text differs from modern selection in that it behaves as though\n * block elements end with a new line. This means character offsets will\n * differ between the two APIs.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getIEOffsets(node) {\n  var selection \x3d document.selection;\n  var selectedRange \x3d selection.createRange();\n  var selectedLength \x3d selectedRange.text.length;\n\n  // Duplicate selection so we can move range without breaking user selection.\n  var fromStart \x3d selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint(\'EndToStart\', selectedRange);\n\n  var startOffset \x3d fromStart.text.length;\n  var endOffset \x3d startOffset + selectedLength;\n\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n\n/**\n * @param {DOMElement} node\n * @return {?object}\n */\nfunction getModernOffsets(node) {\n  var selection \x3d window.getSelection();\n\n  if (selection.rangeCount \x3d\x3d\x3d 0) {\n    return null;\n  }\n\n  var anchorNode \x3d selection.anchorNode;\n  var anchorOffset \x3d selection.anchorOffset;\n  var focusNode \x3d selection.focusNode;\n  var focusOffset \x3d selection.focusOffset;\n\n  var currentRange \x3d selection.getRangeAt(0);\n\n  // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n  var isSelectionCollapsed \x3d isCollapsed(\n    selection.anchorNode,\n    selection.anchorOffset,\n    selection.focusNode,\n    selection.focusOffset\n  );\n\n  var rangeLength \x3d isSelectionCollapsed ? 0 : currentRange.toString().length;\n\n  var tempRange \x3d currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n\n  var isTempRangeCollapsed \x3d isCollapsed(\n    tempRange.startContainer,\n    tempRange.startOffset,\n    tempRange.endContainer,\n    tempRange.endOffset\n  );\n\n  var start \x3d isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end \x3d start + rangeLength;\n\n  // Detect whether the selection is backward.\n  var detectionRange \x3d document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward \x3d detectionRange.collapsed;\n  detectionRange.detach();\n\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n\n/**\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setIEOffsets(node, offsets) {\n  var range \x3d document.selection.createRange().duplicate();\n  var start, end;\n\n  if (typeof offsets.end \x3d\x3d\x3d \'undefined\') {\n    start \x3d offsets.start;\n    end \x3d start;\n  } else if (offsets.start \x3e offsets.end) {\n    start \x3d offsets.end;\n    end \x3d offsets.start;\n  } else {\n    start \x3d offsets.start;\n    end \x3d offsets.end;\n  }\n\n  range.moveToElementText(node);\n  range.moveStart(\'character\', start);\n  range.setEndPoint(\'EndToStart\', range);\n  range.moveEnd(\'character\', end - start);\n  range.select();\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it\'s not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setModernOffsets(node, offsets) {\n  var selection \x3d window.getSelection();\n\n  var length \x3d node[getTextContentAccessor()].length;\n  var start \x3d Math.min(offsets.start, length);\n  var end \x3d typeof offsets.end \x3d\x3d\x3d \'undefined\' ?\n            start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn\'t support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend \x26\x26 start \x3e end) {\n    var temp \x3d end;\n    end \x3d start;\n    start \x3d temp;\n  }\n\n  var startMarker \x3d getNodeForCharacterOffset(node, start);\n  var endMarker \x3d getNodeForCharacterOffset(node, end);\n\n  if (startMarker \x26\x26 endMarker) {\n    var range \x3d document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start \x3e end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n\n    range.detach();\n  }\n}\n\nvar useIEOffsets \x3d ExecutionEnvironment.canUseDOM \x26\x26 document.selection;\n\nvar ReactDOMSelection \x3d {\n  /**\n   * @param {DOMElement} node\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n\n  /**\n   * @param {DOMElement|DOMTextNode} node\n   * @param {object} offsets\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\n\nmodule.exports \x3d ReactDOMSelection;\n\n},{"./ExecutionEnvironment":21,"./getNodeForCharacterOffset":113,"./getTextContentAccessor":115}],46:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMTextarea\n */\n\n"use strict";\n\nvar AutoFocusMixin \x3d _dereq_("./AutoFocusMixin");\nvar DOMPropertyOperations \x3d _dereq_("./DOMPropertyOperations");\nvar LinkedValueUtils \x3d _dereq_("./LinkedValueUtils");\nvar ReactBrowserComponentMixin \x3d _dereq_("./ReactBrowserComponentMixin");\nvar ReactCompositeComponent \x3d _dereq_("./ReactCompositeComponent");\nvar ReactDOM \x3d _dereq_("./ReactDOM");\n\nvar invariant \x3d _dereq_("./invariant");\nvar merge \x3d _dereq_("./merge");\n\nvar warning \x3d _dereq_("./warning");\n\n// Store a reference to the \x3ctextarea\x3e `ReactDOMComponent`.\nvar textarea \x3d ReactDOM.textarea;\n\n/**\n * Implements a \x3ctextarea\x3e native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea \x3d ReactCompositeComponent.createClass({\n  displayName: \'ReactDOMTextarea\',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue \x3d this.props.defaultValue;\n    // TODO (yungsters): Remove support for children content in \x3ctextarea\x3e.\n    var children \x3d this.props.children;\n    if (children !\x3d null) {\n      if ("production" !\x3d\x3d "development") {\n        ("production" !\x3d\x3d "development" ? warning(\n          false,\n          \'Use the `defaultValue` or `value` props instead of setting \' +\n          \'children on \x3ctextarea\x3e.\'\n        ) : null);\n      }\n      ("production" !\x3d\x3d "development" ? invariant(\n        defaultValue \x3d\x3d null,\n        \'If you supply `defaultValue` on a \x3ctextarea\x3e, do not pass children.\'\n      ) : invariant(defaultValue \x3d\x3d null));\n      if (Array.isArray(children)) {\n        ("production" !\x3d\x3d "development" ? invariant(\n          children.length \x3c\x3d 1,\n          \'\x3ctextarea\x3e can only have at most one child.\'\n        ) : invariant(children.length \x3c\x3d 1));\n        children \x3d children[0];\n      }\n\n      defaultValue \x3d \'\' + children;\n    }\n    if (defaultValue \x3d\x3d null) {\n      defaultValue \x3d \'\';\n    }\n    var value \x3d LinkedValueUtils.getValue(this);\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn\'t update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that\'s why it\'s\n      // forced to be a string.\n      initialValue: \'\' + (value !\x3d null ? value : defaultValue)\n    };\n  },\n\n  shouldComponentUpdate: function() {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n\n  render: function() {\n    // Clone `this.props` so we don\'t mutate the input.\n    var props \x3d merge(this.props);\n\n    ("production" !\x3d\x3d "development" ? invariant(\n      props.dangerouslySetInnerHTML \x3d\x3d null,\n      \'`dangerouslySetInnerHTML` does not make sense on \x3ctextarea\x3e.\'\n    ) : invariant(props.dangerouslySetInnerHTML \x3d\x3d null));\n\n    props.defaultValue \x3d null;\n    props.value \x3d null;\n    props.onChange \x3d this._handleChange;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    return textarea(props, this.state.initialValue);\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var value \x3d LinkedValueUtils.getValue(this);\n    if (value !\x3d null) {\n      var rootNode \x3d this.getDOMNode();\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn\'t.\n      DOMPropertyOperations.setValueForProperty(rootNode, \'value\', \'\' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange \x3d LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      this._isChanging \x3d true;\n      returnValue \x3d onChange.call(this, event);\n      this._isChanging \x3d false;\n    }\n    this.setState({value: event.target.value});\n    return returnValue;\n  }\n\n});\n\nmodule.exports \x3d ReactDOMTextarea;\n\n},{"./AutoFocusMixin":1,"./DOMPropertyOperations":11,"./LinkedValueUtils":23,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36,"./invariant":120,"./merge":130,"./warning":143}],47:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n"use strict";\n\nvar ReactUpdates \x3d _dereq_("./ReactUpdates");\nvar Transaction \x3d _dereq_("./Transaction");\n\nvar emptyFunction \x3d _dereq_("./emptyFunction");\nvar mixInto \x3d _dereq_("./mixInto");\n\nvar RESET_BATCHED_UPDATES \x3d {\n  initialize: emptyFunction,\n  close: function() {\n    ReactDefaultBatchingStrategy.isBatchingUpdates \x3d false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES \x3d {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS \x3d [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\nmixInto(ReactDefaultBatchingStrategyTransaction, Transaction.Mixin);\nmixInto(ReactDefaultBatchingStrategyTransaction, {\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  }\n});\n\nvar transaction \x3d new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy \x3d {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren\'t updated unnecessarily.\n   */\n  batchedUpdates: function(callback, a, b) {\n    var alreadyBatchingUpdates \x3d ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates \x3d true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b);\n    } else {\n      transaction.perform(callback, null, a, b);\n    }\n  }\n};\n\nmodule.exports \x3d ReactDefaultBatchingStrategy;\n\n},{"./ReactUpdates":76,"./Transaction":92,"./emptyFunction":102,"./mixInto":133}],48:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDefaultInjection\n */\n\n"use strict";\n\nvar BeforeInputEventPlugin \x3d _dereq_("./BeforeInputEventPlugin");\nvar ChangeEventPlugin \x3d _dereq_("./ChangeEventPlugin");\nvar ClientReactRootIndex \x3d _dereq_("./ClientReactRootIndex");\nvar CompositionEventPlugin \x3d _dereq_("./CompositionEventPlugin");\nvar DefaultEventPluginOrder \x3d _dereq_("./DefaultEventPluginOrder");\nvar EnterLeaveEventPlugin \x3d _dereq_("./EnterLeaveEventPlugin");\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\nvar HTMLDOMPropertyConfig \x3d _dereq_("./HTMLDOMPropertyConfig");\nvar MobileSafariClickEventPlugin \x3d _dereq_("./MobileSafariClickEventPlugin");\nvar ReactBrowserComponentMixin \x3d _dereq_("./ReactBrowserComponentMixin");\nvar ReactComponentBrowserEnvironment \x3d\n  _dereq_("./ReactComponentBrowserEnvironment");\nvar ReactDefaultBatchingStrategy \x3d _dereq_("./ReactDefaultBatchingStrategy");\nvar ReactDOM \x3d _dereq_("./ReactDOM");\nvar ReactDOMButton \x3d _dereq_("./ReactDOMButton");\nvar ReactDOMForm \x3d _dereq_("./ReactDOMForm");\nvar ReactDOMImg \x3d _dereq_("./ReactDOMImg");\nvar ReactDOMInput \x3d _dereq_("./ReactDOMInput");\nvar ReactDOMOption \x3d _dereq_("./ReactDOMOption");\nvar ReactDOMSelect \x3d _dereq_("./ReactDOMSelect");\nvar ReactDOMTextarea \x3d _dereq_("./ReactDOMTextarea");\nvar ReactEventListener \x3d _dereq_("./ReactEventListener");\nvar ReactInjection \x3d _dereq_("./ReactInjection");\nvar ReactInstanceHandles \x3d _dereq_("./ReactInstanceHandles");\nvar ReactMount \x3d _dereq_("./ReactMount");\nvar SelectEventPlugin \x3d _dereq_("./SelectEventPlugin");\nvar ServerReactRootIndex \x3d _dereq_("./ServerReactRootIndex");\nvar SimpleEventPlugin \x3d _dereq_("./SimpleEventPlugin");\nvar SVGDOMPropertyConfig \x3d _dereq_("./SVGDOMPropertyConfig");\n\nvar createFullPageComponent \x3d _dereq_("./createFullPageComponent");\n\nfunction inject() {\n  ReactInjection.EventEmitter.injectReactEventListener(\n    ReactEventListener\n  );\n\n  /**\n   * Inject modules for resolving DOM hierarchy and plugin ordering.\n   */\n  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);\n  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);\n  ReactInjection.EventPluginHub.injectMount(ReactMount);\n\n  /**\n   * Some important event plugins included by default (without having to require\n   * them).\n   */\n  ReactInjection.EventPluginHub.injectEventPluginsByName({\n    SimpleEventPlugin: SimpleEventPlugin,\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,\n    ChangeEventPlugin: ChangeEventPlugin,\n    CompositionEventPlugin: CompositionEventPlugin,\n    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,\n    SelectEventPlugin: SelectEventPlugin,\n    BeforeInputEventPlugin: BeforeInputEventPlugin\n  });\n\n  ReactInjection.DOM.injectComponentClasses({\n    button: ReactDOMButton,\n    form: ReactDOMForm,\n    img: ReactDOMImg,\n    input: ReactDOMInput,\n    option: ReactDOMOption,\n    select: ReactDOMSelect,\n    textarea: ReactDOMTextarea,\n\n    html: createFullPageComponent(ReactDOM.html),\n    head: createFullPageComponent(ReactDOM.head),\n    body: createFullPageComponent(ReactDOM.body)\n  });\n\n  // This needs to happen after createFullPageComponent() otherwise the mixin\n  // gets double injected.\n  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);\n\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);\n\n  ReactInjection.EmptyComponent.injectEmptyComponent(ReactDOM.noscript);\n\n  ReactInjection.Updates.injectReconcileTransaction(\n    ReactComponentBrowserEnvironment.ReactReconcileTransaction\n  );\n  ReactInjection.Updates.injectBatchingStrategy(\n    ReactDefaultBatchingStrategy\n  );\n\n  ReactInjection.RootIndex.injectCreateReactRootIndex(\n    ExecutionEnvironment.canUseDOM ?\n      ClientReactRootIndex.createReactRootIndex :\n      ServerReactRootIndex.createReactRootIndex\n  );\n\n  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);\n\n  if ("production" !\x3d\x3d "development") {\n    var url \x3d (ExecutionEnvironment.canUseDOM \x26\x26 window.location.href) || \'\';\n    if ((/[?\x26]react_perf\\b/).test(url)) {\n      var ReactDefaultPerf \x3d _dereq_("./ReactDefaultPerf");\n      ReactDefaultPerf.start();\n    }\n  }\n}\n\nmodule.exports \x3d {\n  inject: inject\n};\n\n},{"./BeforeInputEventPlugin":2,"./ChangeEventPlugin":6,"./ClientReactRootIndex":7,"./CompositionEventPlugin":8,"./DefaultEventPluginOrder":13,"./EnterLeaveEventPlugin":14,"./ExecutionEnvironment":21,"./HTMLDOMPropertyConfig":22,"./MobileSafariClickEventPlugin":25,"./ReactBrowserComponentMixin":28,"./ReactComponentBrowserEnvironment":32,"./ReactDOM":36,"./ReactDOMButton":37,"./ReactDOMForm":39,"./ReactDOMImg":41,"./ReactDOMInput":42,"./ReactDOMOption":43,"./ReactDOMSelect":44,"./ReactDOMTextarea":46,"./ReactDefaultBatchingStrategy":47,"./ReactDefaultPerf":49,"./ReactEventListener":56,"./ReactInjection":57,"./ReactInstanceHandles":59,"./ReactMount":61,"./SVGDOMPropertyConfig":77,"./SelectEventPlugin":78,"./ServerReactRootIndex":79,"./SimpleEventPlugin":80,"./createFullPageComponent":99}],49:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n"use strict";\n\nvar DOMProperty \x3d _dereq_("./DOMProperty");\nvar ReactDefaultPerfAnalysis \x3d _dereq_("./ReactDefaultPerfAnalysis");\nvar ReactMount \x3d _dereq_("./ReactMount");\nvar ReactPerf \x3d _dereq_("./ReactPerf");\n\nvar performanceNow \x3d _dereq_("./performanceNow");\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] \x3d (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf \x3d {\n  _allMeasurements: [], // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n\n  start: function() {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length \x3d 0;\n    ReactPerf.enableMeasure \x3d true;\n  },\n\n  stop: function() {\n    ReactPerf.enableMeasure \x3d false;\n  },\n\n  getLastMeasurements: function() {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function(measurements) {\n    measurements \x3d measurements || ReactDefaultPerf._allMeasurements;\n    var summary \x3d ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        \'Component class name\': item.componentName,\n        \'Total inclusive time (ms)\': roundFloat(item.inclusive),\n        \'Exclusive mount time (ms)\': roundFloat(item.exclusive),\n        \'Exclusive render time (ms)\': roundFloat(item.render),\n        \'Mount time per instance (ms)\': roundFloat(item.exclusive / item.count),\n        \'Render time per instance (ms)\': roundFloat(item.render / item.count),\n        \'Instances\': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n\n  printInclusive: function(measurements) {\n    measurements \x3d measurements || ReactDefaultPerf._allMeasurements;\n    var summary \x3d ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        \'Owner \x3e component\': item.componentName,\n        \'Inclusive time (ms)\': roundFloat(item.time),\n        \'Instances\': item.count\n      };\n    }));\n    console.log(\n      \'Total time:\',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + \' ms\'\n    );\n  },\n\n  printWasted: function(measurements) {\n    measurements \x3d measurements || ReactDefaultPerf._allMeasurements;\n    var summary \x3d ReactDefaultPerfAnalysis.getInclusiveSummary(\n      measurements,\n      true\n    );\n    console.table(summary.map(function(item) {\n      return {\n        \'Owner \x3e component\': item.componentName,\n        \'Wasted time (ms)\': item.time,\n        \'Instances\': item.count\n      };\n    }));\n    console.log(\n      \'Total time:\',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + \' ms\'\n    );\n  },\n\n  printDOM: function(measurements) {\n    measurements \x3d measurements || ReactDefaultPerf._allMeasurements;\n    var summary \x3d ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function(item) {\n      var result \x3d {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] \x3d item.id;\n      result[\'type\'] \x3d item.type;\n      result[\'args\'] \x3d JSON.stringify(item.args);\n      return result;\n    }));\n    console.log(\n      \'Total time:\',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + \' ms\'\n    );\n  },\n\n  _recordWrite: function(id, fnName, totalTime, args) {\n    // TODO: totalTime isn\'t that useful since it doesn\'t count paints/reflows\n    var writes \x3d\n      ReactDefaultPerf\n        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]\n        .writes;\n    writes[id] \x3d writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function(moduleName, fnName, func) {\n    return function() {var args\x3dArray.prototype.slice.call(arguments,0);\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName \x3d\x3d\x3d \'_renderNewRootComponent\' ||\n          fnName \x3d\x3d\x3d \'flushBatchedUpdates\') {\n        // A "measurement" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of "wasted work" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n        start \x3d performanceNow();\n        rv \x3d func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ].totalTime \x3d performanceNow() - start;\n        return rv;\n      } else if (moduleName \x3d\x3d\x3d \'ReactDOMIDOperations\' ||\n        moduleName \x3d\x3d\x3d \'ReactComponentBrowserEnvironment\') {\n        start \x3d performanceNow();\n        rv \x3d func.apply(this, args);\n        totalTime \x3d performanceNow() - start;\n\n        if (fnName \x3d\x3d\x3d \'mountImageIntoNode\') {\n          var mountID \x3d ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName \x3d\x3d\x3d \'dangerouslyProcessChildrenUpdates\') {\n          // special format\n          args[0].forEach(function(update) {\n            var writeArgs \x3d {};\n            if (update.fromIndex !\x3d\x3d null) {\n              writeArgs.fromIndex \x3d update.fromIndex;\n            }\n            if (update.toIndex !\x3d\x3d null) {\n              writeArgs.toIndex \x3d update.toIndex;\n            }\n            if (update.textContent !\x3d\x3d null) {\n              writeArgs.textContent \x3d update.textContent;\n            }\n            if (update.markupIndex !\x3d\x3d null) {\n              writeArgs.markup \x3d args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(\n              update.parentID,\n              update.type,\n              totalTime,\n              writeArgs\n            );\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(\n            args[0],\n            fnName,\n            totalTime,\n            Array.prototype.slice.call(args, 1)\n          );\n        }\n        return rv;\n      } else if (moduleName \x3d\x3d\x3d \'ReactCompositeComponent\' \x26\x26 (\n        fnName \x3d\x3d\x3d \'mountComponent\' ||\n        fnName \x3d\x3d\x3d \'updateComponent\' || // TODO: receiveComponent()?\n        fnName \x3d\x3d\x3d \'_renderValidatedComponent\')) {\n\n        var rootNodeID \x3d fnName \x3d\x3d\x3d \'mountComponent\' ?\n          args[0] :\n          this._rootNodeID;\n        var isRender \x3d fnName \x3d\x3d\x3d \'_renderValidatedComponent\';\n        var isMount \x3d fnName \x3d\x3d\x3d \'mountComponent\';\n\n        var mountStack \x3d ReactDefaultPerf._mountStack;\n        var entry \x3d ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          mountStack.push(0);\n        }\n\n        start \x3d performanceNow();\n        rv \x3d func.apply(this, args);\n        totalTime \x3d performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime \x3d mountStack.pop();\n          mountStack[mountStack.length - 1] +\x3d totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] \x3d {\n          current: this.constructor.displayName,\n          owner: this._owner ? this._owner.constructor.displayName : \'\x3croot\x3e\'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports \x3d ReactDefaultPerf;\n\n},{"./DOMProperty":10,"./ReactDefaultPerfAnalysis":50,"./ReactMount":61,"./ReactPerf":65,"./performanceNow":137}],50:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\n\nvar merge \x3d _dereq_("./merge");\n\n// Don\'t try to save users less than 1.2ms (a number I made up)\nvar DONT_CARE_THRESHOLD \x3d 1.2;\nvar DOM_OPERATION_TYPES \x3d {\n  \'mountImageIntoNode\': \'set innerHTML\',\n  INSERT_MARKUP: \'set innerHTML\',\n  MOVE_EXISTING: \'move\',\n  REMOVE_NODE: \'remove\',\n  TEXT_CONTENT: \'set textContent\',\n  \'updatePropertyByID\': \'update attribute\',\n  \'deletePropertyByID\': \'delete attribute\',\n  \'updateStylesByID\': \'update styles\',\n  \'updateInnerHTMLByID\': \'set innerHTML\',\n  \'dangerouslyReplaceNodeWithMarkupByID\': \'replace\'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime \x3d 0;\n  for (var i \x3d 0; i \x3c measurements.length; i++) {\n    var measurement \x3d measurements[i];\n    totalTime +\x3d measurement.totalTime;\n  }\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items \x3d [];\n  for (var i \x3d 0; i \x3c measurements.length; i++) {\n    var measurement \x3d measurements[i];\n    var id;\n\n    for (id in measurement.writes) {\n      measurement.writes[id].forEach(function(write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    }\n  }\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates \x3d {};\n  var displayName;\n\n  for (var i \x3d 0; i \x3c measurements.length; i++) {\n    var measurement \x3d measurements[i];\n    var allIDs \x3d merge(measurement.exclusive, measurement.inclusive);\n\n    for (var id in allIDs) {\n      displayName \x3d measurement.displayNames[id].current;\n\n      candidates[displayName] \x3d candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n      if (measurement.render[id]) {\n        candidates[displayName].render +\x3d measurement.render[id];\n      }\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive +\x3d measurement.exclusive[id];\n      }\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive +\x3d measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[displayName].count +\x3d measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr \x3d [];\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive \x3e\x3d DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function(a, b) {\n    return b.exclusive - a.exclusive;\n  });\n\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates \x3d {};\n  var inclusiveKey;\n\n  for (var i \x3d 0; i \x3c measurements.length; i++) {\n    var measurement \x3d measurements[i];\n    var allIDs \x3d merge(measurement.exclusive, measurement.inclusive);\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents \x3d getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean \x26\x26 !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName \x3d measurement.displayNames[id];\n\n      // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n      inclusiveKey \x3d displayName.owner + \' \x3e \' + displayName.current;\n\n      candidates[inclusiveKey] \x3d candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time +\x3d measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count +\x3d measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr \x3d [];\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time \x3e\x3d DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function(a, b) {\n    return b.time - a.time;\n  });\n\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents \x3d {};\n  var dirtyLeafIDs \x3d Object.keys(measurement.writes);\n  var allIDs \x3d merge(measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty \x3d false;\n    // For each component that rendered, see if a component that triggerd\n    // a DOM op is in its subtree.\n    for (var i \x3d 0; i \x3c dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) \x3d\x3d\x3d 0) {\n        isDirty \x3d true;\n        break;\n      }\n    }\n    if (!isDirty \x26\x26 measurement.counts[id] \x3e 0) {\n      cleanComponents[id] \x3d true;\n    }\n  }\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis \x3d {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\n\nmodule.exports \x3d ReactDefaultPerfAnalysis;\n\n},{"./merge":130}],51:[function(_dereq_,module,exports){\n/**\n * Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDescriptor\n */\n\n"use strict";\n\nvar ReactContext \x3d _dereq_("./ReactContext");\nvar ReactCurrentOwner \x3d _dereq_("./ReactCurrentOwner");\n\nvar merge \x3d _dereq_("./merge");\nvar warning \x3d _dereq_("./warning");\n\n/**\n * Warn for mutations.\n *\n * @internal\n * @param {object} object\n * @param {string} key\n */\nfunction defineWarningProperty(object, key) {\n  Object.defineProperty(object, key, {\n\n    configurable: false,\n    enumerable: true,\n\n    get: function() {\n      if (!this._store) {\n        return null;\n      }\n      return this._store[key];\n    },\n\n    set: function(value) {\n      ("production" !\x3d\x3d "development" ? warning(\n        false,\n        \'Don\\\'t set the \' + key + \' property of the component. \' +\n        \'Mutate the existing props object instead.\'\n      ) : null);\n      this._store[key] \x3d value;\n    }\n\n  });\n}\n\n/**\n * This is updated to true if the membrane is successfully created.\n */\nvar useMutationMembrane \x3d false;\n\n/**\n * Warn for mutations.\n *\n * @internal\n * @param {object} descriptor\n */\nfunction defineMutationMembrane(prototype) {\n  try {\n    var pseudoFrozenProperties \x3d {\n      props: true\n    };\n    for (var key in pseudoFrozenProperties) {\n      defineWarningProperty(prototype, key);\n    }\n    useMutationMembrane \x3d true;\n  } catch (x) {\n    // IE will fail on defineProperty\n  }\n}\n\n/**\n * Transfer static properties from the source to the target. Functions are\n * rebound to have this reflect the original source.\n */\nfunction proxyStaticMethods(target, source) {\n  if (typeof source !\x3d\x3d \'function\') {\n    return;\n  }\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      var value \x3d source[key];\n      if (typeof value \x3d\x3d\x3d \'function\') {\n        var bound \x3d value.bind(source);\n        // Copy any properties defined on the function, such as `isRequired` on\n        // a PropTypes validator. (mergeInto refuses to work on functions.)\n        for (var k in value) {\n          if (value.hasOwnProperty(k)) {\n            bound[k] \x3d value[k];\n          }\n        }\n        target[key] \x3d bound;\n      } else {\n        target[key] \x3d value;\n      }\n    }\n  }\n}\n\n/**\n * Base constructor for all React descriptors. This is only used to make this\n * work with a dynamic instanceof check. Nothing should live on this prototype.\n *\n * @param {*} type\n * @internal\n */\nvar ReactDescriptor \x3d function() {};\n\nif ("production" !\x3d\x3d "development") {\n  defineMutationMembrane(ReactDescriptor.prototype);\n}\n\nReactDescriptor.createFactory \x3d function(type) {\n\n  var descriptorPrototype \x3d Object.create(ReactDescriptor.prototype);\n\n  var factory \x3d function(props, children) {\n    // For consistency we currently allocate a new object for every descriptor.\n    // This protects the descriptor from being mutated by the original props\n    // object being mutated. It also protects the original props object from\n    // being mutated by children arguments and default props. This behavior\n    // comes with a performance cost and could be deprecated in the future.\n    // It could also be optimized with a smarter JSX transform.\n    if (props \x3d\x3d null) {\n      props \x3d {};\n    } else if (typeof props \x3d\x3d\x3d \'object\') {\n      props \x3d merge(props);\n    }\n\n    // Children can be more than one argument, and those are transferred onto\n    // the newly allocated props object.\n    var childrenLength \x3d arguments.length - 1;\n    if (childrenLength \x3d\x3d\x3d 1) {\n      props.children \x3d children;\n    } else if (childrenLength \x3e 1) {\n      var childArray \x3d Array(childrenLength);\n      for (var i \x3d 0; i \x3c childrenLength; i++) {\n        childArray[i] \x3d arguments[i + 1];\n      }\n      props.children \x3d childArray;\n    }\n\n    // Initialize the descriptor object\n    var descriptor \x3d Object.create(descriptorPrototype);\n\n    // Record the component responsible for creating this descriptor.\n    descriptor._owner \x3d ReactCurrentOwner.current;\n\n    // TODO: Deprecate withContext, and then the context becomes accessible\n    // through the owner.\n    descriptor._context \x3d ReactContext.current;\n\n    if ("production" !\x3d\x3d "development") {\n      // The validation flag and props are currently mutative. We put them on\n      // an external backing store so that we can freeze the whole object.\n      // This can be replaced with a WeakMap once they are implemented in\n      // commonly used development environments.\n      descriptor._store \x3d { validated: false, props: props };\n\n      // We\'re not allowed to set props directly on the object so we early\n      // return and rely on the prototype membrane to forward to the backing\n      // store.\n      if (useMutationMembrane) {\n        Object.freeze(descriptor);\n        return descriptor;\n      }\n    }\n\n    descriptor.props \x3d props;\n    return descriptor;\n  };\n\n  // Currently we expose the prototype of the descriptor so that\n  // \x3cFoo /\x3e instanceof Foo works. This is controversial pattern.\n  factory.prototype \x3d descriptorPrototype;\n\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on descriptors. E.g. \x3cFoo /\x3e.type \x3d\x3d\x3d Foo.type and for\n  // static methods like \x3cFoo /\x3e.type.staticMethod();\n  // This should not be named constructor since this may not be the function\n  // that created the descriptor, and it may not even be a constructor.\n  factory.type \x3d type;\n  descriptorPrototype.type \x3d type;\n\n  proxyStaticMethods(factory, type);\n\n  // Expose a unique constructor on the prototype is that this works with type\n  // systems that compare constructor properties: \x3cFoo /\x3e.constructor \x3d\x3d\x3d Foo\n  // This may be controversial since it requires a known factory function.\n  descriptorPrototype.constructor \x3d factory;\n\n  return factory;\n\n};\n\nReactDescriptor.cloneAndReplaceProps \x3d function(oldDescriptor, newProps) {\n  var newDescriptor \x3d Object.create(oldDescriptor.constructor.prototype);\n  // It\'s important that this property order matches the hidden class of the\n  // original descriptor to maintain perf.\n  newDescriptor._owner \x3d oldDescriptor._owner;\n  newDescriptor._context \x3d oldDescriptor._context;\n\n  if ("production" !\x3d\x3d "development") {\n    newDescriptor._store \x3d {\n      validated: oldDescriptor._store.validated,\n      props: newProps\n    };\n    if (useMutationMembrane) {\n      Object.freeze(newDescriptor);\n      return newDescriptor;\n    }\n  }\n\n  newDescriptor.props \x3d newProps;\n  return newDescriptor;\n};\n\n/**\n * Checks if a value is a valid descriptor constructor.\n *\n * @param {*}\n * @return {boolean}\n * @public\n */\nReactDescriptor.isValidFactory \x3d function(factory) {\n  return typeof factory \x3d\x3d\x3d \'function\' \x26\x26\n         factory.prototype instanceof ReactDescriptor;\n};\n\n/**\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nReactDescriptor.isValidDescriptor \x3d function(object) {\n  return object instanceof ReactDescriptor;\n};\n\nmodule.exports \x3d ReactDescriptor;\n\n},{"./ReactContext":34,"./ReactCurrentOwner":35,"./merge":130,"./warning":143}],52:[function(_dereq_,module,exports){\n/**\n * Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDescriptorValidator\n */\n\n/**\n * ReactDescriptorValidator provides a wrapper around a descriptor factory\n * which validates the props passed to the descriptor. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\n"use strict";\n\nvar ReactDescriptor \x3d _dereq_("./ReactDescriptor");\nvar ReactPropTypeLocations \x3d _dereq_("./ReactPropTypeLocations");\nvar ReactCurrentOwner \x3d _dereq_("./ReactCurrentOwner");\n\nvar monitorCodeUse \x3d _dereq_("./monitorCodeUse");\n\n/**\n * Warn if there\'s no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning \x3d {\n  \'react_key_warning\': {},\n  \'react_numeric_key_warning\': {}\n};\nvar ownerHasMonitoredObjectMap \x3d {};\n\nvar loggedTypeFailures \x3d {};\n\nvar NUMERIC_PROPERTY_REGEX \x3d /^\\d+$/;\n\n/**\n * Gets the current owner\'s displayName for use in warnings.\n *\n * @internal\n * @return {?string} Display name or undefined\n */\nfunction getCurrentOwnerDisplayName() {\n  var current \x3d ReactCurrentOwner.current;\n  return current \x26\x26 current.constructor.displayName || undefined;\n}\n\n/**\n * Warn if the component doesn\'t have an explicit key assigned to it.\n * This component is in an array. The array could grow and shrink or be\n * reordered. All children that haven\'t already been validated are required to\n * have a "key" property assigned to it.\n *\n * @internal\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component\'s parent\'s type.\n */\nfunction validateExplicitKey(component, parentType) {\n  if (component._store.validated || component.props.key !\x3d null) {\n    return;\n  }\n  component._store.validated \x3d true;\n\n  warnAndMonitorForKeyUse(\n    \'react_key_warning\',\n    \'Each child in an array should have a unique "key" prop.\',\n    component,\n    parentType\n  );\n}\n\n/**\n * Warn if the key is being defined as an object property but has an incorrect\n * value.\n *\n * @internal\n * @param {string} name Property name of the key.\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component\'s parent\'s type.\n */\nfunction validatePropertyKey(name, component, parentType) {\n  if (!NUMERIC_PROPERTY_REGEX.test(name)) {\n    return;\n  }\n  warnAndMonitorForKeyUse(\n    \'react_numeric_key_warning\',\n    \'Child objects should have non-numeric keys so ordering is preserved.\',\n    component,\n    parentType\n  );\n}\n\n/**\n * Shared warning and monitoring code for the key warnings.\n *\n * @internal\n * @param {string} warningID The id used when logging.\n * @param {string} message The base warning that gets output.\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component\'s parent\'s type.\n */\nfunction warnAndMonitorForKeyUse(warningID, message, component, parentType) {\n  var ownerName \x3d getCurrentOwnerDisplayName();\n  var parentName \x3d parentType.displayName;\n\n  var useName \x3d ownerName || parentName;\n  var memoizer \x3d ownerHasKeyUseWarning[warningID];\n  if (memoizer.hasOwnProperty(useName)) {\n    return;\n  }\n  memoizer[useName] \x3d true;\n\n  message +\x3d ownerName ?\n    (" Check the render method of " + ownerName + ".") :\n    (" Check the renderComponent call using \x3c" + parentName + "\x3e.");\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that\'s responsible for\n  // assigning it a key.\n  var childOwnerName \x3d null;\n  if (component._owner \x26\x26 component._owner !\x3d\x3d ReactCurrentOwner.current) {\n    // Name of the component that originally created this child.\n    childOwnerName \x3d component._owner.constructor.displayName;\n\n    message +\x3d (" It was passed a child from " + childOwnerName + ".");\n  }\n\n  message +\x3d \' See http://fb.me/react-warning-keys for more information.\';\n  monitorCodeUse(warningID, {\n    component: useName,\n    componentOwner: childOwnerName\n  });\n  console.warn(message);\n}\n\n/**\n * Log that we\'re using an object map. We\'re considering deprecating this\n * feature and replace it with proper Map and ImmutableMap data structures.\n *\n * @internal\n */\nfunction monitorUseOfObjectMap() {\n  var currentName \x3d getCurrentOwnerDisplayName() || \'\';\n  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {\n    return;\n  }\n  ownerHasMonitoredObjectMap[currentName] \x3d true;\n  monitorCodeUse(\'react_object_map_children\');\n}\n\n/**\n * Ensure that every component either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {*} component Statically passed child of any type.\n * @param {*} parentType component\'s parent\'s type.\n * @return {boolean}\n */\nfunction validateChildKeys(component, parentType) {\n  if (Array.isArray(component)) {\n    for (var i \x3d 0; i \x3c component.length; i++) {\n      var child \x3d component[i];\n      if (ReactDescriptor.isValidDescriptor(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactDescriptor.isValidDescriptor(component)) {\n    // This component was passed in a valid location.\n    component._store.validated \x3d true;\n  } else if (component \x26\x26 typeof component \x3d\x3d\x3d \'object\') {\n    monitorUseOfObjectMap();\n    for (var name in component) {\n      validatePropertyKey(name, component[name], parentType);\n    }\n  }\n}\n\n/**\n * Assert that the props are valid\n *\n * @param {string} componentName Name of the component for error messages.\n * @param {object} propTypes Map of prop name to a ReactPropType\n * @param {object} props\n * @param {string} location e.g. "prop", "context", "child context"\n * @private\n */\nfunction checkPropTypes(componentName, propTypes, props, location) {\n  for (var propName in propTypes) {\n    if (propTypes.hasOwnProperty(propName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don\'t want to\n      // fail the render phase where it didn\'t fail before. So we log it.\n      // After these have been cleaned up, we\'ll let them throw.\n      try {\n        error \x3d propTypes[propName](props, propName, componentName, location);\n      } catch (ex) {\n        error \x3d ex;\n      }\n      if (error instanceof Error \x26\x26 !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] \x3d true;\n        // This will soon use the warning module\n        monitorCodeUse(\n          \'react_failed_descriptor_type_check\',\n          { message: error.message }\n        );\n      }\n    }\n  }\n}\n\nvar ReactDescriptorValidator \x3d {\n\n  /**\n   * Wraps a descriptor factory function in another function which validates\n   * the props and context of the descriptor and warns about any failed type\n   * checks.\n   *\n   * @param {function} factory The original descriptor factory\n   * @param {object?} propTypes A prop type definition set\n   * @param {object?} contextTypes A context type definition set\n   * @return {object} The component descriptor, which may be invalid.\n   * @private\n   */\n  createFactory: function(factory, propTypes, contextTypes) {\n    var validatedFactory \x3d function(props, children) {\n      var descriptor \x3d factory.apply(this, arguments);\n\n      for (var i \x3d 1; i \x3c arguments.length; i++) {\n        validateChildKeys(arguments[i], descriptor.type);\n      }\n\n      var name \x3d descriptor.type.displayName;\n      if (propTypes) {\n        checkPropTypes(\n          name,\n          propTypes,\n          descriptor.props,\n          ReactPropTypeLocations.prop\n        );\n      }\n      if (contextTypes) {\n        checkPropTypes(\n          name,\n          contextTypes,\n          descriptor._context,\n          ReactPropTypeLocations.context\n        );\n      }\n      return descriptor;\n    };\n\n    validatedFactory.prototype \x3d factory.prototype;\n    validatedFactory.type \x3d factory.type;\n\n    // Copy static properties\n    for (var key in factory) {\n      if (factory.hasOwnProperty(key)) {\n        validatedFactory[key] \x3d factory[key];\n      }\n    }\n\n    return validatedFactory;\n  }\n\n};\n\nmodule.exports \x3d ReactDescriptorValidator;\n\n},{"./ReactCurrentOwner":35,"./ReactDescriptor":51,"./ReactPropTypeLocations":68,"./monitorCodeUse":134}],53:[function(_dereq_,module,exports){\n/**\n * Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactEmptyComponent\n */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\n\nvar component;\n// This registry keeps track of the React IDs of the components that rendered to\n// `null` (in reality a placeholder such as `noscript`)\nvar nullComponentIdsRegistry \x3d {};\n\nvar ReactEmptyComponentInjection \x3d {\n  injectEmptyComponent: function(emptyComponent) {\n    component \x3d emptyComponent;\n  }\n};\n\n/**\n * @return {ReactComponent} component The injected empty component.\n */\nfunction getEmptyComponent() {\n  ("production" !\x3d\x3d "development" ? invariant(\n    component,\n    \'Trying to return null from a render, but no null placeholder component \' +\n    \'was injected.\'\n  ) : invariant(component));\n  return component();\n}\n\n/**\n * Mark the component as having rendered to null.\n * @param {string} id Component\'s `_rootNodeID`.\n */\nfunction registerNullComponentID(id) {\n  nullComponentIdsRegistry[id] \x3d true;\n}\n\n/**\n * Unmark the component as having rendered to null: it renders to something now.\n * @param {string} id Component\'s `_rootNodeID`.\n */\nfunction deregisterNullComponentID(id) {\n  delete nullComponentIdsRegistry[id];\n}\n\n/**\n * @param {string} id Component\'s `_rootNodeID`.\n * @return {boolean} True if the component is rendered to null.\n */\nfunction isNullComponentID(id) {\n  return nullComponentIdsRegistry[id];\n}\n\nvar ReactEmptyComponent \x3d {\n  deregisterNullComponentID: deregisterNullComponentID,\n  getEmptyComponent: getEmptyComponent,\n  injection: ReactEmptyComponentInjection,\n  isNullComponentID: isNullComponentID,\n  registerNullComponentID: registerNullComponentID\n};\n\nmodule.exports \x3d ReactEmptyComponent;\n\n},{"./invariant":120}],54:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactErrorUtils\n * @typechecks\n */\n\n"use strict";\n\nvar ReactErrorUtils \x3d {\n  /**\n   * Creates a guarded version of a function. This is supposed to make debugging\n   * of event handlers easier. To aid debugging with the browser\'s debugger,\n   * this currently simply returns the original function.\n   *\n   * @param {function} func Function to be executed\n   * @param {string} name The name of the guard\n   * @return {function}\n   */\n  guard: function(func, name) {\n    return func;\n  }\n};\n\nmodule.exports \x3d ReactErrorUtils;\n\n},{}],55:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactEventEmitterMixin\n */\n\n"use strict";\n\nvar EventPluginHub \x3d _dereq_("./EventPluginHub");\n\nfunction runEventQueueInBatch(events) {\n  EventPluginHub.enqueueEvents(events);\n  EventPluginHub.processEventQueue();\n}\n\nvar ReactEventEmitterMixin \x3d {\n\n  /**\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the\n   * opportunity to create `ReactEvent`s to be dispatched.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {object} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native environment event.\n   */\n  handleTopLevel: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var events \x3d EventPluginHub.extractEvents(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent\n    );\n\n    runEventQueueInBatch(events);\n  }\n};\n\nmodule.exports \x3d ReactEventEmitterMixin;\n\n},{"./EventPluginHub":17}],56:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactEventListener\n * @typechecks static-only\n */\n\n"use strict";\n\nvar EventListener \x3d _dereq_("./EventListener");\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\nvar PooledClass \x3d _dereq_("./PooledClass");\nvar ReactInstanceHandles \x3d _dereq_("./ReactInstanceHandles");\nvar ReactMount \x3d _dereq_("./ReactMount");\nvar ReactUpdates \x3d _dereq_("./ReactUpdates");\n\nvar getEventTarget \x3d _dereq_("./getEventTarget");\nvar getUnboundedScrollPosition \x3d _dereq_("./getUnboundedScrollPosition");\nvar mixInto \x3d _dereq_("./mixInto");\n\n/**\n * Finds the parent React component of `node`.\n *\n * @param {*} node\n * @return {?DOMEventTarget} Parent container, or `null` if the specified node\n *                           is not nested.\n */\nfunction findParent(node) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  var nodeID \x3d ReactMount.getID(node);\n  var rootID \x3d ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);\n  var container \x3d ReactMount.findReactContainerForID(rootID);\n  var parent \x3d ReactMount.getFirstReactDOM(container);\n  return parent;\n}\n\n// Used to store ancestor hierarchy in top level callback\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {\n  this.topLevelType \x3d topLevelType;\n  this.nativeEvent \x3d nativeEvent;\n  this.ancestors \x3d [];\n}\nmixInto(TopLevelCallbackBookKeeping, {\n  destructor: function() {\n    this.topLevelType \x3d null;\n    this.nativeEvent \x3d null;\n    this.ancestors.length \x3d 0;\n  }\n});\nPooledClass.addPoolingTo(\n  TopLevelCallbackBookKeeping,\n  PooledClass.twoArgumentPooler\n);\n\nfunction handleTopLevelImpl(bookKeeping) {\n  var topLevelTarget \x3d ReactMount.getFirstReactDOM(\n    getEventTarget(bookKeeping.nativeEvent)\n  ) || window;\n\n  // Loop through the hierarchy, in case there\'s any nested components.\n  // It\'s important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount\'s node cache. See #1105.\n  var ancestor \x3d topLevelTarget;\n  while (ancestor) {\n    bookKeeping.ancestors.push(ancestor);\n    ancestor \x3d findParent(ancestor);\n  }\n\n  for (var i \x3d 0, l \x3d bookKeeping.ancestors.length; i \x3c l; i++) {\n    topLevelTarget \x3d bookKeeping.ancestors[i];\n    var topLevelTargetID \x3d ReactMount.getID(topLevelTarget) || \'\';\n    ReactEventListener._handleTopLevel(\n      bookKeeping.topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      bookKeeping.nativeEvent\n    );\n  }\n}\n\nfunction scrollValueMonitor(cb) {\n  var scrollPosition \x3d getUnboundedScrollPosition(window);\n  cb(scrollPosition);\n}\n\nvar ReactEventListener \x3d {\n  _enabled: true,\n  _handleTopLevel: null,\n\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,\n\n  setHandleTopLevel: function(handleTopLevel) {\n    ReactEventListener._handleTopLevel \x3d handleTopLevel;\n  },\n\n  setEnabled: function(enabled) {\n    ReactEventListener._enabled \x3d !!enabled;\n  },\n\n  isEnabled: function() {\n    return ReactEventListener._enabled;\n  },\n\n\n  /**\n   * Traps top-level events by using event bubbling.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. "click").\n   * @param {object} handle Element on which to attach listener.\n   * @return {object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {\n    var element \x3d handle;\n    if (!element) {\n      return;\n    }\n    return EventListener.listen(\n      element,\n      handlerBaseName,\n      ReactEventListener.dispatchEvent.bind(null, topLevelType)\n    );\n  },\n\n  /**\n   * Traps a top-level event by using event capturing.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. "click").\n   * @param {object} handle Element on which to attach listener.\n   * @return {object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {\n    var element \x3d handle;\n    if (!element) {\n      return;\n    }\n    return EventListener.capture(\n      element,\n      handlerBaseName,\n      ReactEventListener.dispatchEvent.bind(null, topLevelType)\n    );\n  },\n\n  monitorScrollValue: function(refresh) {\n    var callback \x3d scrollValueMonitor.bind(null, refresh);\n    EventListener.listen(window, \'scroll\', callback);\n    EventListener.listen(window, \'resize\', callback);\n  },\n\n  dispatchEvent: function(topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n\n    var bookKeeping \x3d TopLevelCallbackBookKeeping.getPooled(\n      topLevelType,\n      nativeEvent\n    );\n    try {\n      // Event queue being processed in the same cycle allows\n      // `preventDefault`.\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n    } finally {\n      TopLevelCallbackBookKeeping.release(bookKeeping);\n    }\n  }\n};\n\nmodule.exports \x3d ReactEventListener;\n\n},{"./EventListener":16,"./ExecutionEnvironment":21,"./PooledClass":26,"./ReactInstanceHandles":59,"./ReactMount":61,"./ReactUpdates":76,"./getEventTarget":111,"./getUnboundedScrollPosition":116,"./mixInto":133}],57:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactInjection\n */\n\n"use strict";\n\nvar DOMProperty \x3d _dereq_("./DOMProperty");\nvar EventPluginHub \x3d _dereq_("./EventPluginHub");\nvar ReactComponent \x3d _dereq_("./ReactComponent");\nvar ReactCompositeComponent \x3d _dereq_("./ReactCompositeComponent");\nvar ReactDOM \x3d _dereq_("./ReactDOM");\nvar ReactEmptyComponent \x3d _dereq_("./ReactEmptyComponent");\nvar ReactBrowserEventEmitter \x3d _dereq_("./ReactBrowserEventEmitter");\nvar ReactPerf \x3d _dereq_("./ReactPerf");\nvar ReactRootIndex \x3d _dereq_("./ReactRootIndex");\nvar ReactUpdates \x3d _dereq_("./ReactUpdates");\n\nvar ReactInjection \x3d {\n  Component: ReactComponent.injection,\n  CompositeComponent: ReactCompositeComponent.injection,\n  DOMProperty: DOMProperty.injection,\n  EmptyComponent: ReactEmptyComponent.injection,\n  EventPluginHub: EventPluginHub.injection,\n  DOM: ReactDOM.injection,\n  EventEmitter: ReactBrowserEventEmitter.injection,\n  Perf: ReactPerf.injection,\n  RootIndex: ReactRootIndex.injection,\n  Updates: ReactUpdates.injection\n};\n\nmodule.exports \x3d ReactInjection;\n\n},{"./DOMProperty":10,"./EventPluginHub":17,"./ReactBrowserEventEmitter":29,"./ReactComponent":31,"./ReactCompositeComponent":33,"./ReactDOM":36,"./ReactEmptyComponent":53,"./ReactPerf":65,"./ReactRootIndex":72,"./ReactUpdates":76}],58:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactInputSelection\n */\n\n"use strict";\n\nvar ReactDOMSelection \x3d _dereq_("./ReactDOMSelection");\n\nvar containsNode \x3d _dereq_("./containsNode");\nvar focusNode \x3d _dereq_("./focusNode");\nvar getActiveElement \x3d _dereq_("./getActiveElement");\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn\'t\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection \x3d {\n\n  hasSelectionCapabilities: function(elem) {\n    return elem \x26\x26 (\n      (elem.nodeName \x3d\x3d\x3d \'INPUT\' \x26\x26 elem.type \x3d\x3d\x3d \'text\') ||\n      elem.nodeName \x3d\x3d\x3d \'TEXTAREA\' ||\n      elem.contentEditable \x3d\x3d\x3d \'true\'\n    );\n  },\n\n  getSelectionInformation: function() {\n    var focusedElem \x3d getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange:\n          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?\n          ReactInputSelection.getSelection(focusedElem) :\n          null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function(priorSelectionInformation) {\n    var curFocusedElem \x3d getActiveElement();\n    var priorFocusedElem \x3d priorSelectionInformation.focusedElem;\n    var priorSelectionRange \x3d priorSelectionInformation.selectionRange;\n    if (curFocusedElem !\x3d\x3d priorFocusedElem \x26\x26\n        isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(\n          priorFocusedElem,\n          priorSelectionRange\n        );\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function(input) {\n    var selection;\n\n    if (\'selectionStart\' in input) {\n      // Modern browser with input or textarea.\n      selection \x3d {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection \x26\x26 input.nodeName \x3d\x3d\x3d \'INPUT\') {\n      // IE8 input.\n      var range \x3d document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() \x3d\x3d\x3d input) {\n        selection \x3d {\n          start: -range.moveStart(\'character\', -input.value.length),\n          end: -range.moveEnd(\'character\', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection \x3d ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || {start: 0, end: 0};\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function(input, offsets) {\n    var start \x3d offsets.start;\n    var end \x3d offsets.end;\n    if (typeof end \x3d\x3d\x3d \'undefined\') {\n      end \x3d start;\n    }\n\n    if (\'selectionStart\' in input) {\n      input.selectionStart \x3d start;\n      input.selectionEnd \x3d Math.min(end, input.value.length);\n    } else if (document.selection \x26\x26 input.nodeName \x3d\x3d\x3d \'INPUT\') {\n      var range \x3d input.createTextRange();\n      range.collapse(true);\n      range.moveStart(\'character\', start);\n      range.moveEnd(\'character\', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports \x3d ReactInputSelection;\n\n},{"./ReactDOMSelection":45,"./containsNode":96,"./focusNode":106,"./getActiveElement":108}],59:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactInstanceHandles\n * @typechecks static-only\n */\n\n"use strict";\n\nvar ReactRootIndex \x3d _dereq_("./ReactRootIndex");\n\nvar invariant \x3d _dereq_("./invariant");\n\nvar SEPARATOR \x3d \'.\';\nvar SEPARATOR_LENGTH \x3d SEPARATOR.length;\n\n/**\n * Maximum depth of traversals before we consider the possibility of a bad ID.\n */\nvar MAX_TREE_DEPTH \x3d 100;\n\n/**\n * Creates a DOM ID prefix to use when mounting React components.\n *\n * @param {number} index A unique integer\n * @return {string} React root ID.\n * @internal\n */\nfunction getReactRootIDString(index) {\n  return SEPARATOR + index.toString(36);\n}\n\n/**\n * Checks if a character in the supplied ID is a separator or the end.\n *\n * @param {string} id A React DOM ID.\n * @param {number} index Index of the character to check.\n * @return {boolean} True if the character is a separator or end of the ID.\n * @private\n */\nfunction isBoundary(id, index) {\n  return id.charAt(index) \x3d\x3d\x3d SEPARATOR || index \x3d\x3d\x3d id.length;\n}\n\n/**\n * Checks if the supplied string is a valid React DOM ID.\n *\n * @param {string} id A React DOM ID, maybe.\n * @return {boolean} True if the string is a valid React DOM ID.\n * @private\n */\nfunction isValidID(id) {\n  return id \x3d\x3d\x3d \'\' || (\n    id.charAt(0) \x3d\x3d\x3d SEPARATOR \x26\x26 id.charAt(id.length - 1) !\x3d\x3d SEPARATOR\n  );\n}\n\n/**\n * Checks if the first ID is an ancestor of or equal to the second ID.\n *\n * @param {string} ancestorID\n * @param {string} descendantID\n * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.\n * @internal\n */\nfunction isAncestorIDOf(ancestorID, descendantID) {\n  return (\n    descendantID.indexOf(ancestorID) \x3d\x3d\x3d 0 \x26\x26\n    isBoundary(descendantID, ancestorID.length)\n  );\n}\n\n/**\n * Gets the parent ID of the supplied React DOM ID, `id`.\n *\n * @param {string} id ID of a component.\n * @return {string} ID of the parent, or an empty string.\n * @private\n */\nfunction getParentID(id) {\n  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : \'\';\n}\n\n/**\n * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the\n * supplied `destinationID`. If they are equal, the ID is returned.\n *\n * @param {string} ancestorID ID of an ancestor node of `destinationID`.\n * @param {string} destinationID ID of the destination node.\n * @return {string} Next ID on the path from `ancestorID` to `destinationID`.\n * @private\n */\nfunction getNextDescendantID(ancestorID, destinationID) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    isValidID(ancestorID) \x26\x26 isValidID(destinationID),\n    \'getNextDescendantID(%s, %s): Received an invalid React DOM ID.\',\n    ancestorID,\n    destinationID\n  ) : invariant(isValidID(ancestorID) \x26\x26 isValidID(destinationID)));\n  ("production" !\x3d\x3d "development" ? invariant(\n    isAncestorIDOf(ancestorID, destinationID),\n    \'getNextDescendantID(...): React has made an invalid assumption about \' +\n    \'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.\',\n    ancestorID,\n    destinationID\n  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));\n  if (ancestorID \x3d\x3d\x3d destinationID) {\n    return ancestorID;\n  }\n  // Skip over the ancestor and the immediate separator. Traverse until we hit\n  // another separator or we reach the end of `destinationID`.\n  var start \x3d ancestorID.length + SEPARATOR_LENGTH;\n  for (var i \x3d start; i \x3c destinationID.length; i++) {\n    if (isBoundary(destinationID, i)) {\n      break;\n    }\n  }\n  return destinationID.substr(0, i);\n}\n\n/**\n * Gets the nearest common ancestor ID of two IDs.\n *\n * Using this ID scheme, the nearest common ancestor ID is the longest common\n * prefix of the two IDs that immediately preceded a "marker" in both strings.\n *\n * @param {string} oneID\n * @param {string} twoID\n * @return {string} Nearest common ancestor ID, or the empty string if none.\n * @private\n */\nfunction getFirstCommonAncestorID(oneID, twoID) {\n  var minLength \x3d Math.min(oneID.length, twoID.length);\n  if (minLength \x3d\x3d\x3d 0) {\n    return \'\';\n  }\n  var lastCommonMarkerIndex \x3d 0;\n  // Use `\x3c\x3d` to traverse until the "EOL" of the shorter string.\n  for (var i \x3d 0; i \x3c\x3d minLength; i++) {\n    if (isBoundary(oneID, i) \x26\x26 isBoundary(twoID, i)) {\n      lastCommonMarkerIndex \x3d i;\n    } else if (oneID.charAt(i) !\x3d\x3d twoID.charAt(i)) {\n      break;\n    }\n  }\n  var longestCommonID \x3d oneID.substr(0, lastCommonMarkerIndex);\n  ("production" !\x3d\x3d "development" ? invariant(\n    isValidID(longestCommonID),\n    \'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s\',\n    oneID,\n    twoID,\n    longestCommonID\n  ) : invariant(isValidID(longestCommonID)));\n  return longestCommonID;\n}\n\n/**\n * Traverses the parent path between two IDs (either up or down). The IDs must\n * not be the same, and there must exist a parent path between them. If the\n * callback returns `false`, traversal is stopped.\n *\n * @param {?string} start ID at which to start traversal.\n * @param {?string} stop ID at which to end traversal.\n * @param {function} cb Callback to invoke each ID with.\n * @param {?boolean} skipFirst Whether or not to skip the first node.\n * @param {?boolean} skipLast Whether or not to skip the last node.\n * @private\n */\nfunction traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {\n  start \x3d start || \'\';\n  stop \x3d stop || \'\';\n  ("production" !\x3d\x3d "development" ? invariant(\n    start !\x3d\x3d stop,\n    \'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.\',\n    start\n  ) : invariant(start !\x3d\x3d stop));\n  var traverseUp \x3d isAncestorIDOf(stop, start);\n  ("production" !\x3d\x3d "development" ? invariant(\n    traverseUp || isAncestorIDOf(start, stop),\n    \'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do \' +\n    \'not have a parent path.\',\n    start,\n    stop\n  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));\n  // Traverse from `start` to `stop` one depth at a time.\n  var depth \x3d 0;\n  var traverse \x3d traverseUp ? getParentID : getNextDescendantID;\n  for (var id \x3d start; /* until break */; id \x3d traverse(id, stop)) {\n    var ret;\n    if ((!skipFirst || id !\x3d\x3d start) \x26\x26 (!skipLast || id !\x3d\x3d stop)) {\n      ret \x3d cb(id, traverseUp, arg);\n    }\n    if (ret \x3d\x3d\x3d false || id \x3d\x3d\x3d stop) {\n      // Only break //after// visiting `stop`.\n      break;\n    }\n    ("production" !\x3d\x3d "development" ? invariant(\n      depth++ \x3c MAX_TREE_DEPTH,\n      \'traverseParentPath(%s, %s, ...): Detected an infinite loop while \' +\n      \'traversing the React DOM ID tree. This may be due to malformed IDs: %s\',\n      start, stop\n    ) : invariant(depth++ \x3c MAX_TREE_DEPTH));\n  }\n}\n\n/**\n * Manages the IDs assigned to DOM representations of React components. This\n * uses a specific scheme in order to traverse the DOM efficiently (e.g. in\n * order to simulate events).\n *\n * @internal\n */\nvar ReactInstanceHandles \x3d {\n\n  /**\n   * Constructs a React root ID\n   * @return {string} A React root ID.\n   */\n  createReactRootID: function() {\n    return getReactRootIDString(ReactRootIndex.createReactRootIndex());\n  },\n\n  /**\n   * Constructs a React ID by joining a root ID with a name.\n   *\n   * @param {string} rootID Root ID of a parent component.\n   * @param {string} name A component\'s name (as flattened children).\n   * @return {string} A React ID.\n   * @internal\n   */\n  createReactID: function(rootID, name) {\n    return rootID + name;\n  },\n\n  /**\n   * Gets the DOM ID of the React component that is the root of the tree that\n   * contains the React component with the supplied DOM ID.\n   *\n   * @param {string} id DOM ID of a React component.\n   * @return {?string} DOM ID of the React component that is the root.\n   * @internal\n   */\n  getReactRootIDFromNodeID: function(id) {\n    if (id \x26\x26 id.charAt(0) \x3d\x3d\x3d SEPARATOR \x26\x26 id.length \x3e 1) {\n      var index \x3d id.indexOf(SEPARATOR, 1);\n      return index \x3e -1 ? id.substr(0, index) : id;\n    }\n    return null;\n  },\n\n  /**\n   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n   * should would receive a `mouseEnter` or `mouseLeave` event.\n   *\n   * NOTE: Does not invoke the callback on the nearest common ancestor because\n   * nothing "entered" or "left" that element.\n   *\n   * @param {string} leaveID ID being left.\n   * @param {string} enterID ID being entered.\n   * @param {function} cb Callback to invoke on each entered/left ID.\n   * @param {*} upArg Argument to invoke the callback with on left IDs.\n   * @param {*} downArg Argument to invoke the callback with on entered IDs.\n   * @internal\n   */\n  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {\n    var ancestorID \x3d getFirstCommonAncestorID(leaveID, enterID);\n    if (ancestorID !\x3d\x3d leaveID) {\n      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);\n    }\n    if (ancestorID !\x3d\x3d enterID) {\n      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);\n    }\n  },\n\n  /**\n   * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseTwoPhase: function(targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath(\'\', targetID, cb, arg, true, false);\n      traverseParentPath(targetID, \'\', cb, arg, false, true);\n    }\n  },\n\n  /**\n   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For\n   * example, passing `.0.$row-0.1` would result in `cb` getting called\n   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseAncestors: function(targetID, cb, arg) {\n    traverseParentPath(\'\', targetID, cb, arg, true, false);\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getFirstCommonAncestorID: getFirstCommonAncestorID,\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getNextDescendantID: getNextDescendantID,\n\n  isAncestorIDOf: isAncestorIDOf,\n\n  SEPARATOR: SEPARATOR\n\n};\n\nmodule.exports \x3d ReactInstanceHandles;\n\n},{"./ReactRootIndex":72,"./invariant":120}],60:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n"use strict";\n\nvar adler32 \x3d _dereq_("./adler32");\n\nvar ReactMarkupChecksum \x3d {\n  CHECKSUM_ATTR_NAME: \'data-react-checksum\',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function(markup) {\n    var checksum \x3d adler32(markup);\n    return markup.replace(\n      \'\x3e\',\n      \' \' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + \'\x3d"\' + checksum + \'"\x3e\'\n    );\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function(markup, element) {\n    var existingChecksum \x3d element.getAttribute(\n      ReactMarkupChecksum.CHECKSUM_ATTR_NAME\n    );\n    existingChecksum \x3d existingChecksum \x26\x26 parseInt(existingChecksum, 10);\n    var markupChecksum \x3d adler32(markup);\n    return markupChecksum \x3d\x3d\x3d existingChecksum;\n  }\n};\n\nmodule.exports \x3d ReactMarkupChecksum;\n\n},{"./adler32":95}],61:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactMount\n */\n\n"use strict";\n\nvar DOMProperty \x3d _dereq_("./DOMProperty");\nvar ReactBrowserEventEmitter \x3d _dereq_("./ReactBrowserEventEmitter");\nvar ReactCurrentOwner \x3d _dereq_("./ReactCurrentOwner");\nvar ReactDescriptor \x3d _dereq_("./ReactDescriptor");\nvar ReactInstanceHandles \x3d _dereq_("./ReactInstanceHandles");\nvar ReactPerf \x3d _dereq_("./ReactPerf");\n\nvar containsNode \x3d _dereq_("./containsNode");\nvar getReactRootElementInContainer \x3d _dereq_("./getReactRootElementInContainer");\nvar instantiateReactComponent \x3d _dereq_("./instantiateReactComponent");\nvar invariant \x3d _dereq_("./invariant");\nvar shouldUpdateReactComponent \x3d _dereq_("./shouldUpdateReactComponent");\nvar warning \x3d _dereq_("./warning");\n\nvar SEPARATOR \x3d ReactInstanceHandles.SEPARATOR;\n\nvar ATTR_NAME \x3d DOMProperty.ID_ATTRIBUTE_NAME;\nvar nodeCache \x3d {};\n\nvar ELEMENT_NODE_TYPE \x3d 1;\nvar DOC_NODE_TYPE \x3d 9;\n\n/** Mapping from reactRootID to React component instance. */\nvar instancesByReactRootID \x3d {};\n\n/** Mapping from reactRootID to `container` nodes. */\nvar containersByReactRootID \x3d {};\n\nif ("production" !\x3d\x3d "development") {\n  /** __DEV__-only mapping from reactRootID to root elements. */\n  var rootElementsByReactRootID \x3d {};\n}\n\n// Used to store breadth-first search state in findComponentRoot.\nvar findComponentRootReusableArray \x3d [];\n\n/**\n * @param {DOMElement} container DOM element that may contain a React component.\n * @return {?string} A "reactRoot" ID, if a React component is rendered.\n */\nfunction getReactRootID(container) {\n  var rootElement \x3d getReactRootElementInContainer(container);\n  return rootElement \x26\x26 ReactMount.getID(rootElement);\n}\n\n/**\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form\n * element can return its control whose name or ID equals ATTR_NAME. All\n * DOM nodes support `getAttributeNode` but this can also get called on\n * other objects so just return \'\' if we\'re given something other than a\n * DOM node (such as window).\n *\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.\n * @return {string} ID of the supplied `domNode`.\n */\nfunction getID(node) {\n  var id \x3d internalGetID(node);\n  if (id) {\n    if (nodeCache.hasOwnProperty(id)) {\n      var cached \x3d nodeCache[id];\n      if (cached !\x3d\x3d node) {\n        ("production" !\x3d\x3d "development" ? invariant(\n          !isValid(cached, id),\n          \'ReactMount: Two valid but unequal nodes with the same `%s`: %s\',\n          ATTR_NAME, id\n        ) : invariant(!isValid(cached, id)));\n\n        nodeCache[id] \x3d node;\n      }\n    } else {\n      nodeCache[id] \x3d node;\n    }\n  }\n\n  return id;\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node \x26\x26 node.getAttribute \x26\x26 node.getAttribute(ATTR_NAME) || \'\';\n}\n\n/**\n * Sets the React-specific ID of the given node.\n *\n * @param {DOMElement} node The DOM node whose ID will be set.\n * @param {string} id The value of the ID attribute.\n */\nfunction setID(node, id) {\n  var oldID \x3d internalGetID(node);\n  if (oldID !\x3d\x3d id) {\n    delete nodeCache[oldID];\n  }\n  node.setAttribute(ATTR_NAME, id);\n  nodeCache[id] \x3d node;\n}\n\n/**\n * Finds the node with the supplied React-generated DOM ID.\n *\n * @param {string} id A React-generated DOM ID.\n * @return {DOMElement} DOM node with the suppled `id`.\n * @internal\n */\nfunction getNode(id) {\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] \x3d ReactMount.findReactNodeByID(id);\n  }\n  return nodeCache[id];\n}\n\n/**\n * A node is "valid" if it is contained by a currently mounted container.\n *\n * This means that the node does not have to be contained by a document in\n * order to be considered valid.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @param {string} id The expected ID of the node.\n * @return {boolean} Whether the node is contained by a mounted container.\n */\nfunction isValid(node, id) {\n  if (node) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      internalGetID(node) \x3d\x3d\x3d id,\n      \'ReactMount: Unexpected modification of `%s`\',\n      ATTR_NAME\n    ) : invariant(internalGetID(node) \x3d\x3d\x3d id));\n\n    var container \x3d ReactMount.findReactContainerForID(id);\n    if (container \x26\x26 containsNode(container, node)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Causes the cache to forget about one React-specific ID.\n *\n * @param {string} id The ID to forget.\n */\nfunction purgeID(id) {\n  delete nodeCache[id];\n}\n\nvar deepestNodeSoFar \x3d null;\nfunction findDeepestCachedAncestorImpl(ancestorID) {\n  var ancestor \x3d nodeCache[ancestorID];\n  if (ancestor \x26\x26 isValid(ancestor, ancestorID)) {\n    deepestNodeSoFar \x3d ancestor;\n  } else {\n    // This node isn\'t populated in the cache, so presumably none of its\n    // descendants are. Break out of the loop.\n    return false;\n  }\n}\n\n/**\n * Return the deepest cached node whose ID is a prefix of `targetID`.\n */\nfunction findDeepestCachedAncestor(targetID) {\n  deepestNodeSoFar \x3d null;\n  ReactInstanceHandles.traverseAncestors(\n    targetID,\n    findDeepestCachedAncestorImpl\n  );\n\n  var foundNode \x3d deepestNodeSoFar;\n  deepestNodeSoFar \x3d null;\n  return foundNode;\n}\n\n/**\n * Mounting is the process of initializing a React component by creatings its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.renderComponent(\n *     component,\n *     document.getElementById(\'container\')\n *   );\n *\n *   \x3cdiv id\x3d"container"\x3e                   \x3c-- Supplied `container`.\n *     \x3cdiv data-reactid\x3d".3"\x3e              \x3c-- Rendered reactRoot of React\n *       // ...                                 component.\n *     \x3c/div\x3e\n *   \x3c/div\x3e\n *\n * Inside of `container`, the first element rendered is the "reactRoot".\n */\nvar ReactMount \x3d {\n  /** Exposed for debugging purposes **/\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function(container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Take a component that\'s already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function(\n      prevComponent,\n      nextComponent,\n      container,\n      callback) {\n    var nextProps \x3d nextComponent.props;\n    ReactMount.scrollMonitor(container, function() {\n      prevComponent.replaceProps(nextProps, callback);\n    });\n\n    if ("production" !\x3d\x3d "development") {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[getReactRootID(container)] \x3d\n        getReactRootElementInContainer(container);\n    }\n\n    return prevComponent;\n  },\n\n  /**\n   * Register a component into the instance map and starts scroll value\n   * monitoring\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @return {string} reactRoot ID prefix\n   */\n  _registerComponent: function(nextComponent, container) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      container \x26\x26 (\n        container.nodeType \x3d\x3d\x3d ELEMENT_NODE_TYPE ||\n        container.nodeType \x3d\x3d\x3d DOC_NODE_TYPE\n      ),\n      \'_registerComponent(...): Target container is not a DOM element.\'\n    ) : invariant(container \x26\x26 (\n      container.nodeType \x3d\x3d\x3d ELEMENT_NODE_TYPE ||\n      container.nodeType \x3d\x3d\x3d DOC_NODE_TYPE\n    )));\n\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();\n\n    var reactRootID \x3d ReactMount.registerContainer(container);\n    instancesByReactRootID[reactRootID] \x3d nextComponent;\n    return reactRootID;\n  },\n\n  /**\n   * Render a new component into the DOM.\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: ReactPerf.measure(\n    \'ReactMount\',\n    \'_renderNewRootComponent\',\n    function(\n        nextComponent,\n        container,\n        shouldReuseMarkup) {\n      // Various parts of our code (such as ReactCompositeComponent\'s\n      // _renderValidatedComponent) assume that calls to render aren\'t nested;\n      // verify that that\'s the case.\n      ("production" !\x3d\x3d "development" ? warning(\n        ReactCurrentOwner.current \x3d\x3d null,\n        \'_renderNewRootComponent(): Render methods should be a pure function \' +\n        \'of props and state; triggering nested component updates from \' +\n        \'render is not allowed. If necessary, trigger nested updates in \' +\n        \'componentDidUpdate.\'\n      ) : null);\n\n      var componentInstance \x3d instantiateReactComponent(nextComponent);\n      var reactRootID \x3d ReactMount._registerComponent(\n        componentInstance,\n        container\n      );\n      componentInstance.mountComponentIntoNode(\n        reactRootID,\n        container,\n        shouldReuseMarkup\n      );\n\n      if ("production" !\x3d\x3d "development") {\n        // Record the root element in case it later gets transplanted.\n        rootElementsByReactRootID[reactRootID] \x3d\n          getReactRootElementInContainer(container);\n      }\n\n      return componentInstance;\n    }\n  ),\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactDescriptor} nextDescriptor Component descriptor to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  renderComponent: function(nextDescriptor, container, callback) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      ReactDescriptor.isValidDescriptor(nextDescriptor),\n      \'renderComponent(): Invalid component descriptor.%s\',\n      (\n        ReactDescriptor.isValidFactory(nextDescriptor) ?\n          \' Instead of passing a component class, make sure to instantiate \' +\n          \'it first by calling it with props.\' :\n        // Check if it quacks like a descriptor\n        typeof nextDescriptor.props !\x3d\x3d "undefined" ?\n          \' This may be caused by unintentionally loading two independent \' +\n          \'copies of React.\' :\n          \'\'\n      )\n    ) : invariant(ReactDescriptor.isValidDescriptor(nextDescriptor)));\n\n    var prevComponent \x3d instancesByReactRootID[getReactRootID(container)];\n\n    if (prevComponent) {\n      var prevDescriptor \x3d prevComponent._descriptor;\n      if (shouldUpdateReactComponent(prevDescriptor, nextDescriptor)) {\n        return ReactMount._updateRootComponent(\n          prevComponent,\n          nextDescriptor,\n          container,\n          callback\n        );\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement \x3d getReactRootElementInContainer(container);\n    var containerHasReactMarkup \x3d\n      reactRootElement \x26\x26 ReactMount.isRenderedByReact(reactRootElement);\n\n    var shouldReuseMarkup \x3d containerHasReactMarkup \x26\x26 !prevComponent;\n\n    var component \x3d ReactMount._renderNewRootComponent(\n      nextDescriptor,\n      container,\n      shouldReuseMarkup\n    );\n    callback \x26\x26 callback.call(component);\n    return component;\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into the supplied `container`.\n   *\n   * @param {function} constructor React component constructor.\n   * @param {?object} props Initial props of the component instance.\n   * @param {DOMElement} container DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  constructAndRenderComponent: function(constructor, props, container) {\n    return ReactMount.renderComponent(constructor(props), container);\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into a container node identified by supplied `id`.\n   *\n   * @param {function} componentConstructor React component constructor\n   * @param {?object} props Initial props of the component instance.\n   * @param {string} id ID of the DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in the container node.\n   */\n  constructAndRenderComponentByID: function(constructor, props, id) {\n    var domNode \x3d document.getElementById(id);\n    ("production" !\x3d\x3d "development" ? invariant(\n      domNode,\n      \'Tried to get element with id of "%s" but it is not present on the page.\',\n      id\n    ) : invariant(domNode));\n    return ReactMount.constructAndRenderComponent(constructor, props, domNode);\n  },\n\n  /**\n   * Registers a container node into which React components will be rendered.\n   * This also creates the "reactRoot" ID that will be assigned to the element\n   * rendered within.\n   *\n   * @param {DOMElement} container DOM element to register as a container.\n   * @return {string} The "reactRoot" ID of elements rendered within.\n   */\n  registerContainer: function(container) {\n    var reactRootID \x3d getReactRootID(container);\n    if (reactRootID) {\n      // If one exists, make sure it is a valid "reactRoot" ID.\n      reactRootID \x3d ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);\n    }\n    if (!reactRootID) {\n      // No valid "reactRoot" ID found, create one.\n      reactRootID \x3d ReactInstanceHandles.createReactRootID();\n    }\n    containersByReactRootID[reactRootID] \x3d container;\n    return reactRootID;\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function(container) {\n    // Various parts of our code (such as ReactCompositeComponent\'s\n    // _renderValidatedComponent) assume that calls to render aren\'t nested;\n    // verify that that\'s the case. (Strictly speaking, unmounting won\'t cause a\n    // render but we still don\'t expect to be in a render call here.)\n    ("production" !\x3d\x3d "development" ? warning(\n      ReactCurrentOwner.current \x3d\x3d null,\n      \'unmountComponentAtNode(): Render methods should be a pure function of \' +\n      \'props and state; triggering nested component updates from render is \' +\n      \'not allowed. If necessary, trigger nested updates in \' +\n      \'componentDidUpdate.\'\n    ) : null);\n\n    var reactRootID \x3d getReactRootID(container);\n    var component \x3d instancesByReactRootID[reactRootID];\n    if (!component) {\n      return false;\n    }\n    ReactMount.unmountComponentFromNode(component, container);\n    delete instancesByReactRootID[reactRootID];\n    delete containersByReactRootID[reactRootID];\n    if ("production" !\x3d\x3d "development") {\n      delete rootElementsByReactRootID[reactRootID];\n    }\n    return true;\n  },\n\n  /**\n   * Unmounts a component and removes it from the DOM.\n   *\n   * @param {ReactComponent} instance React component instance.\n   * @param {DOMElement} container DOM element to unmount from.\n   * @final\n   * @internal\n   * @see {ReactMount.unmountComponentAtNode}\n   */\n  unmountComponentFromNode: function(instance, container) {\n    instance.unmountComponent();\n\n    if (container.nodeType \x3d\x3d\x3d DOC_NODE_TYPE) {\n      container \x3d container.documentElement;\n    }\n\n    // http://jsperf.com/emptying-a-node\n    while (container.lastChild) {\n      container.removeChild(container.lastChild);\n    }\n  },\n\n  /**\n   * Finds the container DOM element that contains React component to which the\n   * supplied DOM `id` belongs.\n   *\n   * @param {string} id The ID of an element rendered by a React component.\n   * @return {?DOMElement} DOM element that contains the `id`.\n   */\n  findReactContainerForID: function(id) {\n    var reactRootID \x3d ReactInstanceHandles.getReactRootIDFromNodeID(id);\n    var container \x3d containersByReactRootID[reactRootID];\n\n    if ("production" !\x3d\x3d "development") {\n      var rootElement \x3d rootElementsByReactRootID[reactRootID];\n      if (rootElement \x26\x26 rootElement.parentNode !\x3d\x3d container) {\n        ("production" !\x3d\x3d "development" ? invariant(\n          // Call internalGetID here because getID calls isValid which calls\n          // findReactContainerForID (this function).\n          internalGetID(rootElement) \x3d\x3d\x3d reactRootID,\n          \'ReactMount: Root element ID differed from reactRootID.\'\n        ) : invariant(// Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) \x3d\x3d\x3d reactRootID));\n\n        var containerChild \x3d container.firstChild;\n        if (containerChild \x26\x26\n            reactRootID \x3d\x3d\x3d internalGetID(containerChild)) {\n          // If the container has a new child with the same ID as the old\n          // root element, then rootElementsByReactRootID[reactRootID] is\n          // just stale and needs to be updated. The case that deserves a\n          // warning is when the container is empty.\n          rootElementsByReactRootID[reactRootID] \x3d containerChild;\n        } else {\n          console.warn(\n            \'ReactMount: Root element has been removed from its original \' +\n            \'container. New container:\', rootElement.parentNode\n          );\n        }\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Finds an element rendered by React with the supplied ID.\n   *\n   * @param {string} id ID of a DOM node in the React component.\n   * @return {DOMElement} Root DOM node of the React component.\n   */\n  findReactNodeByID: function(id) {\n    var reactRoot \x3d ReactMount.findReactContainerForID(id);\n    return ReactMount.findComponentRoot(reactRoot, id);\n  },\n\n  /**\n   * True if the supplied `node` is rendered by React.\n   *\n   * @param {*} node DOM Element to check.\n   * @return {boolean} True if the DOM Element appears to be rendered by React.\n   * @internal\n   */\n  isRenderedByReact: function(node) {\n    if (node.nodeType !\x3d\x3d 1) {\n      // Not a DOMElement, therefore not a React component\n      return false;\n    }\n    var id \x3d ReactMount.getID(node);\n    return id ? id.charAt(0) \x3d\x3d\x3d SEPARATOR : false;\n  },\n\n  /**\n   * Traverses up the ancestors of the supplied node to find a node that is a\n   * DOM representation of a React component.\n   *\n   * @param {*} node\n   * @return {?DOMEventTarget}\n   * @internal\n   */\n  getFirstReactDOM: function(node) {\n    var current \x3d node;\n    while (current \x26\x26 current.parentNode !\x3d\x3d current) {\n      if (ReactMount.isRenderedByReact(current)) {\n        return current;\n      }\n      current \x3d current.parentNode;\n    }\n    return null;\n  },\n\n  /**\n   * Finds a node with the supplied `targetID` inside of the supplied\n   * `ancestorNode`.  Exploits the ID naming scheme to perform the search\n   * quickly.\n   *\n   * @param {DOMEventTarget} ancestorNode Search from this root.\n   * @pararm {string} targetID ID of the DOM representation of the component.\n   * @return {DOMEventTarget} DOM node with the supplied `targetID`.\n   * @internal\n   */\n  findComponentRoot: function(ancestorNode, targetID) {\n    var firstChildren \x3d findComponentRootReusableArray;\n    var childIndex \x3d 0;\n\n    var deepestAncestor \x3d findDeepestCachedAncestor(targetID) || ancestorNode;\n\n    firstChildren[0] \x3d deepestAncestor.firstChild;\n    firstChildren.length \x3d 1;\n\n    while (childIndex \x3c firstChildren.length) {\n      var child \x3d firstChildren[childIndex++];\n      var targetChild;\n\n      while (child) {\n        var childID \x3d ReactMount.getID(child);\n        if (childID) {\n          // Even if we find the node we\'re looking for, we finish looping\n          // through its siblings to ensure they\'re cached so that we don\'t have\n          // to revisit this node again. Otherwise, we make n^2 calls to getID\n          // when visiting the many children of a single node in order.\n\n          if (targetID \x3d\x3d\x3d childID) {\n            targetChild \x3d child;\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {\n            // If we find a child whose ID is an ancestor of the given ID,\n            // then we can be sure that we only want to search the subtree\n            // rooted at this child, so we can throw out the rest of the\n            // search state.\n            firstChildren.length \x3d childIndex \x3d 0;\n            firstChildren.push(child.firstChild);\n          }\n\n        } else {\n          // If this child had no ID, then there\'s a chance that it was\n          // injected automatically by the browser, as when a `\x3ctable\x3e`\n          // element sprouts an extra `\x3ctbody\x3e` child as a side effect of\n          // `.innerHTML` parsing. Optimistically continue down this\n          // branch, but not before examining the other siblings.\n          firstChildren.push(child.firstChild);\n        }\n\n        child \x3d child.nextSibling;\n      }\n\n      if (targetChild) {\n        // Emptying firstChildren/findComponentRootReusableArray is\n        // not necessary for correctness, but it helps the GC reclaim\n        // any nodes that were left at the end of the search.\n        firstChildren.length \x3d 0;\n\n        return targetChild;\n      }\n    }\n\n    firstChildren.length \x3d 0;\n\n    ("production" !\x3d\x3d "development" ? invariant(\n      false,\n      \'findComponentRoot(..., %s): Unable to find element. This probably \' +\n      \'means the DOM was unexpectedly mutated (e.g., by the browser), \' +\n      \'usually due to forgetting a \x3ctbody\x3e when using tables, nesting \x3cp\x3e \' +\n      \'or \x3ca\x3e tags, or using non-SVG elements in an \x3csvg\x3e parent. Try \' +\n      \'inspecting the child nodes of the element with React ID `%s`.\',\n      targetID,\n      ReactMount.getID(ancestorNode)\n    ) : invariant(false));\n  },\n\n\n  /**\n   * React ID utilities.\n   */\n\n  getReactRootID: getReactRootID,\n\n  getID: getID,\n\n  setID: setID,\n\n  getNode: getNode,\n\n  purgeID: purgeID\n};\n\nmodule.exports \x3d ReactMount;\n\n},{"./DOMProperty":10,"./ReactBrowserEventEmitter":29,"./ReactCurrentOwner":35,"./ReactDescriptor":51,"./ReactInstanceHandles":59,"./ReactPerf":65,"./containsNode":96,"./getReactRootElementInContainer":114,"./instantiateReactComponent":119,"./invariant":120,"./shouldUpdateReactComponent":140,"./warning":143}],62:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n"use strict";\n\nvar ReactComponent \x3d _dereq_("./ReactComponent");\nvar ReactMultiChildUpdateTypes \x3d _dereq_("./ReactMultiChildUpdateTypes");\n\nvar flattenChildren \x3d _dereq_("./flattenChildren");\nvar instantiateReactComponent \x3d _dereq_("./instantiateReactComponent");\nvar shouldUpdateReactComponent \x3d _dereq_("./shouldUpdateReactComponent");\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth \x3d 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array\x3cobject\x3e}\n * @private\n */\nvar updateQueue \x3d [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array\x3cstring\x3e}\n * @private\n */\nvar markupQueue \x3d [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(\n      updateQueue,\n      markupQueue\n    );\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length \x3d 0;\n  markupQueue.length \x3d 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild \x3d {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Generates a "mount image" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function(nestedChildren, transaction) {\n      var children \x3d flattenChildren(nestedChildren);\n      var mountImages \x3d [];\n      var index \x3d 0;\n      this._renderedChildren \x3d children;\n      for (var name in children) {\n        var child \x3d children[name];\n        if (children.hasOwnProperty(name)) {\n          // The rendered children must be turned into instances as they\'re\n          // mounted.\n          var childInstance \x3d instantiateReactComponent(child);\n          children[name] \x3d childInstance;\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID \x3d this._rootNodeID + name;\n          var mountImage \x3d childInstance.mountComponent(\n            rootID,\n            transaction,\n            this._mountDepth + 1\n          );\n          childInstance._mountIndex \x3d index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function(nextContent) {\n      updateDepth++;\n      var errorThrown \x3d true;\n      try {\n        var prevChildren \x3d this._renderedChildren;\n        // Remove any rendered children.\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown \x3d false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function(nextNestedChildren, transaction) {\n      updateDepth++;\n      var errorThrown \x3d true;\n      try {\n        this._updateChildren(nextNestedChildren, transaction);\n        errorThrown \x3d false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function(nextNestedChildren, transaction) {\n      var nextChildren \x3d flattenChildren(nextNestedChildren);\n      var prevChildren \x3d this._renderedChildren;\n      if (!nextChildren \x26\x26 !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex \x3d 0;\n      var nextIndex \x3d 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild \x3d prevChildren \x26\x26 prevChildren[name];\n        var prevDescriptor \x3d prevChild \x26\x26 prevChild._descriptor;\n        var nextDescriptor \x3d nextChildren[name];\n        if (shouldUpdateReactComponent(prevDescriptor, nextDescriptor)) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex \x3d Math.max(prevChild._mountIndex, lastIndex);\n          prevChild.receiveComponent(nextDescriptor, transaction);\n          prevChild._mountIndex \x3d nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex \x3d Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChildByName(prevChild, name);\n          }\n          // The child must be instantiated before it\'s mounted.\n          var nextChildInstance \x3d instantiateReactComponent(nextDescriptor);\n          this._mountChildByNameAtIndex(\n            nextChildInstance, name, nextIndex, transaction\n          );\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) \x26\x26\n            !(nextChildren \x26\x26 nextChildren[name])) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function() {\n      var renderedChildren \x3d this._renderedChildren;\n      for (var name in renderedChildren) {\n        var renderedChild \x3d renderedChildren[name];\n        // TODO: When is this not true?\n        if (renderedChild.unmountComponent) {\n          renderedChild.unmountComponent();\n        }\n      }\n      this._renderedChildren \x3d null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function(child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex \x3c lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function(child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function(child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function(textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function(child, name, index, transaction) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID \x3d this._rootNodeID + name;\n      var mountImage \x3d child.mountComponent(\n        rootID,\n        transaction,\n        this._mountDepth + 1\n      );\n      child._mountIndex \x3d index;\n      this.createChild(child, mountImage);\n      this._renderedChildren \x3d this._renderedChildren || {};\n      this._renderedChildren[name] \x3d child;\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function(child, name) {\n      this.removeChild(child);\n      child._mountIndex \x3d null;\n      child.unmountComponent();\n      delete this._renderedChildren[name];\n    }\n\n  }\n\n};\n\nmodule.exports \x3d ReactMultiChild;\n\n},{"./ReactComponent":31,"./ReactMultiChildUpdateTypes":63,"./flattenChildren":105,"./instantiateReactComponent":119,"./shouldUpdateReactComponent":140}],63:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactMultiChildUpdateTypes\n */\n\n"use strict";\n\nvar keyMirror \x3d _dereq_("./keyMirror");\n\n/**\n * When a component\'s children are updated, a series of update configuration\n * objects are created in order to batch and serialize the required changes.\n *\n * Enumerates all the possible types of update configurations.\n *\n * @internal\n */\nvar ReactMultiChildUpdateTypes \x3d keyMirror({\n  INSERT_MARKUP: null,\n  MOVE_EXISTING: null,\n  REMOVE_NODE: null,\n  TEXT_CONTENT: null\n});\n\nmodule.exports \x3d ReactMultiChildUpdateTypes;\n\n},{"./keyMirror":126}],64:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactOwner\n */\n\n"use strict";\n\nvar emptyObject \x3d _dereq_("./emptyObject");\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a "ref".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent \x3d React.createClass({\n *     render: function() {\n *       return (\n *         \x3cdiv onClick\x3d{this.handleClick}\x3e\n *           \x3cCustomComponent ref\x3d"custom" /\x3e\n *         \x3c/div\x3e\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React\'s data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner \x3d {\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function(object) {\n    return !!(\n      object \x26\x26\n      typeof object.attachRef \x3d\x3d\x3d \'function\' \x26\x26\n      typeof object.detachRef \x3d\x3d\x3d \'function\'\n    );\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function(component, ref, owner) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      ReactOwner.isValidOwner(owner),\n      \'addComponentAsRefTo(...): Only a ReactOwner can have refs. This \' +\n      \'usually means that you\\\'re trying to add a ref to a component that \' +\n      \'doesn\\\'t have an owner (that is, was not created inside of another \' +\n      \'component\\\'s `render` method). Try rendering this component inside of \' +\n      \'a new top-level component which will hold the ref.\'\n    ) : invariant(ReactOwner.isValidOwner(owner)));\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function(component, ref, owner) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      ReactOwner.isValidOwner(owner),\n      \'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This \' +\n      \'usually means that you\\\'re trying to remove a ref to a component that \' +\n      \'doesn\\\'t have an owner (that is, was not created inside of another \' +\n      \'component\\\'s `render` method). Try rendering this component inside of \' +\n      \'a new top-level component which will hold the ref.\'\n    ) : invariant(ReactOwner.isValidOwner(owner)));\n    // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n    if (owner.refs[ref] \x3d\x3d\x3d component) {\n      owner.detachRef(ref);\n    }\n  },\n\n  /**\n   * A ReactComponent must mix this in to have refs.\n   *\n   * @lends {ReactOwner.prototype}\n   */\n  Mixin: {\n\n    construct: function() {\n      this.refs \x3d emptyObject;\n    },\n\n    /**\n     * Lazily allocates the refs object and stores `component` as `ref`.\n     *\n     * @param {string} ref Reference name.\n     * @param {component} component Component to store as `ref`.\n     * @final\n     * @private\n     */\n    attachRef: function(ref, component) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        component.isOwnedBy(this),\n        \'attachRef(%s, ...): Only a component\\\'s owner can store a ref to it.\',\n        ref\n      ) : invariant(component.isOwnedBy(this)));\n      var refs \x3d this.refs \x3d\x3d\x3d emptyObject ? (this.refs \x3d {}) : this.refs;\n      refs[ref] \x3d component;\n    },\n\n    /**\n     * Detaches a reference name.\n     *\n     * @param {string} ref Name to dereference.\n     * @final\n     * @private\n     */\n    detachRef: function(ref) {\n      delete this.refs[ref];\n    }\n\n  }\n\n};\n\nmodule.exports \x3d ReactOwner;\n\n},{"./emptyObject":103,"./invariant":120}],65:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n"use strict";\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf \x3d {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don\'t measure\n   * anything, but we\'ll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function(objName, fnName, func) {\n    if ("production" !\x3d\x3d "development") {\n      var measuredFunc \x3d null;\n      return function() {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc \x3d ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function(measure) {\n      ReactPerf.storedMeasure \x3d measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports \x3d ReactPerf;\n\n},{}],66:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactPropTransferer\n */\n\n"use strict";\n\nvar emptyFunction \x3d _dereq_("./emptyFunction");\nvar invariant \x3d _dereq_("./invariant");\nvar joinClasses \x3d _dereq_("./joinClasses");\nvar merge \x3d _dereq_("./merge");\n\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\nfunction createTransferStrategy(mergeStrategy) {\n  return function(props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] \x3d value;\n    } else {\n      props[key] \x3d mergeStrategy(props[key], value);\n    }\n  };\n}\n\nvar transferStrategyMerge \x3d createTransferStrategy(function(a, b) {\n  // `merge` overrides the first object\'s (`props[key]` above) keys using the\n  // second object\'s (`value`) keys. An object\'s style\'s existing `propA` would\n  // get overridden. Flip the order here.\n  return merge(b, a);\n});\n\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n * NOTE: if you add any more exceptions to this list you should be sure to\n * update `cloneWithProps()` accordingly.\n */\nvar TransferStrategies \x3d {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n  /**\n   * Never transfer the `key` prop.\n   */\n  key: emptyFunction,\n  /**\n   * Never transfer the `ref` prop.\n   */\n  ref: emptyFunction,\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: transferStrategyMerge\n};\n\n/**\n * Mutates the first argument by transferring the properties from the second\n * argument.\n *\n * @param {object} props\n * @param {object} newProps\n * @return {object}\n */\nfunction transferInto(props, newProps) {\n  for (var thisKey in newProps) {\n    if (!newProps.hasOwnProperty(thisKey)) {\n      continue;\n    }\n\n    var transferStrategy \x3d TransferStrategies[thisKey];\n\n    if (transferStrategy \x26\x26 TransferStrategies.hasOwnProperty(thisKey)) {\n      transferStrategy(props, thisKey, newProps[thisKey]);\n    } else if (!props.hasOwnProperty(thisKey)) {\n      props[thisKey] \x3d newProps[thisKey];\n    }\n  }\n  return props;\n}\n\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\nvar ReactPropTransferer \x3d {\n\n  TransferStrategies: TransferStrategies,\n\n  /**\n   * Merge two props objects using TransferStrategies.\n   *\n   * @param {object} oldProps original props (they take precedence)\n   * @param {object} newProps new props to merge in\n   * @return {object} a new object containing both sets of props merged.\n   */\n  mergeProps: function(oldProps, newProps) {\n    return transferInto(merge(oldProps), newProps);\n  },\n\n  /**\n   * @lends {ReactPropTransferer.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Transfer props from this component to a target component.\n     *\n     * Props that do not have an explicit transfer strategy will be transferred\n     * only if the target component does not already have the prop set.\n     *\n     * This is usually used to pass down props to a returned root component.\n     *\n     * @param {ReactDescriptor} descriptor Component receiving the properties.\n     * @return {ReactDescriptor} The supplied `component`.\n     * @final\n     * @protected\n     */\n    transferPropsTo: function(descriptor) {\n      ("production" !\x3d\x3d "development" ? invariant(\n        descriptor._owner \x3d\x3d\x3d this,\n        \'%s: You can\\\'t call transferPropsTo() on a component that you \' +\n        \'don\\\'t own, %s. This usually means you are calling \' +\n        \'transferPropsTo() on a component passed in as props or children.\',\n        this.constructor.displayName,\n        descriptor.type.displayName\n      ) : invariant(descriptor._owner \x3d\x3d\x3d this));\n\n      // Because descriptors are immutable we have to merge into the existing\n      // props object rather than clone it.\n      transferInto(descriptor.props, this.props);\n\n      return descriptor;\n    }\n\n  }\n};\n\nmodule.exports \x3d ReactPropTransferer;\n\n},{"./emptyFunction":102,"./invariant":120,"./joinClasses":125,"./merge":130}],67:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactPropTypeLocationNames\n */\n\n"use strict";\n\nvar ReactPropTypeLocationNames \x3d {};\n\nif ("production" !\x3d\x3d "development") {\n  ReactPropTypeLocationNames \x3d {\n    prop: \'prop\',\n    context: \'context\',\n    childContext: \'child context\'\n  };\n}\n\nmodule.exports \x3d ReactPropTypeLocationNames;\n\n},{}],68:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactPropTypeLocations\n */\n\n"use strict";\n\nvar keyMirror \x3d _dereq_("./keyMirror");\n\nvar ReactPropTypeLocations \x3d keyMirror({\n  prop: null,\n  context: null,\n  childContext: null\n});\n\nmodule.exports \x3d ReactPropTypeLocations;\n\n},{"./keyMirror":126}],69:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactPropTypes\n */\n\n"use strict";\n\nvar ReactDescriptor \x3d _dereq_("./ReactDescriptor");\nvar ReactPropTypeLocationNames \x3d _dereq_("./ReactPropTypeLocationNames");\n\nvar emptyFunction \x3d _dereq_("./emptyFunction");\n\n/**\n * Collection of methods that allow declaration and validation of props that are\n * supplied to React components. Example usage:\n *\n *   var Props \x3d require(\'ReactPropTypes\');\n *   var MyArticle \x3d React.createClass({\n *     propTypes: {\n *       // An optional string prop named "description".\n *       description: Props.string,\n *\n *       // A required enum prop named "category".\n *       category: Props.oneOf([\'News\',\'Photos\']).isRequired,\n *\n *       // A prop named "dialog" that requires an instance of Dialog.\n *       dialog: Props.instanceOf(Dialog).isRequired\n *     },\n *     render: function() { ... }\n *   });\n *\n * A more formal specification of how these methods are used:\n *\n *   type :\x3d array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n *   decl :\x3d ReactPropTypes.{type}(.isRequired)?\n *\n * Each and every declaration produces a function with the same signature. This\n * allows the creation of custom validation functions. For example:\n *\n *  var MyLink \x3d React.createClass({\n *    propTypes: {\n *      // An optional string or URI prop named "href".\n *      href: function(props, propName, componentName) {\n *        var propValue \x3d props[propName];\n *        if (propValue !\x3d null \x26\x26 typeof propValue !\x3d\x3d \'string\' \x26\x26\n *            !(propValue instanceof URI)) {\n *          return new Error(\n *            \'Expected a string or an URI for \' + propName + \' in \' +\n *            componentName\n *          );\n *        }\n *      }\n *    },\n *    render: function() {...}\n *  });\n *\n * @internal\n */\n\nvar ANONYMOUS \x3d \'\x3c\x3canonymous\x3e\x3e\';\n\nvar ReactPropTypes \x3d {\n  array: createPrimitiveTypeChecker(\'array\'),\n  bool: createPrimitiveTypeChecker(\'boolean\'),\n  func: createPrimitiveTypeChecker(\'function\'),\n  number: createPrimitiveTypeChecker(\'number\'),\n  object: createPrimitiveTypeChecker(\'object\'),\n  string: createPrimitiveTypeChecker(\'string\'),\n\n  any: createAnyTypeChecker(),\n  arrayOf: createArrayOfTypeChecker,\n  component: createComponentTypeChecker(),\n  instanceOf: createInstanceTypeChecker,\n  objectOf: createObjectOfTypeChecker,\n  oneOf: createEnumTypeChecker,\n  oneOfType: createUnionTypeChecker,\n  renderable: createRenderableTypeChecker(),\n  shape: createShapeTypeChecker\n};\n\nfunction createChainableTypeChecker(validate) {\n  function checkType(isRequired, props, propName, componentName, location) {\n    componentName \x3d componentName || ANONYMOUS;\n    if (props[propName] \x3d\x3d null) {\n      var locationName \x3d ReactPropTypeLocationNames[location];\n      if (isRequired) {\n        return new Error(\n          ("Required " + locationName + " `" + propName + "` was not specified in ")+\n          ("`" + componentName + "`.")\n        );\n      }\n    } else {\n      return validate(props, propName, componentName, location);\n    }\n  }\n\n  var chainedCheckType \x3d checkType.bind(null, false);\n  chainedCheckType.isRequired \x3d checkType.bind(null, true);\n\n  return chainedCheckType;\n}\n\nfunction createPrimitiveTypeChecker(expectedType) {\n  function validate(props, propName, componentName, location) {\n    var propValue \x3d props[propName];\n    var propType \x3d getPropType(propValue);\n    if (propType !\x3d\x3d expectedType) {\n      var locationName \x3d ReactPropTypeLocationNames[location];\n      // `propValue` being instance of, say, date/regexp, pass the \'object\'\n      // check, but we can offer a more precise error message here rather than\n      // \'of type `object`\'.\n      var preciseType \x3d getPreciseType(propValue);\n\n      return new Error(\n        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +\n        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")\n      );\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createAnyTypeChecker() {\n  return createChainableTypeChecker(emptyFunction.thatReturns());\n}\n\nfunction createArrayOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location) {\n    var propValue \x3d props[propName];\n    if (!Array.isArray(propValue)) {\n      var locationName \x3d ReactPropTypeLocationNames[location];\n      var propType \x3d getPropType(propValue);\n      return new Error(\n        ("Invalid " + locationName + " `" + propName + "` of type ") +\n        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")\n      );\n    }\n    for (var i \x3d 0; i \x3c propValue.length; i++) {\n      var error \x3d typeChecker(propValue, i, componentName, location);\n      if (error instanceof Error) {\n        return error;\n      }\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createComponentTypeChecker() {\n  function validate(props, propName, componentName, location) {\n    if (!ReactDescriptor.isValidDescriptor(props[propName])) {\n      var locationName \x3d ReactPropTypeLocationNames[location];\n      return new Error(\n        ("Invalid " + locationName + " `" + propName + "` supplied to ") +\n        ("`" + componentName + "`, expected a React component.")\n      );\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createInstanceTypeChecker(expectedClass) {\n  function validate(props, propName, componentName, location) {\n    if (!(props[propName] instanceof expectedClass)) {\n      var locationName \x3d ReactPropTypeLocationNames[location];\n      var expectedClassName \x3d expectedClass.name || ANONYMOUS;\n      return new Error(\n        ("Invalid " + locationName + " `" + propName + "` supplied to ") +\n        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")\n      );\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createEnumTypeChecker(expectedValues) {\n  function validate(props, propName, componentName, location) {\n    var propValue \x3d props[propName];\n    for (var i \x3d 0; i \x3c expectedValues.length; i++) {\n      if (propValue \x3d\x3d\x3d expectedValues[i]) {\n        return;\n      }\n    }\n\n    var locationName \x3d ReactPropTypeLocationNames[location];\n    var valuesString \x3d JSON.stringify(expectedValues);\n    return new Error(\n      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +\n      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")\n    );\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createObjectOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location) {\n    var propValue \x3d props[propName];\n    var propType \x3d getPropType(propValue);\n    if (propType !\x3d\x3d \'object\') {\n      var locationName \x3d ReactPropTypeLocationNames[location];\n      return new Error(\n        ("Invalid " + locationName + " `" + propName + "` of type ") +\n        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")\n      );\n    }\n    for (var key in propValue) {\n      if (propValue.hasOwnProperty(key)) {\n        var error \x3d typeChecker(propValue, key, componentName, location);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {\n  function validate(props, propName, componentName, location) {\n    for (var i \x3d 0; i \x3c arrayOfTypeCheckers.length; i++) {\n      var checker \x3d arrayOfTypeCheckers[i];\n      if (checker(props, propName, componentName, location) \x3d\x3d null) {\n        return;\n      }\n    }\n\n    var locationName \x3d ReactPropTypeLocationNames[location];\n    return new Error(\n      ("Invalid " + locationName + " `" + propName + "` supplied to ") +\n      ("`" + componentName + "`.")\n    );\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createRenderableTypeChecker() {\n  function validate(props, propName, componentName, location) {\n    if (!isRenderable(props[propName])) {\n      var locationName \x3d ReactPropTypeLocationNames[location];\n      return new Error(\n        ("Invalid " + locationName + " `" + propName + "` supplied to ") +\n        ("`" + componentName + "`, expected a renderable prop.")\n      );\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createShapeTypeChecker(shapeTypes) {\n  function validate(props, propName, componentName, location) {\n    var propValue \x3d props[propName];\n    var propType \x3d getPropType(propValue);\n    if (propType !\x3d\x3d \'object\') {\n      var locationName \x3d ReactPropTypeLocationNames[location];\n      return new Error(\n        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +\n        ("supplied to `" + componentName + "`, expected `object`.")\n      );\n    }\n    for (var key in shapeTypes) {\n      var checker \x3d shapeTypes[key];\n      if (!checker) {\n        continue;\n      }\n      var error \x3d checker(propValue, key, componentName, location);\n      if (error) {\n        return error;\n      }\n    }\n  }\n  return createChainableTypeChecker(validate, \'expected `object`\');\n}\n\nfunction isRenderable(propValue) {\n  switch(typeof propValue) {\n    // TODO: this was probably written with the assumption that we\'re not\n    // returning `this.props.component` directly from `render`. This is\n    // currently not supported but we should, to make it consistent.\n    case \'number\':\n    case \'string\':\n      return true;\n    case \'boolean\':\n      return !propValue;\n    case \'object\':\n      if (Array.isArray(propValue)) {\n        return propValue.every(isRenderable);\n      }\n      if (ReactDescriptor.isValidDescriptor(propValue)) {\n        return true;\n      }\n      for (var k in propValue) {\n        if (!isRenderable(propValue[k])) {\n          return false;\n        }\n      }\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Equivalent of `typeof` but with special handling for array and regexp.\nfunction getPropType(propValue) {\n  var propType \x3d typeof propValue;\n  if (Array.isArray(propValue)) {\n    return \'array\';\n  }\n  if (propValue instanceof RegExp) {\n    // Old webkits (at least until Android 4.0) return \'function\' rather than\n    // \'object\' for typeof a RegExp. We\'ll normalize this here so that /bla/\n    // passes PropTypes.object.\n    return \'object\';\n  }\n  return propType;\n}\n\n// This handles more types than `getPropType`. Only used for error messages.\n// See `createPrimitiveTypeChecker`.\nfunction getPreciseType(propValue) {\n  var propType \x3d getPropType(propValue);\n  if (propType \x3d\x3d\x3d \'object\') {\n    if (propValue instanceof Date) {\n      return \'date\';\n    } else if (propValue instanceof RegExp) {\n      return \'regexp\';\n    }\n  }\n  return propType;\n}\n\nmodule.exports \x3d ReactPropTypes;\n\n},{"./ReactDescriptor":51,"./ReactPropTypeLocationNames":67,"./emptyFunction":102}],70:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactPutListenerQueue\n */\n\n"use strict";\n\nvar PooledClass \x3d _dereq_("./PooledClass");\nvar ReactBrowserEventEmitter \x3d _dereq_("./ReactBrowserEventEmitter");\n\nvar mixInto \x3d _dereq_("./mixInto");\n\nfunction ReactPutListenerQueue() {\n  this.listenersToPut \x3d [];\n}\n\nmixInto(ReactPutListenerQueue, {\n  enqueuePutListener: function(rootNodeID, propKey, propValue) {\n    this.listenersToPut.push({\n      rootNodeID: rootNodeID,\n      propKey: propKey,\n      propValue: propValue\n    });\n  },\n\n  putListeners: function() {\n    for (var i \x3d 0; i \x3c this.listenersToPut.length; i++) {\n      var listenerToPut \x3d this.listenersToPut[i];\n      ReactBrowserEventEmitter.putListener(\n        listenerToPut.rootNodeID,\n        listenerToPut.propKey,\n        listenerToPut.propValue\n      );\n    }\n  },\n\n  reset: function() {\n    this.listenersToPut.length \x3d 0;\n  },\n\n  destructor: function() {\n    this.reset();\n  }\n});\n\nPooledClass.addPoolingTo(ReactPutListenerQueue);\n\nmodule.exports \x3d ReactPutListenerQueue;\n\n},{"./PooledClass":26,"./ReactBrowserEventEmitter":29,"./mixInto":133}],71:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n\n"use strict";\n\nvar CallbackQueue \x3d _dereq_("./CallbackQueue");\nvar PooledClass \x3d _dereq_("./PooledClass");\nvar ReactBrowserEventEmitter \x3d _dereq_("./ReactBrowserEventEmitter");\nvar ReactInputSelection \x3d _dereq_("./ReactInputSelection");\nvar ReactPutListenerQueue \x3d _dereq_("./ReactPutListenerQueue");\nvar Transaction \x3d _dereq_("./Transaction");\n\nvar mixInto \x3d _dereq_("./mixInto");\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION \x3d {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION \x3d {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function() {\n    var currentlyEnabled \x3d ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`\n   *   restores the previous value.\n   */\n  close: function(previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the the transaction.\n */\nvar ON_DOM_READY_QUEUEING \x3d {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function() {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function() {\n    this.reactMountReady.notifyAll();\n  }\n};\n\nvar PUT_LISTENER_QUEUEING \x3d {\n  initialize: function() {\n    this.putListenerQueue.reset();\n  },\n\n  close: function() {\n    this.putListenerQueue.putListeners();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS \x3d [\n  PUT_LISTENER_QUEUEING,\n  SELECTION_RESTORATION,\n  EVENT_SUPPRESSION,\n  ON_DOM_READY_QUEUEING\n];\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction() {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it\'s\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup \x3d false;\n  this.reactMountReady \x3d CallbackQueue.getPooled(null);\n  this.putListenerQueue \x3d ReactPutListenerQueue.getPooled();\n}\n\nvar Mixin \x3d {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array\x3cobject\x3e} List of operation wrap proceedures.\n   *   TODO: convert to array\x3cTransactionWrapper\x3e\n   */\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function() {\n    return this.reactMountReady;\n  },\n\n  getPutListenerQueue: function() {\n    return this.putListenerQueue;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be resused.\n   */\n  destructor: function() {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady \x3d null;\n\n    ReactPutListenerQueue.release(this.putListenerQueue);\n    this.putListenerQueue \x3d null;\n  }\n};\n\n\nmixInto(ReactReconcileTransaction, Transaction.Mixin);\nmixInto(ReactReconcileTransaction, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports \x3d ReactReconcileTransaction;\n\n},{"./CallbackQueue":5,"./PooledClass":26,"./ReactBrowserEventEmitter":29,"./ReactInputSelection":58,"./ReactPutListenerQueue":70,"./Transaction":92,"./mixInto":133}],72:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactRootIndex\n * @typechecks\n */\n\n"use strict";\n\nvar ReactRootIndexInjection \x3d {\n  /**\n   * @param {function} _createReactRootIndex\n   */\n  injectCreateReactRootIndex: function(_createReactRootIndex) {\n    ReactRootIndex.createReactRootIndex \x3d _createReactRootIndex;\n  }\n};\n\nvar ReactRootIndex \x3d {\n  createReactRootIndex: null,\n  injection: ReactRootIndexInjection\n};\n\nmodule.exports \x3d ReactRootIndex;\n\n},{}],73:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n"use strict";\n\nvar ReactDescriptor \x3d _dereq_("./ReactDescriptor");\nvar ReactInstanceHandles \x3d _dereq_("./ReactInstanceHandles");\nvar ReactMarkupChecksum \x3d _dereq_("./ReactMarkupChecksum");\nvar ReactServerRenderingTransaction \x3d\n  _dereq_("./ReactServerRenderingTransaction");\n\nvar instantiateReactComponent \x3d _dereq_("./instantiateReactComponent");\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * @param {ReactComponent} component\n * @return {string} the HTML markup\n */\nfunction renderComponentToString(component) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    ReactDescriptor.isValidDescriptor(component),\n    \'renderComponentToString(): You must pass a valid ReactComponent.\'\n  ) : invariant(ReactDescriptor.isValidDescriptor(component)));\n\n  ("production" !\x3d\x3d "development" ? invariant(\n    !(arguments.length \x3d\x3d\x3d 2 \x26\x26 typeof arguments[1] \x3d\x3d\x3d \'function\'),\n    \'renderComponentToString(): This function became synchronous and now \' +\n    \'returns the generated markup. Please remove the second parameter.\'\n  ) : invariant(!(arguments.length \x3d\x3d\x3d 2 \x26\x26 typeof arguments[1] \x3d\x3d\x3d \'function\')));\n\n  var transaction;\n  try {\n    var id \x3d ReactInstanceHandles.createReactRootID();\n    transaction \x3d ReactServerRenderingTransaction.getPooled(false);\n\n    return transaction.perform(function() {\n      var componentInstance \x3d instantiateReactComponent(component);\n      var markup \x3d componentInstance.mountComponent(id, transaction, 0);\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n  }\n}\n\n/**\n * @param {ReactComponent} component\n * @return {string} the HTML markup, without the extra React ID and checksum\n* (for generating static pages)\n */\nfunction renderComponentToStaticMarkup(component) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    ReactDescriptor.isValidDescriptor(component),\n    \'renderComponentToStaticMarkup(): You must pass a valid ReactComponent.\'\n  ) : invariant(ReactDescriptor.isValidDescriptor(component)));\n\n  var transaction;\n  try {\n    var id \x3d ReactInstanceHandles.createReactRootID();\n    transaction \x3d ReactServerRenderingTransaction.getPooled(true);\n\n    return transaction.perform(function() {\n      var componentInstance \x3d instantiateReactComponent(component);\n      return componentInstance.mountComponent(id, transaction, 0);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n  }\n}\n\nmodule.exports \x3d {\n  renderComponentToString: renderComponentToString,\n  renderComponentToStaticMarkup: renderComponentToStaticMarkup\n};\n\n},{"./ReactDescriptor":51,"./ReactInstanceHandles":59,"./ReactMarkupChecksum":60,"./ReactServerRenderingTransaction":74,"./instantiateReactComponent":119,"./invariant":120}],74:[function(_dereq_,module,exports){\n/**\n * Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactServerRenderingTransaction\n * @typechecks\n */\n\n"use strict";\n\nvar PooledClass \x3d _dereq_("./PooledClass");\nvar CallbackQueue \x3d _dereq_("./CallbackQueue");\nvar ReactPutListenerQueue \x3d _dereq_("./ReactPutListenerQueue");\nvar Transaction \x3d _dereq_("./Transaction");\n\nvar emptyFunction \x3d _dereq_("./emptyFunction");\nvar mixInto \x3d _dereq_("./mixInto");\n\n/**\n * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks\n * during the performing of the transaction.\n */\nvar ON_DOM_READY_QUEUEING \x3d {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function() {\n    this.reactMountReady.reset();\n  },\n\n  close: emptyFunction\n};\n\nvar PUT_LISTENER_QUEUEING \x3d {\n  initialize: function() {\n    this.putListenerQueue.reset();\n  },\n\n  close: emptyFunction\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS \x3d [\n  PUT_LISTENER_QUEUEING,\n  ON_DOM_READY_QUEUEING\n];\n\n/**\n * @class ReactServerRenderingTransaction\n * @param {boolean} renderToStaticMarkup\n */\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {\n  this.reinitializeTransaction();\n  this.renderToStaticMarkup \x3d renderToStaticMarkup;\n  this.reactMountReady \x3d CallbackQueue.getPooled(null);\n  this.putListenerQueue \x3d ReactPutListenerQueue.getPooled();\n}\n\nvar Mixin \x3d {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array} Empty list of operation wrap proceedures.\n   */\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function() {\n    return this.reactMountReady;\n  },\n\n  getPutListenerQueue: function() {\n    return this.putListenerQueue;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be resused.\n   */\n  destructor: function() {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady \x3d null;\n\n    ReactPutListenerQueue.release(this.putListenerQueue);\n    this.putListenerQueue \x3d null;\n  }\n};\n\n\nmixInto(ReactServerRenderingTransaction, Transaction.Mixin);\nmixInto(ReactServerRenderingTransaction, Mixin);\n\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);\n\nmodule.exports \x3d ReactServerRenderingTransaction;\n\n},{"./CallbackQueue":5,"./PooledClass":26,"./ReactPutListenerQueue":70,"./Transaction":92,"./emptyFunction":102,"./mixInto":133}],75:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactTextComponent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar DOMPropertyOperations \x3d _dereq_("./DOMPropertyOperations");\nvar ReactBrowserComponentMixin \x3d _dereq_("./ReactBrowserComponentMixin");\nvar ReactComponent \x3d _dereq_("./ReactComponent");\nvar ReactDescriptor \x3d _dereq_("./ReactDescriptor");\n\nvar escapeTextForBrowser \x3d _dereq_("./escapeTextForBrowser");\nvar mixInto \x3d _dereq_("./mixInto");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactTextComponent \x3d function(descriptor) {\n  this.construct(descriptor);\n};\n\nmixInto(ReactTextComponent, ReactComponent.Mixin);\nmixInto(ReactTextComponent, ReactBrowserComponentMixin);\nmixInto(ReactTextComponent, {\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(\n      this,\n      rootID,\n      transaction,\n      mountDepth\n    );\n\n    var escapedText \x3d escapeTextForBrowser(this.props);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we\'d wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won\'t take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return (\n      \'\x3cspan \' + DOMPropertyOperations.createMarkupForID(rootID) + \'\x3e\' +\n        escapedText +\n      \'\x3c/span\x3e\'\n    );\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {object} nextComponent Contains the next text content.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function(nextComponent, transaction) {\n    var nextProps \x3d nextComponent.props;\n    if (nextProps !\x3d\x3d this.props) {\n      this.props \x3d nextProps;\n      ReactComponent.BackendIDOperations.updateTextContentByID(\n        this._rootNodeID,\n        nextProps\n      );\n    }\n  }\n\n});\n\nmodule.exports \x3d ReactDescriptor.createFactory(ReactTextComponent);\n\n},{"./DOMPropertyOperations":11,"./ReactBrowserComponentMixin":28,"./ReactComponent":31,"./ReactDescriptor":51,"./escapeTextForBrowser":104,"./mixInto":133}],76:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactUpdates\n */\n\n"use strict";\n\nvar CallbackQueue \x3d _dereq_("./CallbackQueue");\nvar PooledClass \x3d _dereq_("./PooledClass");\nvar ReactCurrentOwner \x3d _dereq_("./ReactCurrentOwner");\nvar ReactPerf \x3d _dereq_("./ReactPerf");\nvar Transaction \x3d _dereq_("./Transaction");\n\nvar invariant \x3d _dereq_("./invariant");\nvar mixInto \x3d _dereq_("./mixInto");\nvar warning \x3d _dereq_("./warning");\n\nvar dirtyComponents \x3d [];\n\nvar batchingStrategy \x3d null;\n\nfunction ensureInjected() {\n  ("production" !\x3d\x3d "development" ? invariant(\n    ReactUpdates.ReactReconcileTransaction \x26\x26 batchingStrategy,\n    \'ReactUpdates: must inject a reconcile transaction class and batching \' +\n    \'strategy\'\n  ) : invariant(ReactUpdates.ReactReconcileTransaction \x26\x26 batchingStrategy));\n}\n\nvar NESTED_UPDATES \x3d {\n  initialize: function() {\n    this.dirtyComponentsLength \x3d dirtyComponents.length;\n  },\n  close: function() {\n    if (this.dirtyComponentsLength !\x3d\x3d dirtyComponents.length) {\n      // Additional updates were enqueued by componentDidUpdate handlers or\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run\n      // these new updates so that if A\'s componentDidUpdate calls setState on\n      // B, B will update before the callback A\'s updater provided when calling\n      // setState.\n      dirtyComponents.splice(0, this.dirtyComponentsLength);\n      flushBatchedUpdates();\n    } else {\n      dirtyComponents.length \x3d 0;\n    }\n  }\n};\n\nvar UPDATE_QUEUEING \x3d {\n  initialize: function() {\n    this.callbackQueue.reset();\n  },\n  close: function() {\n    this.callbackQueue.notifyAll();\n  }\n};\n\nvar TRANSACTION_WRAPPERS \x3d [NESTED_UPDATES, UPDATE_QUEUEING];\n\nfunction ReactUpdatesFlushTransaction() {\n  this.reinitializeTransaction();\n  this.dirtyComponentsLength \x3d null;\n  this.callbackQueue \x3d CallbackQueue.getPooled(null);\n  this.reconcileTransaction \x3d\n    ReactUpdates.ReactReconcileTransaction.getPooled();\n}\n\nmixInto(ReactUpdatesFlushTransaction, Transaction.Mixin);\nmixInto(ReactUpdatesFlushTransaction, {\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  destructor: function() {\n    this.dirtyComponentsLength \x3d null;\n    CallbackQueue.release(this.callbackQueue);\n    this.callbackQueue \x3d null;\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);\n    this.reconcileTransaction \x3d null;\n  },\n\n  perform: function(method, scope, a) {\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`\n    // with this transaction\'s wrappers around it.\n    return Transaction.Mixin.perform.call(\n      this,\n      this.reconcileTransaction.perform,\n      this.reconcileTransaction,\n      method,\n      scope,\n      a\n    );\n  }\n});\n\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);\n\nfunction batchedUpdates(callback, a, b) {\n  ensureInjected();\n  batchingStrategy.batchedUpdates(callback, a, b);\n}\n\n/**\n * Array comparator for ReactComponents by owner depth\n *\n * @param {ReactComponent} c1 first component you\'re comparing\n * @param {ReactComponent} c2 second component you\'re comparing\n * @return {number} Return value usable by Array.prototype.sort().\n */\nfunction mountDepthComparator(c1, c2) {\n  return c1._mountDepth - c2._mountDepth;\n}\n\nfunction runBatchedUpdates(transaction) {\n  var len \x3d transaction.dirtyComponentsLength;\n  ("production" !\x3d\x3d "development" ? invariant(\n    len \x3d\x3d\x3d dirtyComponents.length,\n    \'Expected flush transaction\\\'s stored dirty-components length (%s) to \' +\n    \'match dirty-components array length (%s).\',\n    len,\n    dirtyComponents.length\n  ) : invariant(len \x3d\x3d\x3d dirtyComponents.length));\n\n  // Since reconciling a component higher in the owner hierarchy usually (not\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n  // them before their children by sorting the array.\n  dirtyComponents.sort(mountDepthComparator);\n\n  for (var i \x3d 0; i \x3c len; i++) {\n    // If a component is unmounted before pending changes apply, ignore them\n    // TODO: Queue unmounts in the same list to avoid this happening at all\n    var component \x3d dirtyComponents[i];\n    if (component.isMounted()) {\n      // If performUpdateIfNecessary happens to enqueue any new updates, we\n      // shouldn\'t execute the callbacks until the next render happens, so\n      // stash the callbacks first\n      var callbacks \x3d component._pendingCallbacks;\n      component._pendingCallbacks \x3d null;\n      component.performUpdateIfNecessary(transaction.reconcileTransaction);\n\n      if (callbacks) {\n        for (var j \x3d 0; j \x3c callbacks.length; j++) {\n          transaction.callbackQueue.enqueue(\n            callbacks[j],\n            component\n          );\n        }\n      }\n    }\n  }\n}\n\nvar flushBatchedUpdates \x3d ReactPerf.measure(\n  \'ReactUpdates\',\n  \'flushBatchedUpdates\',\n  function() {\n    // ReactUpdatesFlushTransaction\'s wrappers will clear the dirtyComponents\n    // array and perform any updates enqueued by mount-ready handlers (i.e.,\n    // componentDidUpdate) but we need to check here too in order to catch\n    // updates enqueued by setState callbacks.\n    while (dirtyComponents.length) {\n      var transaction \x3d ReactUpdatesFlushTransaction.getPooled();\n      transaction.perform(runBatchedUpdates, null, transaction);\n      ReactUpdatesFlushTransaction.release(transaction);\n    }\n  }\n);\n\n/**\n * Mark a component as needing a rerender, adding an optional callback to a\n * list of functions which will be executed once the rerender occurs.\n */\nfunction enqueueUpdate(component, callback) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    !callback || typeof callback \x3d\x3d\x3d "function",\n    \'enqueueUpdate(...): You called `setProps`, `replaceProps`, \' +\n    \'`setState`, `replaceState`, or `forceUpdate` with a callback that \' +\n    \'isn\\\'t callable.\'\n  ) : invariant(!callback || typeof callback \x3d\x3d\x3d "function"));\n  ensureInjected();\n\n  // Various parts of our code (such as ReactCompositeComponent\'s\n  // _renderValidatedComponent) assume that calls to render aren\'t nested;\n  // verify that that\'s the case. (This is called by each top-level update\n  // function, like setProps, setState, forceUpdate, etc.; creation and\n  // destruction of top-level components is guarded in ReactMount.)\n  ("production" !\x3d\x3d "development" ? warning(\n    ReactCurrentOwner.current \x3d\x3d null,\n    \'enqueueUpdate(): Render methods should be a pure function of props \' +\n    \'and state; triggering nested component updates from render is not \' +\n    \'allowed. If necessary, trigger nested updates in \' +\n    \'componentDidUpdate.\'\n  ) : null);\n\n  if (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);\n    return;\n  }\n\n  dirtyComponents.push(component);\n\n  if (callback) {\n    if (component._pendingCallbacks) {\n      component._pendingCallbacks.push(callback);\n    } else {\n      component._pendingCallbacks \x3d [callback];\n    }\n  }\n}\n\nvar ReactUpdatesInjection \x3d {\n  injectReconcileTransaction: function(ReconcileTransaction) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      ReconcileTransaction,\n      \'ReactUpdates: must provide a reconcile transaction class\'\n    ) : invariant(ReconcileTransaction));\n    ReactUpdates.ReactReconcileTransaction \x3d ReconcileTransaction;\n  },\n\n  injectBatchingStrategy: function(_batchingStrategy) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      _batchingStrategy,\n      \'ReactUpdates: must provide a batching strategy\'\n    ) : invariant(_batchingStrategy));\n    ("production" !\x3d\x3d "development" ? invariant(\n      typeof _batchingStrategy.batchedUpdates \x3d\x3d\x3d \'function\',\n      \'ReactUpdates: must provide a batchedUpdates() function\'\n    ) : invariant(typeof _batchingStrategy.batchedUpdates \x3d\x3d\x3d \'function\'));\n    ("production" !\x3d\x3d "development" ? invariant(\n      typeof _batchingStrategy.isBatchingUpdates \x3d\x3d\x3d \'boolean\',\n      \'ReactUpdates: must provide an isBatchingUpdates boolean attribute\'\n    ) : invariant(typeof _batchingStrategy.isBatchingUpdates \x3d\x3d\x3d \'boolean\'));\n    batchingStrategy \x3d _batchingStrategy;\n  }\n};\n\nvar ReactUpdates \x3d {\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  batchedUpdates: batchedUpdates,\n  enqueueUpdate: enqueueUpdate,\n  flushBatchedUpdates: flushBatchedUpdates,\n  injection: ReactUpdatesInjection\n};\n\nmodule.exports \x3d ReactUpdates;\n\n},{"./CallbackQueue":5,"./PooledClass":26,"./ReactCurrentOwner":35,"./ReactPerf":65,"./Transaction":92,"./invariant":120,"./mixInto":133,"./warning":143}],77:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SVGDOMPropertyConfig\n */\n\n/*jslint bitwise: true*/\n\n"use strict";\n\nvar DOMProperty \x3d _dereq_("./DOMProperty");\n\nvar MUST_USE_ATTRIBUTE \x3d DOMProperty.injection.MUST_USE_ATTRIBUTE;\n\nvar SVGDOMPropertyConfig \x3d {\n  Properties: {\n    cx: MUST_USE_ATTRIBUTE,\n    cy: MUST_USE_ATTRIBUTE,\n    d: MUST_USE_ATTRIBUTE,\n    dx: MUST_USE_ATTRIBUTE,\n    dy: MUST_USE_ATTRIBUTE,\n    fill: MUST_USE_ATTRIBUTE,\n    fillOpacity: MUST_USE_ATTRIBUTE,\n    fontFamily: MUST_USE_ATTRIBUTE,\n    fontSize: MUST_USE_ATTRIBUTE,\n    fx: MUST_USE_ATTRIBUTE,\n    fy: MUST_USE_ATTRIBUTE,\n    gradientTransform: MUST_USE_ATTRIBUTE,\n    gradientUnits: MUST_USE_ATTRIBUTE,\n    markerEnd: MUST_USE_ATTRIBUTE,\n    markerMid: MUST_USE_ATTRIBUTE,\n    markerStart: MUST_USE_ATTRIBUTE,\n    offset: MUST_USE_ATTRIBUTE,\n    opacity: MUST_USE_ATTRIBUTE,\n    patternContentUnits: MUST_USE_ATTRIBUTE,\n    patternUnits: MUST_USE_ATTRIBUTE,\n    points: MUST_USE_ATTRIBUTE,\n    preserveAspectRatio: MUST_USE_ATTRIBUTE,\n    r: MUST_USE_ATTRIBUTE,\n    rx: MUST_USE_ATTRIBUTE,\n    ry: MUST_USE_ATTRIBUTE,\n    spreadMethod: MUST_USE_ATTRIBUTE,\n    stopColor: MUST_USE_ATTRIBUTE,\n    stopOpacity: MUST_USE_ATTRIBUTE,\n    stroke: MUST_USE_ATTRIBUTE,\n    strokeDasharray: MUST_USE_ATTRIBUTE,\n    strokeLinecap: MUST_USE_ATTRIBUTE,\n    strokeOpacity: MUST_USE_ATTRIBUTE,\n    strokeWidth: MUST_USE_ATTRIBUTE,\n    textAnchor: MUST_USE_ATTRIBUTE,\n    transform: MUST_USE_ATTRIBUTE,\n    version: MUST_USE_ATTRIBUTE,\n    viewBox: MUST_USE_ATTRIBUTE,\n    x1: MUST_USE_ATTRIBUTE,\n    x2: MUST_USE_ATTRIBUTE,\n    x: MUST_USE_ATTRIBUTE,\n    y1: MUST_USE_ATTRIBUTE,\n    y2: MUST_USE_ATTRIBUTE,\n    y: MUST_USE_ATTRIBUTE\n  },\n  DOMAttributeNames: {\n    fillOpacity: \'fill-opacity\',\n    fontFamily: \'font-family\',\n    fontSize: \'font-size\',\n    gradientTransform: \'gradientTransform\',\n    gradientUnits: \'gradientUnits\',\n    markerEnd: \'marker-end\',\n    markerMid: \'marker-mid\',\n    markerStart: \'marker-start\',\n    patternContentUnits: \'patternContentUnits\',\n    patternUnits: \'patternUnits\',\n    preserveAspectRatio: \'preserveAspectRatio\',\n    spreadMethod: \'spreadMethod\',\n    stopColor: \'stop-color\',\n    stopOpacity: \'stop-opacity\',\n    strokeDasharray: \'stroke-dasharray\',\n    strokeLinecap: \'stroke-linecap\',\n    strokeOpacity: \'stroke-opacity\',\n    strokeWidth: \'stroke-width\',\n    textAnchor: \'text-anchor\',\n    viewBox: \'viewBox\'\n  }\n};\n\nmodule.exports \x3d SVGDOMPropertyConfig;\n\n},{"./DOMProperty":10}],78:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SelectEventPlugin\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\nvar EventPropagators \x3d _dereq_("./EventPropagators");\nvar ReactInputSelection \x3d _dereq_("./ReactInputSelection");\nvar SyntheticEvent \x3d _dereq_("./SyntheticEvent");\n\nvar getActiveElement \x3d _dereq_("./getActiveElement");\nvar isTextInputElement \x3d _dereq_("./isTextInputElement");\nvar keyOf \x3d _dereq_("./keyOf");\nvar shallowEqual \x3d _dereq_("./shallowEqual");\n\nvar topLevelTypes \x3d EventConstants.topLevelTypes;\n\nvar eventTypes \x3d {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onSelect: null}),\n      captured: keyOf({onSelectCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topContextMenu,\n      topLevelTypes.topFocus,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topMouseDown,\n      topLevelTypes.topMouseUp,\n      topLevelTypes.topSelectionChange\n    ]\n  }\n};\n\nvar activeElement \x3d null;\nvar activeElementID \x3d null;\nvar lastSelection \x3d null;\nvar mouseDown \x3d false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @param {object}\n */\nfunction getSelection(node) {\n  if (\'selectionStart\' in node \x26\x26\n      ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (document.selection) {\n    var range \x3d document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  } else {\n    var selection \x3d window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it\'s changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there\'s no focused element we\n  // won\'t dispatch.\n  if (mouseDown ||\n      activeElement \x3d\x3d null ||\n      activeElement !\x3d getActiveElement()) {\n    return;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection \x3d getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection \x3d currentSelection;\n\n    var syntheticEvent \x3d SyntheticEvent.getPooled(\n      eventTypes.select,\n      activeElementID,\n      nativeEvent\n    );\n\n    syntheticEvent.type \x3d \'select\';\n    syntheticEvent.target \x3d activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin \x3d {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) ||\n            topLevelTarget.contentEditable \x3d\x3d\x3d \'true\') {\n          activeElement \x3d topLevelTarget;\n          activeElementID \x3d topLevelTargetID;\n          lastSelection \x3d null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement \x3d null;\n        activeElementID \x3d null;\n        lastSelection \x3d null;\n        break;\n\n      // Don\'t fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown \x3d true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown \x3d false;\n        return constructSelectEvent(nativeEvent);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn\'t).\n      // Firefox doesn\'t support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      case topLevelTypes.topSelectionChange:\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent);\n    }\n  }\n};\n\nmodule.exports \x3d SelectEventPlugin;\n\n},{"./EventConstants":15,"./EventPropagators":20,"./ReactInputSelection":58,"./SyntheticEvent":84,"./getActiveElement":108,"./isTextInputElement":123,"./keyOf":127,"./shallowEqual":139}],79:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ServerReactRootIndex\n * @typechecks\n */\n\n"use strict";\n\n/**\n * Size of the reactRoot ID space. We generate random numbers for React root\n * IDs and if there\'s a collision the events and DOM update system will\n * get confused. In the future we need a way to generate GUIDs but for\n * now this will work on a smaller scale.\n */\nvar GLOBAL_MOUNT_POINT_MAX \x3d Math.pow(2, 53);\n\nvar ServerReactRootIndex \x3d {\n  createReactRootIndex: function() {\n    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);\n  }\n};\n\nmodule.exports \x3d ServerReactRootIndex;\n\n},{}],80:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SimpleEventPlugin\n */\n\n"use strict";\n\nvar EventConstants \x3d _dereq_("./EventConstants");\nvar EventPluginUtils \x3d _dereq_("./EventPluginUtils");\nvar EventPropagators \x3d _dereq_("./EventPropagators");\nvar SyntheticClipboardEvent \x3d _dereq_("./SyntheticClipboardEvent");\nvar SyntheticEvent \x3d _dereq_("./SyntheticEvent");\nvar SyntheticFocusEvent \x3d _dereq_("./SyntheticFocusEvent");\nvar SyntheticKeyboardEvent \x3d _dereq_("./SyntheticKeyboardEvent");\nvar SyntheticMouseEvent \x3d _dereq_("./SyntheticMouseEvent");\nvar SyntheticDragEvent \x3d _dereq_("./SyntheticDragEvent");\nvar SyntheticTouchEvent \x3d _dereq_("./SyntheticTouchEvent");\nvar SyntheticUIEvent \x3d _dereq_("./SyntheticUIEvent");\nvar SyntheticWheelEvent \x3d _dereq_("./SyntheticWheelEvent");\n\nvar invariant \x3d _dereq_("./invariant");\nvar keyOf \x3d _dereq_("./keyOf");\n\nvar topLevelTypes \x3d EventConstants.topLevelTypes;\n\nvar eventTypes \x3d {\n  blur: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onBlur: true}),\n      captured: keyOf({onBlurCapture: true})\n    }\n  },\n  click: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onClick: true}),\n      captured: keyOf({onClickCapture: true})\n    }\n  },\n  contextMenu: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onContextMenu: true}),\n      captured: keyOf({onContextMenuCapture: true})\n    }\n  },\n  copy: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCopy: true}),\n      captured: keyOf({onCopyCapture: true})\n    }\n  },\n  cut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCut: true}),\n      captured: keyOf({onCutCapture: true})\n    }\n  },\n  doubleClick: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDoubleClick: true}),\n      captured: keyOf({onDoubleClickCapture: true})\n    }\n  },\n  drag: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDrag: true}),\n      captured: keyOf({onDragCapture: true})\n    }\n  },\n  dragEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragEnd: true}),\n      captured: keyOf({onDragEndCapture: true})\n    }\n  },\n  dragEnter: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragEnter: true}),\n      captured: keyOf({onDragEnterCapture: true})\n    }\n  },\n  dragExit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragExit: true}),\n      captured: keyOf({onDragExitCapture: true})\n    }\n  },\n  dragLeave: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragLeave: true}),\n      captured: keyOf({onDragLeaveCapture: true})\n    }\n  },\n  dragOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragOver: true}),\n      captured: keyOf({onDragOverCapture: true})\n    }\n  },\n  dragStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragStart: true}),\n      captured: keyOf({onDragStartCapture: true})\n    }\n  },\n  drop: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDrop: true}),\n      captured: keyOf({onDropCapture: true})\n    }\n  },\n  focus: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onFocus: true}),\n      captured: keyOf({onFocusCapture: true})\n    }\n  },\n  input: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onInput: true}),\n      captured: keyOf({onInputCapture: true})\n    }\n  },\n  keyDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onKeyDown: true}),\n      captured: keyOf({onKeyDownCapture: true})\n    }\n  },\n  keyPress: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onKeyPress: true}),\n      captured: keyOf({onKeyPressCapture: true})\n    }\n  },\n  keyUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onKeyUp: true}),\n      captured: keyOf({onKeyUpCapture: true})\n    }\n  },\n  load: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onLoad: true}),\n      captured: keyOf({onLoadCapture: true})\n    }\n  },\n  error: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onError: true}),\n      captured: keyOf({onErrorCapture: true})\n    }\n  },\n  // Note: We do not allow listening to mouseOver events. Instead, use the\n  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.\n  mouseDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseDown: true}),\n      captured: keyOf({onMouseDownCapture: true})\n    }\n  },\n  mouseMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseMove: true}),\n      captured: keyOf({onMouseMoveCapture: true})\n    }\n  },\n  mouseOut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseOut: true}),\n      captured: keyOf({onMouseOutCapture: true})\n    }\n  },\n  mouseOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseOver: true}),\n      captured: keyOf({onMouseOverCapture: true})\n    }\n  },\n  mouseUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseUp: true}),\n      captured: keyOf({onMouseUpCapture: true})\n    }\n  },\n  paste: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onPaste: true}),\n      captured: keyOf({onPasteCapture: true})\n    }\n  },\n  reset: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onReset: true}),\n      captured: keyOf({onResetCapture: true})\n    }\n  },\n  scroll: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onScroll: true}),\n      captured: keyOf({onScrollCapture: true})\n    }\n  },\n  submit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onSubmit: true}),\n      captured: keyOf({onSubmitCapture: true})\n    }\n  },\n  touchCancel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchCancel: true}),\n      captured: keyOf({onTouchCancelCapture: true})\n    }\n  },\n  touchEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchEnd: true}),\n      captured: keyOf({onTouchEndCapture: true})\n    }\n  },\n  touchMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchMove: true}),\n      captured: keyOf({onTouchMoveCapture: true})\n    }\n  },\n  touchStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchStart: true}),\n      captured: keyOf({onTouchStartCapture: true})\n    }\n  },\n  wheel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onWheel: true}),\n      captured: keyOf({onWheelCapture: true})\n    }\n  }\n};\n\nvar topLevelEventsToDispatchConfig \x3d {\n  topBlur:        eventTypes.blur,\n  topClick:       eventTypes.click,\n  topContextMenu: eventTypes.contextMenu,\n  topCopy:        eventTypes.copy,\n  topCut:         eventTypes.cut,\n  topDoubleClick: eventTypes.doubleClick,\n  topDrag:        eventTypes.drag,\n  topDragEnd:     eventTypes.dragEnd,\n  topDragEnter:   eventTypes.dragEnter,\n  topDragExit:    eventTypes.dragExit,\n  topDragLeave:   eventTypes.dragLeave,\n  topDragOver:    eventTypes.dragOver,\n  topDragStart:   eventTypes.dragStart,\n  topDrop:        eventTypes.drop,\n  topError:       eventTypes.error,\n  topFocus:       eventTypes.focus,\n  topInput:       eventTypes.input,\n  topKeyDown:     eventTypes.keyDown,\n  topKeyPress:    eventTypes.keyPress,\n  topKeyUp:       eventTypes.keyUp,\n  topLoad:        eventTypes.load,\n  topMouseDown:   eventTypes.mouseDown,\n  topMouseMove:   eventTypes.mouseMove,\n  topMouseOut:    eventTypes.mouseOut,\n  topMouseOver:   eventTypes.mouseOver,\n  topMouseUp:     eventTypes.mouseUp,\n  topPaste:       eventTypes.paste,\n  topReset:       eventTypes.reset,\n  topScroll:      eventTypes.scroll,\n  topSubmit:      eventTypes.submit,\n  topTouchCancel: eventTypes.touchCancel,\n  topTouchEnd:    eventTypes.touchEnd,\n  topTouchMove:   eventTypes.touchMove,\n  topTouchStart:  eventTypes.touchStart,\n  topWheel:       eventTypes.wheel\n};\n\nfor (var topLevelType in topLevelEventsToDispatchConfig) {\n  topLevelEventsToDispatchConfig[topLevelType].dependencies \x3d [topLevelType];\n}\n\nvar SimpleEventPlugin \x3d {\n\n  eventTypes: eventTypes,\n\n  /**\n   * Same as the default implementation, except cancels the event when return\n   * value is false.\n   *\n   * @param {object} Event to be dispatched.\n   * @param {function} Application-level callback.\n   * @param {string} domID DOM ID to pass to the callback.\n   */\n  executeDispatch: function(event, listener, domID) {\n    var returnValue \x3d EventPluginUtils.executeDispatch(event, listener, domID);\n    if (returnValue \x3d\x3d\x3d false) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  },\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var dispatchConfig \x3d topLevelEventsToDispatchConfig[topLevelType];\n    if (!dispatchConfig) {\n      return null;\n    }\n    var EventConstructor;\n    switch (topLevelType) {\n      case topLevelTypes.topInput:\n      case topLevelTypes.topLoad:\n      case topLevelTypes.topError:\n      case topLevelTypes.topReset:\n      case topLevelTypes.topSubmit:\n        // HTML Events\n        // @see http://www.w3.org/TR/html5/index.html#events-0\n        EventConstructor \x3d SyntheticEvent;\n        break;\n      case topLevelTypes.topKeyPress:\n        // FireFox creates a keypress event for function keys too. This removes\n        // the unwanted keypress events.\n        if (nativeEvent.charCode \x3d\x3d\x3d 0) {\n          return null;\n        }\n        /* falls through */\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        EventConstructor \x3d SyntheticKeyboardEvent;\n        break;\n      case topLevelTypes.topBlur:\n      case topLevelTypes.topFocus:\n        EventConstructor \x3d SyntheticFocusEvent;\n        break;\n      case topLevelTypes.topClick:\n        // Firefox creates a click event on right mouse clicks. This removes the\n        // unwanted click events.\n        if (nativeEvent.button \x3d\x3d\x3d 2) {\n          return null;\n        }\n        /* falls through */\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topDoubleClick:\n      case topLevelTypes.topMouseDown:\n      case topLevelTypes.topMouseMove:\n      case topLevelTypes.topMouseOut:\n      case topLevelTypes.topMouseOver:\n      case topLevelTypes.topMouseUp:\n        EventConstructor \x3d SyntheticMouseEvent;\n        break;\n      case topLevelTypes.topDrag:\n      case topLevelTypes.topDragEnd:\n      case topLevelTypes.topDragEnter:\n      case topLevelTypes.topDragExit:\n      case topLevelTypes.topDragLeave:\n      case topLevelTypes.topDragOver:\n      case topLevelTypes.topDragStart:\n      case topLevelTypes.topDrop:\n        EventConstructor \x3d SyntheticDragEvent;\n        break;\n      case topLevelTypes.topTouchCancel:\n      case topLevelTypes.topTouchEnd:\n      case topLevelTypes.topTouchMove:\n      case topLevelTypes.topTouchStart:\n        EventConstructor \x3d SyntheticTouchEvent;\n        break;\n      case topLevelTypes.topScroll:\n        EventConstructor \x3d SyntheticUIEvent;\n        break;\n      case topLevelTypes.topWheel:\n        EventConstructor \x3d SyntheticWheelEvent;\n        break;\n      case topLevelTypes.topCopy:\n      case topLevelTypes.topCut:\n      case topLevelTypes.topPaste:\n        EventConstructor \x3d SyntheticClipboardEvent;\n        break;\n    }\n    ("production" !\x3d\x3d "development" ? invariant(\n      EventConstructor,\n      \'SimpleEventPlugin: Unhandled event type, `%s`.\',\n      topLevelType\n    ) : invariant(EventConstructor));\n    var event \x3d EventConstructor.getPooled(\n      dispatchConfig,\n      topLevelTargetID,\n      nativeEvent\n    );\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  }\n\n};\n\nmodule.exports \x3d SimpleEventPlugin;\n\n},{"./EventConstants":15,"./EventPluginUtils":19,"./EventPropagators":20,"./SyntheticClipboardEvent":81,"./SyntheticDragEvent":83,"./SyntheticEvent":84,"./SyntheticFocusEvent":85,"./SyntheticKeyboardEvent":87,"./SyntheticMouseEvent":88,"./SyntheticTouchEvent":89,"./SyntheticUIEvent":90,"./SyntheticWheelEvent":91,"./invariant":120,"./keyOf":127}],81:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticClipboardEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar SyntheticEvent \x3d _dereq_("./SyntheticEvent");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nvar ClipboardEventInterface \x3d {\n  clipboardData: function(event) {\n    return (\n      \'clipboardData\' in event ?\n        event.clipboardData :\n        window.clipboardData\n    );\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);\n\nmodule.exports \x3d SyntheticClipboardEvent;\n\n\n},{"./SyntheticEvent":84}],82:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticCompositionEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar SyntheticEvent \x3d _dereq_("./SyntheticEvent");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\nvar CompositionEventInterface \x3d {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticCompositionEvent(\n  dispatchConfig,\n  dispatchMarker,\n  nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(\n  SyntheticCompositionEvent,\n  CompositionEventInterface\n);\n\nmodule.exports \x3d SyntheticCompositionEvent;\n\n\n},{"./SyntheticEvent":84}],83:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticDragEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar SyntheticMouseEvent \x3d _dereq_("./SyntheticMouseEvent");\n\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar DragEventInterface \x3d {\n  dataTransfer: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);\n\nmodule.exports \x3d SyntheticDragEvent;\n\n},{"./SyntheticMouseEvent":88}],84:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar PooledClass \x3d _dereq_("./PooledClass");\n\nvar emptyFunction \x3d _dereq_("./emptyFunction");\nvar getEventTarget \x3d _dereq_("./getEventTarget");\nvar merge \x3d _dereq_("./merge");\nvar mergeInto \x3d _dereq_("./mergeInto");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar EventInterface \x3d {\n  type: null,\n  target: getEventTarget,\n  // currentTarget is set when dispatching; no use in copying it here\n  currentTarget: emptyFunction.thatReturnsNull,\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function(event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null\n};\n\n/**\n * Synthetic events are dispatched by event plugins, typically in response to a\n * top-level event delegation handler.\n *\n * These systems should generally use pooling to reduce the frequency of garbage\n * collection. The system should check `isPersistent` to determine whether the\n * event should be released into the pool after being dispatched. Users that\n * need a persisted event should invoke `persist`.\n *\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n * normalizing browser quirks. Subclasses do not necessarily have to implement a\n * DOM interface; custom application-specific events can also subclass this.\n *\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n */\nfunction SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  this.dispatchConfig \x3d dispatchConfig;\n  this.dispatchMarker \x3d dispatchMarker;\n  this.nativeEvent \x3d nativeEvent;\n\n  var Interface \x3d this.constructor.Interface;\n  for (var propName in Interface) {\n    if (!Interface.hasOwnProperty(propName)) {\n      continue;\n    }\n    var normalize \x3d Interface[propName];\n    if (normalize) {\n      this[propName] \x3d normalize(nativeEvent);\n    } else {\n      this[propName] \x3d nativeEvent[propName];\n    }\n  }\n\n  var defaultPrevented \x3d nativeEvent.defaultPrevented !\x3d null ?\n    nativeEvent.defaultPrevented :\n    nativeEvent.returnValue \x3d\x3d\x3d false;\n  if (defaultPrevented) {\n    this.isDefaultPrevented \x3d emptyFunction.thatReturnsTrue;\n  } else {\n    this.isDefaultPrevented \x3d emptyFunction.thatReturnsFalse;\n  }\n  this.isPropagationStopped \x3d emptyFunction.thatReturnsFalse;\n}\n\nmergeInto(SyntheticEvent.prototype, {\n\n  preventDefault: function() {\n    this.defaultPrevented \x3d true;\n    var event \x3d this.nativeEvent;\n    event.preventDefault ? event.preventDefault() : event.returnValue \x3d false;\n    this.isDefaultPrevented \x3d emptyFunction.thatReturnsTrue;\n  },\n\n  stopPropagation: function() {\n    var event \x3d this.nativeEvent;\n    event.stopPropagation ? event.stopPropagation() : event.cancelBubble \x3d true;\n    this.isPropagationStopped \x3d emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding\n   * them back into the pool. This allows a way to hold onto a reference that\n   * won\'t be added back into the pool.\n   */\n  persist: function() {\n    this.isPersistent \x3d emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * Checks if this event should be released back into the pool.\n   *\n   * @return {boolean} True if this should not be released, false otherwise.\n   */\n  isPersistent: emptyFunction.thatReturnsFalse,\n\n  /**\n   * `PooledClass` looks for `destructor` on each instance it releases.\n   */\n  destructor: function() {\n    var Interface \x3d this.constructor.Interface;\n    for (var propName in Interface) {\n      this[propName] \x3d null;\n    }\n    this.dispatchConfig \x3d null;\n    this.dispatchMarker \x3d null;\n    this.nativeEvent \x3d null;\n  }\n\n});\n\nSyntheticEvent.Interface \x3d EventInterface;\n\n/**\n * Helper to reduce boilerplate when creating subclasses.\n *\n * @param {function} Class\n * @param {?object} Interface\n */\nSyntheticEvent.augmentClass \x3d function(Class, Interface) {\n  var Super \x3d this;\n\n  var prototype \x3d Object.create(Super.prototype);\n  mergeInto(prototype, Class.prototype);\n  Class.prototype \x3d prototype;\n  Class.prototype.constructor \x3d Class;\n\n  Class.Interface \x3d merge(Super.Interface, Interface);\n  Class.augmentClass \x3d Super.augmentClass;\n\n  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);\n};\n\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);\n\nmodule.exports \x3d SyntheticEvent;\n\n},{"./PooledClass":26,"./emptyFunction":102,"./getEventTarget":111,"./merge":130,"./mergeInto":132}],85:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticFocusEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar SyntheticUIEvent \x3d _dereq_("./SyntheticUIEvent");\n\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar FocusEventInterface \x3d {\n  relatedTarget: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);\n\nmodule.exports \x3d SyntheticFocusEvent;\n\n},{"./SyntheticUIEvent":90}],86:[function(_dereq_,module,exports){\n/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticInputEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar SyntheticEvent \x3d _dereq_("./SyntheticEvent");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\nvar InputEventInterface \x3d {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticInputEvent(\n  dispatchConfig,\n  dispatchMarker,\n  nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(\n  SyntheticInputEvent,\n  InputEventInterface\n);\n\nmodule.exports \x3d SyntheticInputEvent;\n\n\n},{"./SyntheticEvent":84}],87:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticKeyboardEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar SyntheticUIEvent \x3d _dereq_("./SyntheticUIEvent");\n\nvar getEventKey \x3d _dereq_("./getEventKey");\nvar getEventModifierState \x3d _dereq_("./getEventModifierState");\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar KeyboardEventInterface \x3d {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function(event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated but its replacement is not yet final and not\n    // implemented in any major browser.\n    if (event.type \x3d\x3d\x3d \'keypress\') {\n      // IE8 does not implement "charCode", but "keyCode" has the correct value.\n      return \'charCode\' in event ? event.charCode : event.keyCode;\n    }\n    return 0;\n  },\n  keyCode: function(event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users\' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type \x3d\x3d\x3d \'keydown\' || event.type \x3d\x3d\x3d \'keyup\') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function(event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event. There is no need to determine the type of the event\n    // as `keyCode` and `charCode` are either aliased or default to zero.\n    return event.keyCode || event.charCode;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\n\nmodule.exports \x3d SyntheticKeyboardEvent;\n\n},{"./SyntheticUIEvent":90,"./getEventKey":109,"./getEventModifierState":110}],88:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticMouseEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar SyntheticUIEvent \x3d _dereq_("./SyntheticUIEvent");\nvar ViewportMetrics \x3d _dereq_("./ViewportMetrics");\n\nvar getEventModifierState \x3d _dereq_("./getEventModifierState");\n\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar MouseEventInterface \x3d {\n  screenX: null,\n  screenY: null,\n  clientX: null,\n  clientY: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  getModifierState: getEventModifierState,\n  button: function(event) {\n    // Webkit, Firefox, IE9+\n    // which:  1 2 3\n    // button: 0 1 2 (standard)\n    var button \x3d event.button;\n    if (\'which\' in event) {\n      return button;\n    }\n    // IE\x3c9\n    // which:  undefined\n    // button: 0 0 0\n    // button: 1 4 2 (onmouseup)\n    return button \x3d\x3d\x3d 2 ? 2 : button \x3d\x3d\x3d 4 ? 1 : 0;\n  },\n  buttons: null,\n  relatedTarget: function(event) {\n    return event.relatedTarget || (\n      event.fromElement \x3d\x3d\x3d event.srcElement ?\n        event.toElement :\n        event.fromElement\n    );\n  },\n  // "Proprietary" Interface.\n  pageX: function(event) {\n    return \'pageX\' in event ?\n      event.pageX :\n      event.clientX + ViewportMetrics.currentScrollLeft;\n  },\n  pageY: function(event) {\n    return \'pageY\' in event ?\n      event.pageY :\n      event.clientY + ViewportMetrics.currentScrollTop;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);\n\nmodule.exports \x3d SyntheticMouseEvent;\n\n},{"./SyntheticUIEvent":90,"./ViewportMetrics":93,"./getEventModifierState":110}],89:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticTouchEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar SyntheticUIEvent \x3d _dereq_("./SyntheticUIEvent");\n\nvar getEventModifierState \x3d _dereq_("./getEventModifierState");\n\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\nvar TouchEventInterface \x3d {\n  touches: null,\n  targetTouches: null,\n  changedTouches: null,\n  altKey: null,\n  metaKey: null,\n  ctrlKey: null,\n  shiftKey: null,\n  getModifierState: getEventModifierState\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);\n\nmodule.exports \x3d SyntheticTouchEvent;\n\n},{"./SyntheticUIEvent":90,"./getEventModifierState":110}],90:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticUIEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar SyntheticEvent \x3d _dereq_("./SyntheticEvent");\n\nvar getEventTarget \x3d _dereq_("./getEventTarget");\n\n/**\n * @interface UIEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar UIEventInterface \x3d {\n  view: function(event) {\n    if (event.view) {\n      return event.view;\n    }\n\n    var target \x3d getEventTarget(event);\n    if (target !\x3d null \x26\x26 target.window \x3d\x3d\x3d target) {\n      // target is a window object\n      return target;\n    }\n\n    var doc \x3d target.ownerDocument;\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n    if (doc) {\n      return doc.defaultView || doc.parentWindow;\n    } else {\n      return window;\n    }\n  },\n  detail: function(event) {\n    return event.detail || 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);\n\nmodule.exports \x3d SyntheticUIEvent;\n\n},{"./SyntheticEvent":84,"./getEventTarget":111}],91:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule SyntheticWheelEvent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar SyntheticMouseEvent \x3d _dereq_("./SyntheticMouseEvent");\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar WheelEventInterface \x3d {\n  deltaX: function(event) {\n    return (\n      \'deltaX\' in event ? event.deltaX :\n      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n      \'wheelDeltaX\' in event ? -event.wheelDeltaX : 0\n    );\n  },\n  deltaY: function(event) {\n    return (\n      \'deltaY\' in event ? event.deltaY :\n      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n      \'wheelDeltaY\' in event ? -event.wheelDeltaY :\n      // Fallback to `wheelDelta` for IE\x3c9 and normalize (down is positive).\n      \'wheelDelta\' in event ? -event.wheelDelta : 0\n    );\n  },\n  deltaZ: null,\n\n  // Browsers without "deltaMode" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticMouseEvent}\n */\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);\n\nmodule.exports \x3d SyntheticWheelEvent;\n\n},{"./SyntheticMouseEvent":88}],92:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule Transaction\n */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * `Transaction` creates a black box that is able to wrap any method such that\n * certain invariants are maintained before and after the method is invoked\n * (Even if an exception is thrown while invoking the wrapped method). Whoever\n * instantiates a transaction can provide enforcers of the invariants at\n * creation time. The `Transaction` class itself will supply one additional\n * automatic invariant for you - the invariant that any transaction instance\n * should not be run while it is already being run. You would typically create a\n * single instance of a `Transaction` for reuse multiple times, that potentially\n * is used to wrap several different methods. Wrappers are extremely simple -\n * they only require implementing two methods.\n *\n * \x3cpre\x3e\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\n * +-----------------\x3e|-|---|-|---|--\x3e|anyMethod|---|---|-|---|-|--------\x3e\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * \x3c/pre\x3e\n *\n * Use cases:\n * - Preserving the input selection ranges before/after reconciliation.\n *   Restoring selection even in the event of an unexpected error.\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,\n *   while guaranteeing that afterwards, the event system is reactivated.\n * - Flushing a queue of collected DOM mutations to the main UI thread after a\n *   reconciliation takes place in a worker thread.\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new\n *   content.\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).\n * - (Future use case): Layout calculations before and after DOM upates.\n *\n * Transactional plugin API:\n * - A module that has an `initialize` method that returns any precomputation.\n * - and a `close` method that accepts the precomputation. `close` is invoked\n *   when the wrapped process is completed, or has failed.\n *\n * @param {Array\x3cTransactionalWrapper\x3e} transactionWrapper Wrapper modules\n * that implement `initialize` and `close`.\n * @return {Transaction} Single transaction for reuse in thread.\n *\n * @class Transaction\n */\nvar Mixin \x3d {\n  /**\n   * Sets up this instance so that it is prepared for collecting metrics. Does\n   * so such that this setup method may be used on an instance that is already\n   * initialized, in a way that does not consume additional memory upon reuse.\n   * That can be useful if you decide to make your subclass of this mixin a\n   * "PooledClass".\n   */\n  reinitializeTransaction: function() {\n    this.transactionWrappers \x3d this.getTransactionWrappers();\n    if (!this.wrapperInitData) {\n      this.wrapperInitData \x3d [];\n    } else {\n      this.wrapperInitData.length \x3d 0;\n    }\n    this._isInTransaction \x3d false;\n  },\n\n  _isInTransaction: false,\n\n  /**\n   * @abstract\n   * @return {Array\x3cTransactionWrapper\x3e} Array of transaction wrappers.\n   */\n  getTransactionWrappers: null,\n\n  isInTransaction: function() {\n    return !!this._isInTransaction;\n  },\n\n  /**\n   * Executes the function within a safety window. Use this for the top level\n   * methods that result in large amounts of computation/mutations that would\n   * need to be safety checked.\n   *\n   * @param {function} method Member of scope to call.\n   * @param {Object} scope Scope to invoke from.\n   * @param {Object?\x3d} args... Arguments to pass to the method (optional).\n   *                           Helps prevent need to bind in many cases.\n   * @return Return value from `method`.\n   */\n  perform: function(method, scope, a, b, c, d, e, f) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      !this.isInTransaction(),\n      \'Transaction.perform(...): Cannot initialize a transaction when there \' +\n      \'is already an outstanding transaction.\'\n    ) : invariant(!this.isInTransaction()));\n    var errorThrown;\n    var ret;\n    try {\n      this._isInTransaction \x3d true;\n      // Catching errors makes debugging more difficult, so we start with\n      // errorThrown set to true before setting it to false after calling\n      // close -- if it\'s still set to true in the finally block, it means\n      // one of these calls threw.\n      errorThrown \x3d true;\n      this.initializeAll(0);\n      ret \x3d method.call(scope, a, b, c, d, e, f);\n      errorThrown \x3d false;\n    } finally {\n      try {\n        if (errorThrown) {\n          // If `method` throws, prefer to show that stack trace over any thrown\n          // by invoking `closeAll`.\n          try {\n            this.closeAll(0);\n          } catch (err) {\n          }\n        } else {\n          // Since `method` didn\'t throw, we don\'t want to silence the exception\n          // here.\n          this.closeAll(0);\n        }\n      } finally {\n        this._isInTransaction \x3d false;\n      }\n    }\n    return ret;\n  },\n\n  initializeAll: function(startIndex) {\n    var transactionWrappers \x3d this.transactionWrappers;\n    for (var i \x3d startIndex; i \x3c transactionWrappers.length; i++) {\n      var wrapper \x3d transactionWrappers[i];\n      try {\n        // Catching errors makes debugging more difficult, so we start with the\n        // OBSERVED_ERROR state before overwriting it with the real return value\n        // of initialize -- if it\'s still set to OBSERVED_ERROR in the finally\n        // block, it means wrapper.initialize threw.\n        this.wrapperInitData[i] \x3d Transaction.OBSERVED_ERROR;\n        this.wrapperInitData[i] \x3d wrapper.initialize ?\n          wrapper.initialize.call(this) :\n          null;\n      } finally {\n        if (this.wrapperInitData[i] \x3d\x3d\x3d Transaction.OBSERVED_ERROR) {\n          // The initializer for wrapper i threw an error; initialize the\n          // remaining wrappers but silence any exceptions from them to ensure\n          // that the first error is the one to bubble up.\n          try {\n            this.initializeAll(i + 1);\n          } catch (err) {\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into\n   * them the respective return values of `this.transactionWrappers.init[i]`\n   * (`close`rs that correspond to initializers that failed will not be\n   * invoked).\n   */\n  closeAll: function(startIndex) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      this.isInTransaction(),\n      \'Transaction.closeAll(): Cannot close transaction when none are open.\'\n    ) : invariant(this.isInTransaction()));\n    var transactionWrappers \x3d this.transactionWrappers;\n    for (var i \x3d startIndex; i \x3c transactionWrappers.length; i++) {\n      var wrapper \x3d transactionWrappers[i];\n      var initData \x3d this.wrapperInitData[i];\n      var errorThrown;\n      try {\n        // Catching errors makes debugging more difficult, so we start with\n        // errorThrown set to true before setting it to false after calling\n        // close -- if it\'s still set to true in the finally block, it means\n        // wrapper.close threw.\n        errorThrown \x3d true;\n        if (initData !\x3d\x3d Transaction.OBSERVED_ERROR) {\n          wrapper.close \x26\x26 wrapper.close.call(this, initData);\n        }\n        errorThrown \x3d false;\n      } finally {\n        if (errorThrown) {\n          // The closer for wrapper i threw an error; close the remaining\n          // wrappers but silence any exceptions from them to ensure that the\n          // first error is the one to bubble up.\n          try {\n            this.closeAll(i + 1);\n          } catch (e) {\n          }\n        }\n      }\n    }\n    this.wrapperInitData.length \x3d 0;\n  }\n};\n\nvar Transaction \x3d {\n\n  Mixin: Mixin,\n\n  /**\n   * Token to look for to determine if an error occured.\n   */\n  OBSERVED_ERROR: {}\n\n};\n\nmodule.exports \x3d Transaction;\n\n},{"./invariant":120}],93:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ViewportMetrics\n */\n\n"use strict";\n\nvar getUnboundedScrollPosition \x3d _dereq_("./getUnboundedScrollPosition");\n\nvar ViewportMetrics \x3d {\n\n  currentScrollLeft: 0,\n\n  currentScrollTop: 0,\n\n  refreshScrollValues: function() {\n    var scrollPosition \x3d getUnboundedScrollPosition(window);\n    ViewportMetrics.currentScrollLeft \x3d scrollPosition.x;\n    ViewportMetrics.currentScrollTop \x3d scrollPosition.y;\n  }\n\n};\n\nmodule.exports \x3d ViewportMetrics;\n\n},{"./getUnboundedScrollPosition":116}],94:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule accumulate\n */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Accumulates items that must not be null or undefined.\n *\n * This is used to conserve memory by avoiding array allocations.\n *\n * @return {*|array\x3c*\x3e} An accumulation of items.\n */\nfunction accumulate(current, next) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    next !\x3d null,\n    \'accumulate(...): Accumulated items must be not be null or undefined.\'\n  ) : invariant(next !\x3d null));\n  if (current \x3d\x3d null) {\n    return next;\n  } else {\n    // Both are not empty. Warning: Never call x.concat(y) when you are not\n    // certain that x is an Array (x could be a string with concat method).\n    var currentIsArray \x3d Array.isArray(current);\n    var nextIsArray \x3d Array.isArray(next);\n    if (currentIsArray) {\n      return current.concat(next);\n    } else {\n      if (nextIsArray) {\n        return [current].concat(next);\n      } else {\n        return [current, next];\n      }\n    }\n  }\n}\n\nmodule.exports \x3d accumulate;\n\n},{"./invariant":120}],95:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule adler32\n */\n\n/* jslint bitwise:true */\n\n"use strict";\n\nvar MOD \x3d 65521;\n\n// This is a clean-room implementation of adler32 designed for detecting\n// if markup is not what we expect it to be. It does not need to be\n// cryptographically strong, only reasonable good at detecting if markup\n// generated on the server is different than that on the client.\nfunction adler32(data) {\n  var a \x3d 1;\n  var b \x3d 0;\n  for (var i \x3d 0; i \x3c data.length; i++) {\n    a \x3d (a + data.charCodeAt(i)) % MOD;\n    b \x3d (b + a) % MOD;\n  }\n  return a | (b \x3c\x3c 16);\n}\n\nmodule.exports \x3d adler32;\n\n},{}],96:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule containsNode\n * @typechecks\n */\n\nvar isTextNode \x3d _dereq_("./isTextNode");\n\n/*jslint bitwise:true */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n *\n * @param {?DOMNode} outerNode Outer DOM node.\n * @param {?DOMNode} innerNode Inner DOM node.\n * @return {boolean} True if `outerNode` contains or is `innerNode`.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode \x3d\x3d\x3d innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if (outerNode.contains) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) \x26 16);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports \x3d containsNode;\n\n},{"./isTextNode":124}],97:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule copyProperties\n */\n\n/**\n * Copy properties from one or more objects (up to 5) into the first object.\n * This is a shallow copy. It mutates the first object and also returns it.\n *\n * NOTE: `arguments` has a very significant performance penalty, which is why\n * we don\'t support unlimited arguments.\n */\nfunction copyProperties(obj, a, b, c, d, e, f) {\n  obj \x3d obj || {};\n\n  if ("production" !\x3d\x3d "development") {\n    if (f) {\n      throw new Error(\'Too many arguments passed to copyProperties\');\n    }\n  }\n\n  var args \x3d [a, b, c, d, e];\n  var ii \x3d 0, v;\n  while (args[ii]) {\n    v \x3d args[ii++];\n    for (var k in v) {\n      obj[k] \x3d v[k];\n    }\n\n    // IE ignores toString in object iteration.. See:\n    // webreflection.blogspot.com/2007/07/quick-fix-internet-explorer-and.html\n    if (v.hasOwnProperty \x26\x26 v.hasOwnProperty(\'toString\') \x26\x26\n        (typeof v.toString !\x3d \'undefined\') \x26\x26 (obj.toString !\x3d\x3d v.toString)) {\n      obj.toString \x3d v.toString;\n    }\n  }\n\n  return obj;\n}\n\nmodule.exports \x3d copyProperties;\n\n},{}],98:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule createArrayFrom\n * @typechecks\n */\n\nvar toArray \x3d _dereq_("./toArray");\n\n/**\n * Perform a heuristic test to determine if an object is "array-like".\n *\n *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"\n *   Joshu replied: "Mu."\n *\n * This function determines if its argument has "array nature": it returns\n * true if the argument is an actual array, an `arguments\' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return (\n    // not null/false\n    !!obj \x26\x26\n    // arrays are objects, NodeLists are functions in Safari\n    (typeof obj \x3d\x3d \'object\' || typeof obj \x3d\x3d \'function\') \x26\x26\n    // quacks like an array\n    (\'length\' in obj) \x26\x26\n    // not window\n    !(\'setInterval\' in obj) \x26\x26\n    // no DOM node should be considered an array-like\n    // a \'select\' element has \'length\' and \'item\' properties on IE8\n    (typeof obj.nodeType !\x3d \'number\') \x26\x26\n    (\n      // a real array\n      (// HTMLCollection/NodeList\n      (Array.isArray(obj) ||\n      // arguments\n      (\'callee\' in obj) || \'item\' in obj))\n    )\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFrom \x3d require(\'createArrayFrom\');\n *\n *   function takesOneOrMoreThings(things) {\n *     things \x3d createArrayFrom(things);\n *     ...\n *   }\n *\n * This allows you to treat `things\' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFrom(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports \x3d createArrayFrom;\n\n},{"./toArray":141}],99:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule createFullPageComponent\n * @typechecks\n */\n\n"use strict";\n\n// Defeat circular references by requiring this directly.\nvar ReactCompositeComponent \x3d _dereq_("./ReactCompositeComponent");\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Create a component that will throw an exception when unmounted.\n *\n * Components like \x3chtml\x3e \x3chead\x3e and \x3cbody\x3e can\'t be removed or added\n * easily in a cross-browser way, however it\'s valuable to be able to\n * take advantage of React\'s reconciliation for styling and \x3ctitle\x3e\n * management. So we just document it and throw in dangerous cases.\n *\n * @param {function} componentClass convenience constructor to wrap\n * @return {function} convenience constructor of new component\n */\nfunction createFullPageComponent(componentClass) {\n  var FullPageComponent \x3d ReactCompositeComponent.createClass({\n    displayName: \'ReactFullPageComponent\' + (\n      componentClass.type.displayName || \'\'\n    ),\n\n    componentWillUnmount: function() {\n      ("production" !\x3d\x3d "development" ? invariant(\n        false,\n        \'%s tried to unmount. Because of cross-browser quirks it is \' +\n        \'impossible to unmount some top-level components (eg \x3chtml\x3e, \x3chead\x3e, \' +\n        \'and \x3cbody\x3e) reliably and efficiently. To fix this, have a single \' +\n        \'top-level component that never unmounts render these elements.\',\n        this.constructor.displayName\n      ) : invariant(false));\n    },\n\n    render: function() {\n      return this.transferPropsTo(componentClass(null, this.props.children));\n    }\n  });\n\n  return FullPageComponent;\n}\n\nmodule.exports \x3d createFullPageComponent;\n\n},{"./ReactCompositeComponent":33,"./invariant":120}],100:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*jslint evil: true, sub: true */\n\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\n\nvar createArrayFrom \x3d _dereq_("./createArrayFrom");\nvar getMarkupWrap \x3d _dereq_("./getMarkupWrap");\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode \x3d\n  ExecutionEnvironment.canUseDOM ? document.createElement(\'div\') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern \x3d /^\\s*\x3c(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch \x3d markup.match(nodeNamePattern);\n  return nodeNameMatch \x26\x26 nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * \x3cscript\x3e element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any \x3cscript\x3e elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered \x3cscript\x3e.\n * @return {array\x3cDOMElement|DOMTextNode\x3e} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node \x3d dummyNode;\n  ("production" !\x3d\x3d "development" ? invariant(!!dummyNode, \'createNodesFromMarkup dummy not initialized\') : invariant(!!dummyNode));\n  var nodeName \x3d getNodeName(markup);\n\n  var wrap \x3d nodeName \x26\x26 getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML \x3d wrap[1] + markup + wrap[2];\n\n    var wrapDepth \x3d wrap[0];\n    while (wrapDepth--) {\n      node \x3d node.lastChild;\n    }\n  } else {\n    node.innerHTML \x3d markup;\n  }\n\n  var scripts \x3d node.getElementsByTagName(\'script\');\n  if (scripts.length) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      handleScript,\n      \'createNodesFromMarkup(...): Unexpected \x3cscript\x3e element rendered.\'\n    ) : invariant(handleScript));\n    createArrayFrom(scripts).forEach(handleScript);\n  }\n\n  var nodes \x3d createArrayFrom(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports \x3d createNodesFromMarkup;\n\n},{"./ExecutionEnvironment":21,"./createArrayFrom":98,"./getMarkupWrap":112,"./invariant":120}],101:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule dangerousStyleValue\n * @typechecks static-only\n */\n\n"use strict";\n\nvar CSSProperty \x3d _dereq_("./CSSProperty");\n\nvar isUnitlessNumber \x3d CSSProperty.isUnitlessNumber;\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value) {\n  // Note that we\'ve removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn\'t repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we\'re going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty \x3d value \x3d\x3d null || typeof value \x3d\x3d\x3d \'boolean\' || value \x3d\x3d\x3d \'\';\n  if (isEmpty) {\n    return \'\';\n  }\n\n  var isNonNumeric \x3d isNaN(value);\n  if (isNonNumeric || value \x3d\x3d\x3d 0 ||\n      isUnitlessNumber.hasOwnProperty(name) \x26\x26 isUnitlessNumber[name]) {\n    return \'\' + value; // cast to string\n  }\n\n  if (typeof value \x3d\x3d\x3d \'string\') {\n    value \x3d value.trim();\n  }\n  return value + \'px\';\n}\n\nmodule.exports \x3d dangerousStyleValue;\n\n},{"./CSSProperty":3}],102:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule emptyFunction\n */\n\nvar copyProperties \x3d _dereq_("./copyProperties");\n\nfunction makeEmptyFunction(arg) {\n  return function() {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nfunction emptyFunction() {}\n\ncopyProperties(emptyFunction, {\n  thatReturns: makeEmptyFunction,\n  thatReturnsFalse: makeEmptyFunction(false),\n  thatReturnsTrue: makeEmptyFunction(true),\n  thatReturnsNull: makeEmptyFunction(null),\n  thatReturnsThis: function() { return this; },\n  thatReturnsArgument: function(arg) { return arg; }\n});\n\nmodule.exports \x3d emptyFunction;\n\n},{"./copyProperties":97}],103:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule emptyObject\n */\n\n"use strict";\n\nvar emptyObject \x3d {};\n\nif ("production" !\x3d\x3d "development") {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports \x3d emptyObject;\n\n},{}],104:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule escapeTextForBrowser\n * @typechecks static-only\n */\n\n"use strict";\n\nvar ESCAPE_LOOKUP \x3d {\n  "\x26": "\x26amp;",\n  "\x3e": "\x26gt;",\n  "\x3c": "\x26lt;",\n  "\\"": "\x26quot;",\n  "\'": "\x26#x27;"\n};\n\nvar ESCAPE_REGEX \x3d /[\x26\x3e\x3c"\']/g;\n\nfunction escaper(match) {\n  return ESCAPE_LOOKUP[match];\n}\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\nfunction escapeTextForBrowser(text) {\n  return (\'\' + text).replace(ESCAPE_REGEX, escaper);\n}\n\nmodule.exports \x3d escapeTextForBrowser;\n\n},{}],105:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule flattenChildren\n */\n\n"use strict";\n\nvar traverseAllChildren \x3d _dereq_("./traverseAllChildren");\nvar warning \x3d _dereq_("./warning");\n\n/**\n * @param {function} traverseContext Context passed through traversal.\n * @param {?ReactComponent} child React child component.\n * @param {!string} name String name of key path to child.\n */\nfunction flattenSingleChildIntoContext(traverseContext, child, name) {\n  // We found a component instance.\n  var result \x3d traverseContext;\n  var keyUnique \x3d !result.hasOwnProperty(name);\n  ("production" !\x3d\x3d "development" ? warning(\n    keyUnique,\n    \'flattenChildren(...): Encountered two children with the same key, \' +\n    \'`%s`. Child keys must be unique; when two children share a key, only \' +\n    \'the first child will be used.\',\n    name\n  ) : null);\n  if (keyUnique \x26\x26 child !\x3d null) {\n    result[name] \x3d child;\n  }\n}\n\n/**\n * Flattens children that are typically specified as `props.children`. Any null\n * children will not be included in the resulting object.\n * @return {!object} flattened children keyed by name.\n */\nfunction flattenChildren(children) {\n  if (children \x3d\x3d null) {\n    return children;\n  }\n  var result \x3d {};\n  traverseAllChildren(children, flattenSingleChildIntoContext, result);\n  return result;\n}\n\nmodule.exports \x3d flattenChildren;\n\n},{"./traverseAllChildren":142,"./warning":143}],106:[function(_dereq_,module,exports){\n/**\n * Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule focusNode\n */\n\n"use strict";\n\n/**\n * IE8 throws if an input/textarea is disabled and we try to focus it.\n * Focus only when necessary.\n *\n * @param {DOMElement} node input/textarea to focus\n */\nfunction focusNode(node) {\n  if (!node.disabled) {\n    node.focus();\n  }\n}\n\nmodule.exports \x3d focusNode;\n\n},{}],107:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule forEachAccumulated\n */\n\n"use strict";\n\n/**\n * @param {array} an "accumulation" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n */\nvar forEachAccumulated \x3d function(arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n};\n\nmodule.exports \x3d forEachAccumulated;\n\n},{}],108:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule getActiveElement\n * @typechecks\n */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document body is not yet defined.\n */\nfunction getActiveElement() /*?DOMElement*/ {\n  try {\n    return document.activeElement || document.body;\n  } catch (e) {\n    return document.body;\n  }\n}\n\nmodule.exports \x3d getActiveElement;\n\n},{}],109:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule getEventKey\n * @typechecks static-only\n */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey \x3d {\n  \'Esc\': \'Escape\',\n  \'Spacebar\': \' \',\n  \'Left\': \'ArrowLeft\',\n  \'Up\': \'ArrowUp\',\n  \'Right\': \'ArrowRight\',\n  \'Down\': \'ArrowDown\',\n  \'Del\': \'Delete\',\n  \'Win\': \'OS\',\n  \'Menu\': \'ContextMenu\',\n  \'Apps\': \'ContextMenu\',\n  \'Scroll\': \'ScrollLock\',\n  \'MozPrintableKey\': \'Unidentified\'\n};\n\n/**\n * Translation from legacy `which`/`keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey \x3d {\n  8: \'Backspace\',\n  9: \'Tab\',\n  12: \'Clear\',\n  13: \'Enter\',\n  16: \'Shift\',\n  17: \'Control\',\n  18: \'Alt\',\n  19: \'Pause\',\n  20: \'CapsLock\',\n  27: \'Escape\',\n  32: \' \',\n  33: \'PageUp\',\n  34: \'PageDown\',\n  35: \'End\',\n  36: \'Home\',\n  37: \'ArrowLeft\',\n  38: \'ArrowUp\',\n  39: \'ArrowRight\',\n  40: \'ArrowDown\',\n  45: \'Insert\',\n  46: \'Delete\',\n  112: \'F1\', 113: \'F2\', 114: \'F3\', 115: \'F4\', 116: \'F5\', 117: \'F6\',\n  118: \'F7\', 119: \'F8\', 120: \'F9\', 121: \'F10\', 122: \'F11\', 123: \'F12\',\n  144: \'NumLock\',\n  145: \'ScrollLock\',\n  224: \'Meta\'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key \x3d normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !\x3d\x3d \'Unidentified\') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type \x3d\x3d\x3d \'keypress\') {\n    // Create the character from the `charCode` ourselves and use as an almost\n    // perfect replacement.\n    var charCode \x3d \'charCode\' in nativeEvent ?\n      nativeEvent.charCode :\n      nativeEvent.keyCode;\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode \x3d\x3d\x3d 13 ? \'Enter\' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type \x3d\x3d\x3d \'keydown\' || nativeEvent.type \x3d\x3d\x3d \'keyup\') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || \'Unidentified\';\n  }\n\n  ("production" !\x3d\x3d "development" ? invariant(false, "Unexpected keyboard event type: %s", nativeEvent.type) : invariant(false));\n}\n\nmodule.exports \x3d getEventKey;\n\n},{"./invariant":120}],110:[function(_dereq_,module,exports){\n/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule getEventModifierState\n * @typechecks static-only\n */\n\n"use strict";\n\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\nvar modifierKeyToProp \x3d {\n  \'Alt\': \'altKey\',\n  \'Control\': \'ctrlKey\',\n  \'Meta\': \'metaKey\',\n  \'Shift\': \'shiftKey\'\n};\n\n// IE8 does not implement getModifierState so we simply map it to the only\n// modifier keys exposed by the event itself, does not support Lock-keys.\n// Currently, all major browsers except Chrome seems to support Lock-keys.\nfunction modifierStateGetter(keyArg) {\n  /*jshint validthis:true */\n  var syntheticEvent \x3d this;\n  var nativeEvent \x3d syntheticEvent.nativeEvent;\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n  var keyProp \x3d modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n\nmodule.exports \x3d getEventModifierState;\n\n},{}],111:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule getEventTarget\n * @typechecks static-only\n */\n\n"use strict";\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\nfunction getEventTarget(nativeEvent) {\n  var target \x3d nativeEvent.target || nativeEvent.srcElement || window;\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n  return target.nodeType \x3d\x3d\x3d 3 ? target.parentNode : target;\n}\n\nmodule.exports \x3d getEventTarget;\n\n},{}],112:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule getMarkupWrap\n */\n\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Dummy container used to detect which wraps are necessary.\n */\nvar dummyNode \x3d\n  ExecutionEnvironment.canUseDOM ? document.createElement(\'div\') : null;\n\n/**\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\n * so we wrap them, render the wrapped nodes, then extract the desired node.\n *\n * In IE8, certain elements cannot render alone, so wrap all elements (\'*\').\n */\nvar shouldWrap \x3d {\n  // Force wrapping for SVG elements because if they get created inside a \x3cdiv\x3e,\n  // they will be initialized in the wrong namespace (and will not display).\n  \'circle\': true,\n  \'defs\': true,\n  \'ellipse\': true,\n  \'g\': true,\n  \'line\': true,\n  \'linearGradient\': true,\n  \'path\': true,\n  \'polygon\': true,\n  \'polyline\': true,\n  \'radialGradient\': true,\n  \'rect\': true,\n  \'stop\': true,\n  \'text\': true\n};\n\nvar selectWrap \x3d [1, \'\x3cselect multiple\x3d"true"\x3e\', \'\x3c/select\x3e\'];\nvar tableWrap \x3d [1, \'\x3ctable\x3e\', \'\x3c/table\x3e\'];\nvar trWrap \x3d [3, \'\x3ctable\x3e\x3ctbody\x3e\x3ctr\x3e\', \'\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e\'];\n\nvar svgWrap \x3d [1, \'\x3csvg\x3e\', \'\x3c/svg\x3e\'];\n\nvar markupWrap \x3d {\n  \'*\': [1, \'?\x3cdiv\x3e\', \'\x3c/div\x3e\'],\n\n  \'area\': [1, \'\x3cmap\x3e\', \'\x3c/map\x3e\'],\n  \'col\': [2, \'\x3ctable\x3e\x3ctbody\x3e\x3c/tbody\x3e\x3ccolgroup\x3e\', \'\x3c/colgroup\x3e\x3c/table\x3e\'],\n  \'legend\': [1, \'\x3cfieldset\x3e\', \'\x3c/fieldset\x3e\'],\n  \'param\': [1, \'\x3cobject\x3e\', \'\x3c/object\x3e\'],\n  \'tr\': [2, \'\x3ctable\x3e\x3ctbody\x3e\', \'\x3c/tbody\x3e\x3c/table\x3e\'],\n\n  \'optgroup\': selectWrap,\n  \'option\': selectWrap,\n\n  \'caption\': tableWrap,\n  \'colgroup\': tableWrap,\n  \'tbody\': tableWrap,\n  \'tfoot\': tableWrap,\n  \'thead\': tableWrap,\n\n  \'td\': trWrap,\n  \'th\': trWrap,\n\n  \'circle\': svgWrap,\n  \'defs\': svgWrap,\n  \'ellipse\': svgWrap,\n  \'g\': svgWrap,\n  \'line\': svgWrap,\n  \'linearGradient\': svgWrap,\n  \'path\': svgWrap,\n  \'polygon\': svgWrap,\n  \'polyline\': svgWrap,\n  \'radialGradient\': svgWrap,\n  \'rect\': svgWrap,\n  \'stop\': svgWrap,\n  \'text\': svgWrap\n};\n\n/**\n * Gets the markup wrap configuration for the supplied `nodeName`.\n *\n * NOTE: This lazily detects which wraps are necessary for the current browser.\n *\n * @param {string} nodeName Lowercase `nodeName`.\n * @return {?array} Markup wrap configuration, if applicable.\n */\nfunction getMarkupWrap(nodeName) {\n  ("production" !\x3d\x3d "development" ? invariant(!!dummyNode, \'Markup wrapping node not initialized\') : invariant(!!dummyNode));\n  if (!markupWrap.hasOwnProperty(nodeName)) {\n    nodeName \x3d \'*\';\n  }\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\n    if (nodeName \x3d\x3d\x3d \'*\') {\n      dummyNode.innerHTML \x3d \'\x3clink /\x3e\';\n    } else {\n      dummyNode.innerHTML \x3d \'\x3c\' + nodeName + \'\x3e\x3c/\' + nodeName + \'\x3e\';\n    }\n    shouldWrap[nodeName] \x3d !dummyNode.firstChild;\n  }\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\n}\n\n\nmodule.exports \x3d getMarkupWrap;\n\n},{"./ExecutionEnvironment":21,"./invariant":120}],113:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule getNodeForCharacterOffset\n */\n\n"use strict";\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\nfunction getLeafNode(node) {\n  while (node \x26\x26 node.firstChild) {\n    node \x3d node.firstChild;\n  }\n  return node;\n}\n\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node\'s siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node \x3d node.parentNode;\n  }\n}\n\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\nfunction getNodeForCharacterOffset(root, offset) {\n  var node \x3d getLeafNode(root);\n  var nodeStart \x3d 0;\n  var nodeEnd \x3d 0;\n\n  while (node) {\n    if (node.nodeType \x3d\x3d 3) {\n      nodeEnd \x3d nodeStart + node.textContent.length;\n\n      if (nodeStart \x3c\x3d offset \x26\x26 nodeEnd \x3e\x3d offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart \x3d nodeEnd;\n    }\n\n    node \x3d getLeafNode(getSiblingNode(node));\n  }\n}\n\nmodule.exports \x3d getNodeForCharacterOffset;\n\n},{}],114:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule getReactRootElementInContainer\n */\n\n"use strict";\n\nvar DOC_NODE_TYPE \x3d 9;\n\n/**\n * @param {DOMElement|DOMDocument} container DOM element that may contain\n *                                           a React component\n * @return {?*} DOM element that may have the reactRoot ID, or null.\n */\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType \x3d\x3d\x3d DOC_NODE_TYPE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nmodule.exports \x3d getReactRootElementInContainer;\n\n},{}],115:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule getTextContentAccessor\n */\n\n"use strict";\n\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\n\nvar contentKey \x3d null;\n\n/**\n * Gets the key used to access text content on a DOM node.\n *\n * @return {?string} Key used to access text content.\n * @internal\n */\nfunction getTextContentAccessor() {\n  if (!contentKey \x26\x26 ExecutionEnvironment.canUseDOM) {\n    // Prefer textContent to innerText because many browsers support both but\n    // SVG \x3ctext\x3e elements don\'t support innerText even when \x3cdiv\x3e does.\n    contentKey \x3d \'textContent\' in document.documentElement ?\n      \'textContent\' :\n      \'innerText\';\n  }\n  return contentKey;\n}\n\nmodule.exports \x3d getTextContentAccessor;\n\n},{"./ExecutionEnvironment":21}],116:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule getUnboundedScrollPosition\n * @typechecks\n */\n\n"use strict";\n\n/**\n * Gets the scroll position of the supplied element or window.\n *\n * The return values are unbounded, unlike `getScrollPosition`. This means they\n * may be negative or exceed the element boundaries (which is possible using\n * inertial scrolling).\n *\n * @param {DOMWindow|DOMElement} scrollable\n * @return {object} Map with `x` and `y` keys.\n */\nfunction getUnboundedScrollPosition(scrollable) {\n  if (scrollable \x3d\x3d\x3d window) {\n    return {\n      x: window.pageXOffset || document.documentElement.scrollLeft,\n      y: window.pageYOffset || document.documentElement.scrollTop\n    };\n  }\n  return {\n    x: scrollable.scrollLeft,\n    y: scrollable.scrollTop\n  };\n}\n\nmodule.exports \x3d getUnboundedScrollPosition;\n\n},{}],117:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule hyphenate\n * @typechecks\n */\n\nvar _uppercasePattern \x3d /([A-Z])/g;\n\n/**\n * Hyphenates a camelcased string, for example:\n *\n *   \x3e hyphenate(\'backgroundColor\')\n *   \x3c "background-color"\n *\n * For CSS style names, use `hyphenateStyleName` instead which works properly\n * with all vendor prefixes, including `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenate(string) {\n  return string.replace(_uppercasePattern, \'-$1\').toLowerCase();\n}\n\nmodule.exports \x3d hyphenate;\n\n},{}],118:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule hyphenateStyleName\n * @typechecks\n */\n\n"use strict";\n\nvar hyphenate \x3d _dereq_("./hyphenate");\n\nvar msPattern \x3d /^ms-/;\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   \x3e hyphenate(\'backgroundColor\')\n *   \x3c "background-color"\n *   \x3e hyphenate(\'MozTransition\')\n *   \x3c "-moz-transition"\n *   \x3e hyphenate(\'msTransition\')\n *   \x3c "-ms-transition"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenateStyleName(string) {\n  return hyphenate(string).replace(msPattern, \'-ms-\');\n}\n\nmodule.exports \x3d hyphenateStyleName;\n\n},{"./hyphenate":117}],119:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule instantiateReactComponent\n * @typechecks static-only\n */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Validate a `componentDescriptor`. This should be exposed publicly in a follow\n * up diff.\n *\n * @param {object} descriptor\n * @return {boolean} Returns true if this is a valid descriptor of a Component.\n */\nfunction isValidComponentDescriptor(descriptor) {\n  return (\n    descriptor \x26\x26\n    typeof descriptor.type \x3d\x3d\x3d \'function\' \x26\x26\n    typeof descriptor.type.prototype.mountComponent \x3d\x3d\x3d \'function\' \x26\x26\n    typeof descriptor.type.prototype.receiveComponent \x3d\x3d\x3d \'function\'\n  );\n}\n\n/**\n * Given a `componentDescriptor` create an instance that will actually be\n * mounted. Currently it just extracts an existing clone from composite\n * components but this is an implementation detail which will change.\n *\n * @param {object} descriptor\n * @return {object} A new instance of componentDescriptor\'s constructor.\n * @protected\n */\nfunction instantiateReactComponent(descriptor) {\n\n  // TODO: Make warning\n  // if (__DEV__) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      isValidComponentDescriptor(descriptor),\n      \'Only React Components are valid for mounting.\'\n    ) : invariant(isValidComponentDescriptor(descriptor)));\n  // }\n\n  return new descriptor.type(descriptor);\n}\n\nmodule.exports \x3d instantiateReactComponent;\n\n},{"./invariant":120}],120:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule invariant\n */\n\n"use strict";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant \x3d function(condition, format, a, b, c, d, e, f) {\n  if ("production" !\x3d\x3d "development") {\n    if (format \x3d\x3d\x3d undefined) {\n      throw new Error(\'invariant requires an error message argument\');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format \x3d\x3d\x3d undefined) {\n      error \x3d new Error(\n        \'Minified exception occurred; use the non-minified dev environment \' +\n        \'for the full error message and additional helpful warnings.\'\n      );\n    } else {\n      var args \x3d [a, b, c, d, e, f];\n      var argIndex \x3d 0;\n      error \x3d new Error(\n        \'Invariant Violation: \' +\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n    }\n\n    error.framesToPop \x3d 1; // we don\'t care about invariant\'s own frame\n    throw error;\n  }\n};\n\nmodule.exports \x3d invariant;\n\n},{}],121:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule isEventSupported\n */\n\n"use strict";\n\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\n\nvar useHasFeature;\nif (ExecutionEnvironment.canUseDOM) {\n  useHasFeature \x3d\n    document.implementation \x26\x26\n    document.implementation.hasFeature \x26\x26\n    // always returns true in newer browsers as per the standard.\n    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n    document.implementation.hasFeature(\'\', \'\') !\x3d\x3d true;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. "click".\n * @param {?boolean} capture Check if the capture phase is supported.\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix, capture) {\n  if (!ExecutionEnvironment.canUseDOM ||\n      capture \x26\x26 !(\'addEventListener\' in document)) {\n    return false;\n  }\n\n  var eventName \x3d \'on\' + eventNameSuffix;\n  var isSupported \x3d eventName in document;\n\n  if (!isSupported) {\n    var element \x3d document.createElement(\'div\');\n    element.setAttribute(eventName, \'return;\');\n    isSupported \x3d typeof element[eventName] \x3d\x3d\x3d \'function\';\n  }\n\n  if (!isSupported \x26\x26 useHasFeature \x26\x26 eventNameSuffix \x3d\x3d\x3d \'wheel\') {\n    // This is the only way to test support for the `wheel` event in IE9+.\n    isSupported \x3d document.implementation.hasFeature(\'Events.wheel\', \'3.0\');\n  }\n\n  return isSupported;\n}\n\nmodule.exports \x3d isEventSupported;\n\n},{"./ExecutionEnvironment":21}],122:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule isNode\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\nfunction isNode(object) {\n  return !!(object \x26\x26 (\n    typeof Node \x3d\x3d\x3d \'function\' ? object instanceof Node :\n      typeof object \x3d\x3d\x3d \'object\' \x26\x26\n      typeof object.nodeType \x3d\x3d\x3d \'number\' \x26\x26\n      typeof object.nodeName \x3d\x3d\x3d \'string\'\n  ));\n}\n\nmodule.exports \x3d isNode;\n\n},{}],123:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule isTextInputElement\n */\n\n"use strict";\n\n/**\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n */\nvar supportedInputTypes \x3d {\n  \'color\': true,\n  \'date\': true,\n  \'datetime\': true,\n  \'datetime-local\': true,\n  \'email\': true,\n  \'month\': true,\n  \'number\': true,\n  \'password\': true,\n  \'range\': true,\n  \'search\': true,\n  \'tel\': true,\n  \'text\': true,\n  \'time\': true,\n  \'url\': true,\n  \'week\': true\n};\n\nfunction isTextInputElement(elem) {\n  return elem \x26\x26 (\n    (elem.nodeName \x3d\x3d\x3d \'INPUT\' \x26\x26 supportedInputTypes[elem.type]) ||\n    elem.nodeName \x3d\x3d\x3d \'TEXTAREA\'\n  );\n}\n\nmodule.exports \x3d isTextInputElement;\n\n},{}],124:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule isTextNode\n * @typechecks\n */\n\nvar isNode \x3d _dereq_("./isNode");\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) \x26\x26 object.nodeType \x3d\x3d 3;\n}\n\nmodule.exports \x3d isTextNode;\n\n},{"./isNode":122}],125:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule joinClasses\n * @typechecks static-only\n */\n\n"use strict";\n\n/**\n * Combines multiple className strings into one.\n * http://jsperf.com/joinclasses-args-vs-array\n *\n * @param {...?string} classes\n * @return {string}\n */\nfunction joinClasses(className/*, ... */) {\n  if (!className) {\n    className \x3d \'\';\n  }\n  var nextClass;\n  var argLength \x3d arguments.length;\n  if (argLength \x3e 1) {\n    for (var ii \x3d 1; ii \x3c argLength; ii++) {\n      nextClass \x3d arguments[ii];\n      nextClass \x26\x26 (className +\x3d \' \' + nextClass);\n    }\n  }\n  return className;\n}\n\nmodule.exports \x3d joinClasses;\n\n},{}],126:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule keyMirror\n * @typechecks static-only\n */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Constructs an enumeration with keys equal to their value.\n *\n * For example:\n *\n *   var COLORS \x3d keyMirror({blue: null, red: null});\n *   var myColor \x3d COLORS.blue;\n *   var isColorValid \x3d !!COLORS[myColor];\n *\n * The last line could not be performed if the values of the generated enum were\n * not equal to their keys.\n *\n *   Input:  {key1: val1, key2: val2}\n *   Output: {key1: key1, key2: key2}\n *\n * @param {object} obj\n * @return {object}\n */\nvar keyMirror \x3d function(obj) {\n  var ret \x3d {};\n  var key;\n  ("production" !\x3d\x3d "development" ? invariant(\n    obj instanceof Object \x26\x26 !Array.isArray(obj),\n    \'keyMirror(...): Argument must be an object.\'\n  ) : invariant(obj instanceof Object \x26\x26 !Array.isArray(obj)));\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n    ret[key] \x3d key;\n  }\n  return ret;\n};\n\nmodule.exports \x3d keyMirror;\n\n},{"./invariant":120}],127:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule keyOf\n */\n\n/**\n * Allows extraction of a minified key. Let\'s the build system minify keys\n * without loosing the ability to dynamically use key strings as values\n * themselves. Pass in an object with a single key/val pair and it will return\n * you the string key of that single record. Suppose you want to grab the\n * value for a key \'className\' inside of an object. Key/val minification may\n * have aliased that key to be \'xa12\'. keyOf({className: null}) will return\n * \'xa12\' in that case. Resolve keys you want to use once at startup time, then\n * reuse those resolutions.\n */\nvar keyOf \x3d function(oneKeyObj) {\n  var key;\n  for (key in oneKeyObj) {\n    if (!oneKeyObj.hasOwnProperty(key)) {\n      continue;\n    }\n    return key;\n  }\n  return null;\n};\n\n\nmodule.exports \x3d keyOf;\n\n},{}],128:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule mapObject\n */\n\n"use strict";\n\n/**\n * For each key/value pair, invokes callback func and constructs a resulting\n * object which contains, for every key in obj, values that are the result of\n * of invoking the function:\n *\n *   func(value, key, iteration)\n *\n * Grepable names:\n *\n *   function objectMap()\n *   function objMap()\n *\n * @param {?object} obj Object to map keys over\n * @param {function} func Invoked for each key/val pair.\n * @param {?*} context\n * @return {?object} Result of mapping or null if obj is falsey\n */\nfunction mapObject(obj, func, context) {\n  if (!obj) {\n    return null;\n  }\n  var i \x3d 0;\n  var ret \x3d {};\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      ret[key] \x3d func.call(context, obj[key], key, i++);\n    }\n  }\n  return ret;\n}\n\nmodule.exports \x3d mapObject;\n\n},{}],129:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule memoizeStringOnly\n * @typechecks static-only\n */\n\n"use strict";\n\n/**\n * Memoizes the return value of a function that accepts one string argument.\n *\n * @param {function} callback\n * @return {function}\n */\nfunction memoizeStringOnly(callback) {\n  var cache \x3d {};\n  return function(string) {\n    if (cache.hasOwnProperty(string)) {\n      return cache[string];\n    } else {\n      return cache[string] \x3d callback.call(this, string);\n    }\n  };\n}\n\nmodule.exports \x3d memoizeStringOnly;\n\n},{}],130:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule merge\n */\n\n"use strict";\n\nvar mergeInto \x3d _dereq_("./mergeInto");\n\n/**\n * Shallow merges two structures into a return value, without mutating either.\n *\n * @param {?object} one Optional object with properties to merge from.\n * @param {?object} two Optional object with properties to merge from.\n * @return {object} The shallow extension of one by two.\n */\nvar merge \x3d function(one, two) {\n  var result \x3d {};\n  mergeInto(result, one);\n  mergeInto(result, two);\n  return result;\n};\n\nmodule.exports \x3d merge;\n\n},{"./mergeInto":132}],131:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule mergeHelpers\n *\n * requiresPolyfills: Array.isArray\n */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\nvar keyMirror \x3d _dereq_("./keyMirror");\n\n/**\n * Maximum number of levels to traverse. Will catch circular structures.\n * @const\n */\nvar MAX_MERGE_DEPTH \x3d 36;\n\n/**\n * We won\'t worry about edge cases like new String(\'x\') or new Boolean(true).\n * Functions are considered terminals, and arrays are not.\n * @param {*} o The item/object/value to test.\n * @return {boolean} true iff the argument is a terminal.\n */\nvar isTerminal \x3d function(o) {\n  return typeof o !\x3d\x3d \'object\' || o \x3d\x3d\x3d null;\n};\n\nvar mergeHelpers \x3d {\n\n  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,\n\n  isTerminal: isTerminal,\n\n  /**\n   * Converts null/undefined values into empty object.\n   *\n   * @param {?Object\x3d} arg Argument to be normalized (nullable optional)\n   * @return {!Object}\n   */\n  normalizeMergeArg: function(arg) {\n    return arg \x3d\x3d\x3d undefined || arg \x3d\x3d\x3d null ? {} : arg;\n  },\n\n  /**\n   * If merging Arrays, a merge strategy *must* be supplied. If not, it is\n   * likely the caller\'s fault. If this function is ever called with anything\n   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.\n   *\n   * @param {*} one Array to merge into.\n   * @param {*} two Array to merge from.\n   */\n  checkMergeArrayArgs: function(one, two) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      Array.isArray(one) \x26\x26 Array.isArray(two),\n      \'Tried to merge arrays, instead got %s and %s.\',\n      one,\n      two\n    ) : invariant(Array.isArray(one) \x26\x26 Array.isArray(two)));\n  },\n\n  /**\n   * @param {*} one Object to merge into.\n   * @param {*} two Object to merge from.\n   */\n  checkMergeObjectArgs: function(one, two) {\n    mergeHelpers.checkMergeObjectArg(one);\n    mergeHelpers.checkMergeObjectArg(two);\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeObjectArg: function(arg) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      !isTerminal(arg) \x26\x26 !Array.isArray(arg),\n      \'Tried to merge an object, instead got %s.\',\n      arg\n    ) : invariant(!isTerminal(arg) \x26\x26 !Array.isArray(arg)));\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeIntoObjectArg: function(arg) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      (!isTerminal(arg) || typeof arg \x3d\x3d\x3d \'function\') \x26\x26 !Array.isArray(arg),\n      \'Tried to merge into an object, instead got %s.\',\n      arg\n    ) : invariant((!isTerminal(arg) || typeof arg \x3d\x3d\x3d \'function\') \x26\x26 !Array.isArray(arg)));\n  },\n\n  /**\n   * Checks that a merge was not given a circular object or an object that had\n   * too great of depth.\n   *\n   * @param {number} Level of recursion to validate against maximum.\n   */\n  checkMergeLevel: function(level) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      level \x3c MAX_MERGE_DEPTH,\n      \'Maximum deep merge depth exceeded. You may be attempting to merge \' +\n      \'circular structures in an unsupported way.\'\n    ) : invariant(level \x3c MAX_MERGE_DEPTH));\n  },\n\n  /**\n   * Checks that the supplied merge strategy is valid.\n   *\n   * @param {string} Array merge strategy.\n   */\n  checkArrayStrategy: function(strategy) {\n    ("production" !\x3d\x3d "development" ? invariant(\n      strategy \x3d\x3d\x3d undefined || strategy in mergeHelpers.ArrayStrategies,\n      \'You must provide an array strategy to deep merge functions to \' +\n      \'instruct the deep merge how to resolve merging two arrays.\'\n    ) : invariant(strategy \x3d\x3d\x3d undefined || strategy in mergeHelpers.ArrayStrategies));\n  },\n\n  /**\n   * Set of possible behaviors of merge algorithms when encountering two Arrays\n   * that must be merged together.\n   * - `clobber`: The left `Array` is ignored.\n   * - `indexByIndex`: The result is achieved by recursively deep merging at\n   *   each index. (not yet supported.)\n   */\n  ArrayStrategies: keyMirror({\n    Clobber: true,\n    IndexByIndex: true\n  })\n\n};\n\nmodule.exports \x3d mergeHelpers;\n\n},{"./invariant":120,"./keyMirror":126}],132:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule mergeInto\n * @typechecks static-only\n */\n\n"use strict";\n\nvar mergeHelpers \x3d _dereq_("./mergeHelpers");\n\nvar checkMergeObjectArg \x3d mergeHelpers.checkMergeObjectArg;\nvar checkMergeIntoObjectArg \x3d mergeHelpers.checkMergeIntoObjectArg;\n\n/**\n * Shallow merges two structures by mutating the first parameter.\n *\n * @param {object|function} one Object to be merged into.\n * @param {?object} two Optional object with properties to merge from.\n */\nfunction mergeInto(one, two) {\n  checkMergeIntoObjectArg(one);\n  if (two !\x3d null) {\n    checkMergeObjectArg(two);\n    for (var key in two) {\n      if (!two.hasOwnProperty(key)) {\n        continue;\n      }\n      one[key] \x3d two[key];\n    }\n  }\n}\n\nmodule.exports \x3d mergeInto;\n\n},{"./mergeHelpers":131}],133:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule mixInto\n */\n\n"use strict";\n\n/**\n * Simply copies properties to the prototype.\n */\nvar mixInto \x3d function(constructor, methodBag) {\n  var methodName;\n  for (methodName in methodBag) {\n    if (!methodBag.hasOwnProperty(methodName)) {\n      continue;\n    }\n    constructor.prototype[methodName] \x3d methodBag[methodName];\n  }\n};\n\nmodule.exports \x3d mixInto;\n\n},{}],134:[function(_dereq_,module,exports){\n/**\n * Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule monitorCodeUse\n */\n\n"use strict";\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Provides open-source compatible instrumentation for monitoring certain API\n * uses before we\'re ready to issue a warning or refactor. It accepts an event\n * name which may only contain the characters [a-z0-9_] and an optional data\n * object with further information.\n */\n\nfunction monitorCodeUse(eventName, data) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    eventName \x26\x26 !/[^a-z0-9_]/.test(eventName),\n    \'You must provide an eventName using only the characters [a-z0-9_]\'\n  ) : invariant(eventName \x26\x26 !/[^a-z0-9_]/.test(eventName)));\n}\n\nmodule.exports \x3d monitorCodeUse;\n\n},{"./invariant":120}],135:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule onlyChild\n */\n"use strict";\n\nvar ReactDescriptor \x3d _dereq_("./ReactDescriptor");\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection. The current implementation of this\n * function assumes that a single child gets passed without a wrapper, but the\n * purpose of this helper function is to abstract away the particular structure\n * of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactComponent} The first and only `ReactComponent` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  ("production" !\x3d\x3d "development" ? invariant(\n    ReactDescriptor.isValidDescriptor(children),\n    \'onlyChild must be passed a children with exactly one child.\'\n  ) : invariant(ReactDescriptor.isValidDescriptor(children)));\n  return children;\n}\n\nmodule.exports \x3d onlyChild;\n\n},{"./ReactDescriptor":51,"./invariant":120}],136:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule performance\n * @typechecks\n */\n\n"use strict";\n\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\n\nvar performance;\n\nif (ExecutionEnvironment.canUseDOM) {\n  performance \x3d\n    window.performance ||\n    window.msPerformance ||\n    window.webkitPerformance;\n}\n\nmodule.exports \x3d performance || {};\n\n},{"./ExecutionEnvironment":21}],137:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule performanceNow\n * @typechecks\n */\n\nvar performance \x3d _dereq_("./performance");\n\n/**\n * Detect if we can use `window.performance.now()` and gracefully fallback to\n * `Date.now()` if it doesn\'t exist. We need to support Firefox \x3c 15 for now\n * because of Facebook\'s testing infrastructure.\n */\nif (!performance || !performance.now) {\n  performance \x3d Date;\n}\n\nvar performanceNow \x3d performance.now.bind(performance);\n\nmodule.exports \x3d performanceNow;\n\n},{"./performance":136}],138:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule setInnerHTML\n */\n\n"use strict";\n\nvar ExecutionEnvironment \x3d _dereq_("./ExecutionEnvironment");\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML \x3d function(node, html) {\n  node.innerHTML \x3d html;\n};\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement \x3d document.createElement(\'div\');\n  testElement.innerHTML \x3d \' \';\n  if (testElement.innerHTML \x3d\x3d\x3d \'\') {\n    setInnerHTML \x3d function(node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (html.match(/^[ \\r\\n\\t\\f]/) ||\n          html[0] \x3d\x3d\x3d \'\x3c\' \x26\x26 (\n            html.indexOf(\'\x3cnoscript\') !\x3d\x3d -1 ||\n            html.indexOf(\'\x3cscript\') !\x3d\x3d -1 ||\n            html.indexOf(\'\x3cstyle\') !\x3d\x3d -1 ||\n            html.indexOf(\'\x3cmeta\') !\x3d\x3d -1 ||\n            html.indexOf(\'\x3clink\') !\x3d\x3d -1)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        node.innerHTML \x3d \'\\uFEFF\' + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode \x3d node.firstChild;\n        if (textNode.data.length \x3d\x3d\x3d 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML \x3d html;\n      }\n    };\n  }\n}\n\nmodule.exports \x3d setInnerHTML;\n\n},{"./ExecutionEnvironment":21}],139:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule shallowEqual\n */\n\n"use strict";\n\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\nfunction shallowEqual(objA, objB) {\n  if (objA \x3d\x3d\x3d objB) {\n    return true;\n  }\n  var key;\n  // Test for A\'s keys different from B.\n  for (key in objA) {\n    if (objA.hasOwnProperty(key) \x26\x26\n        (!objB.hasOwnProperty(key) || objA[key] !\x3d\x3d objB[key])) {\n      return false;\n    }\n  }\n  // Test for B\'a keys missing from A.\n  for (key in objB) {\n    if (objB.hasOwnProperty(key) \x26\x26 !objA.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports \x3d shallowEqual;\n\n},{}],140:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule shouldUpdateReactComponent\n * @typechecks static-only\n */\n\n"use strict";\n\n/**\n * Given a `prevDescriptor` and `nextDescriptor`, determines if the existing\n * instance should be updated as opposed to being destroyed or replaced by a new\n * instance. Both arguments are descriptors. This ensures that this logic can\n * operate on stateless trees without any backing instance.\n *\n * @param {?object} prevDescriptor\n * @param {?object} nextDescriptor\n * @return {boolean} True if the existing instance should be updated.\n * @protected\n */\nfunction shouldUpdateReactComponent(prevDescriptor, nextDescriptor) {\n  if (prevDescriptor \x26\x26 nextDescriptor \x26\x26\n      prevDescriptor.type \x3d\x3d\x3d nextDescriptor.type \x26\x26 (\n        (prevDescriptor.props \x26\x26 prevDescriptor.props.key) \x3d\x3d\x3d\n        (nextDescriptor.props \x26\x26 nextDescriptor.props.key)\n      ) \x26\x26 prevDescriptor._owner \x3d\x3d\x3d nextDescriptor._owner) {\n    return true;\n  }\n  return false;\n}\n\nmodule.exports \x3d shouldUpdateReactComponent;\n\n},{}],141:[function(_dereq_,module,exports){\n/**\n * Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule toArray\n * @typechecks\n */\n\nvar invariant \x3d _dereq_("./invariant");\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFrom.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length \x3d obj.length;\n\n  // Some browse builtin objects can report typeof \'function\' (e.g. NodeList in\n  // old versions of Safari).\n  ("production" !\x3d\x3d "development" ? invariant(\n    !Array.isArray(obj) \x26\x26\n    (typeof obj \x3d\x3d\x3d \'object\' || typeof obj \x3d\x3d\x3d \'function\'),\n    \'toArray: Array-like object expected\'\n  ) : invariant(!Array.isArray(obj) \x26\x26\n  (typeof obj \x3d\x3d\x3d \'object\' || typeof obj \x3d\x3d\x3d \'function\')));\n\n  ("production" !\x3d\x3d "development" ? invariant(\n    typeof length \x3d\x3d\x3d \'number\',\n    \'toArray: Object needs a length property\'\n  ) : invariant(typeof length \x3d\x3d\x3d \'number\'));\n\n  ("production" !\x3d\x3d "development" ? invariant(\n    length \x3d\x3d\x3d 0 ||\n    (length - 1) in obj,\n    \'toArray: Object should have keys for indices\'\n  ) : invariant(length \x3d\x3d\x3d 0 ||\n  (length - 1) in obj));\n\n  // Old IE doesn\'t give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE \x3c 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret \x3d Array(length);\n  for (var ii \x3d 0; ii \x3c length; ii++) {\n    ret[ii] \x3d obj[ii];\n  }\n  return ret;\n}\n\nmodule.exports \x3d toArray;\n\n},{"./invariant":120}],142:[function(_dereq_,module,exports){\n/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule traverseAllChildren\n */\n\n"use strict";\n\nvar ReactInstanceHandles \x3d _dereq_("./ReactInstanceHandles");\nvar ReactTextComponent \x3d _dereq_("./ReactTextComponent");\n\nvar invariant \x3d _dereq_("./invariant");\n\nvar SEPARATOR \x3d ReactInstanceHandles.SEPARATOR;\nvar SUBSEPARATOR \x3d \':\';\n\n/**\n * TODO: Test that:\n * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.\n * 2. it(\'should fail when supplied duplicate key\', function() {\n * 3. That a single child and an array with one item have the same key pattern.\n * });\n */\n\nvar userProvidedKeyEscaperLookup \x3d {\n  \'\x3d\': \'\x3d0\',\n  \'.\': \'\x3d1\',\n  \':\': \'\x3d2\'\n};\n\nvar userProvidedKeyEscapeRegex \x3d /[\x3d.:]/g;\n\nfunction userProvidedKeyEscaper(match) {\n  return userProvidedKeyEscaperLookup[match];\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  if (component \x26\x26 component.props \x26\x26 component.props.key !\x3d null) {\n    // Explicit key\n    return wrapUserProvidedKey(component.props.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\n/**\n * Escape a component key so that it is safe to use in a reactid.\n *\n * @param {*} key Component key to be escaped.\n * @return {string} An escaped string.\n */\nfunction escapeUserProvidedKey(text) {\n  return (\'\' + text).replace(\n    userProvidedKeyEscapeRegex,\n    userProvidedKeyEscaper\n  );\n}\n\n/**\n * Wrap a `key` value explicitly provided by the user to distinguish it from\n * implicitly-generated keys generated by a component\'s index in its parent.\n *\n * @param {string} key Value of a user-provided `key` attribute\n * @return {string}\n */\nfunction wrapUserProvidedKey(key) {\n  return \'$\' + escapeUserProvidedKey(key);\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!number} indexSoFar Number of children encountered until this point.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nvar traverseAllChildrenImpl \x3d\n  function(children, nameSoFar, indexSoFar, callback, traverseContext) {\n    var subtreeCount \x3d 0;  // Count of children found in the current subtree.\n    if (Array.isArray(children)) {\n      for (var i \x3d 0; i \x3c children.length; i++) {\n        var child \x3d children[i];\n        var nextName \x3d (\n          nameSoFar +\n          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +\n          getComponentKey(child, i)\n        );\n        var nextIndex \x3d indexSoFar + subtreeCount;\n        subtreeCount +\x3d traverseAllChildrenImpl(\n          child,\n          nextName,\n          nextIndex,\n          callback,\n          traverseContext\n        );\n      }\n    } else {\n      var type \x3d typeof children;\n      var isOnlyChild \x3d nameSoFar \x3d\x3d\x3d \'\';\n      // If it\'s the only child, treat the name as if it was wrapped in an array\n      // so that it\'s consistent if the number of children grows\n      var storageName \x3d\n        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;\n      if (children \x3d\x3d null || type \x3d\x3d\x3d \'boolean\') {\n        // All of the above are perceived as null.\n        callback(traverseContext, null, storageName, indexSoFar);\n        subtreeCount \x3d 1;\n      } else if (children.type \x26\x26 children.type.prototype \x26\x26\n                 children.type.prototype.mountComponentIntoNode) {\n        callback(traverseContext, children, storageName, indexSoFar);\n        subtreeCount \x3d 1;\n      } else {\n        if (type \x3d\x3d\x3d \'object\') {\n          ("production" !\x3d\x3d "development" ? invariant(\n            !children || children.nodeType !\x3d\x3d 1,\n            \'traverseAllChildren(...): Encountered an invalid child; DOM \' +\n            \'elements are not valid children of React components.\'\n          ) : invariant(!children || children.nodeType !\x3d\x3d 1));\n          for (var key in children) {\n            if (children.hasOwnProperty(key)) {\n              subtreeCount +\x3d traverseAllChildrenImpl(\n                children[key],\n                (\n                  nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +\n                  wrapUserProvidedKey(key) + SUBSEPARATOR +\n                  getComponentKey(children[key], 0)\n                ),\n                indexSoFar + subtreeCount,\n                callback,\n                traverseContext\n              );\n            }\n          }\n        } else if (type \x3d\x3d\x3d \'string\') {\n          var normalizedText \x3d ReactTextComponent(children);\n          callback(traverseContext, normalizedText, storageName, indexSoFar);\n          subtreeCount +\x3d 1;\n        } else if (type \x3d\x3d\x3d \'number\') {\n          var normalizedNumber \x3d ReactTextComponent(\'\' + children);\n          callback(traverseContext, normalizedNumber, storageName, indexSoFar);\n          subtreeCount +\x3d 1;\n        }\n      }\n    }\n    return subtreeCount;\n  };\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children \x3d\x3d null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, \'\', 0, callback, traverseContext);\n}\n\nmodule.exports \x3d traverseAllChildren;\n\n},{"./ReactInstanceHandles":59,"./ReactTextComponent":75,"./invariant":120}],143:[function(_dereq_,module,exports){\n/**\n * Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule warning\n */\n\n"use strict";\n\nvar emptyFunction \x3d _dereq_("./emptyFunction");\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning \x3d emptyFunction;\n\nif ("production" !\x3d\x3d "development") {\n  warning \x3d function(condition, format ) {var args\x3dArray.prototype.slice.call(arguments,2);\n    if (format \x3d\x3d\x3d undefined) {\n      throw new Error(\n        \'`warning(condition, format, ...args)` requires a warning \' +\n        \'message argument\'\n      );\n    }\n\n    if (!condition) {\n      var argIndex \x3d 0;\n      console.warn(\'Warning: \' + format.replace(/%s/g, function()  {return args[argIndex++];}));\n    }\n  };\n}\n\nmodule.exports \x3d warning;\n\n},{"./emptyFunction":102}]},{},[27])\n(27)\n});; \nif (typeof module !\x3d \'undefined\' \x26\x26\n                      typeof global !\x3d \'undefined\' \x26\x26\n                      module.exports \x26\x26 module.exports.DOM) {\n                      global.React \x3d module.exports;\n                      } \n\n                      //@ sourceURL\x3dreagent/react.js\n');
cljs.core.swap_BANG_.call(null, reagentdemo.page.page_map, cljs.core.assoc, "index.html", function() {
  var f__3528__auto__ = reagent.interop.fvars["demo/intro/main"];
  if (!(f__3528__auto__ == null)) {
    return f__3528__auto__;
  } else {
    if (!(reagentdemo.intro.main == null)) {
    } else {
      throw new Error("Assert failed: undefined fn: intro/main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol("intro", "main", "intro/main", -310329058, null))))));
    }
    var old__3529__auto__ = reagentdemo.intro.main["-fvar"];
    var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
      var G__5643 = function(old__3529__auto__, f__3528__auto__) {
        return function() {
          return reagentdemo.intro.main.apply(null, arguments);
        };
      }(old__3529__auto__, f__3528__auto__);
      G__5643["name"] = reagentdemo.intro.main.name;
      G__5643["fvar"] = true;
      return G__5643;
    }();
    reagentdemo.intro.main["-fvar"] = v__3530__auto__;
    return reagent.interop.fvars["demo/intro/main"] = v__3530__auto__;
  }
}(), "news/index.html", function() {
  var f__3528__auto__ = reagent.interop.fvars["demo/news/main"];
  if (!(f__3528__auto__ == null)) {
    return f__3528__auto__;
  } else {
    if (!(reagentdemo.news.main == null)) {
    } else {
      throw new Error("Assert failed: undefined fn: news/main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol("news", "main", "news/main", -480713481, null))))));
    }
    var old__3529__auto__ = reagentdemo.news.main["-fvar"];
    var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
      var G__5644 = function(old__3529__auto__, f__3528__auto__) {
        return function() {
          return reagentdemo.news.main.apply(null, arguments);
        };
      }(old__3529__auto__, f__3528__auto__);
      G__5644["name"] = reagentdemo.news.main.name;
      G__5644["fvar"] = true;
      return G__5644;
    }();
    reagentdemo.news.main["-fvar"] = v__3530__auto__;
    return reagent.interop.fvars["demo/news/main"] = v__3530__auto__;
  }
}());
demo.github = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "https://github.com/holmsand/reagent"], null);
demo.github_badge = function github_badge() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a.github-badge", "a.github-badge", -1294957169), demo.github, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "position", 
  "position", -2011731912), "absolute", new cljs.core.Keyword(null, "top", "top", -1856271961), 0, new cljs.core.Keyword(null, "left", "left", -399115937), 0, new cljs.core.Keyword(null, "border", "border", 1444987323), 0], null), new cljs.core.Keyword(null, "alt", "alt", -3214426), "Fork me on GitHub", new cljs.core.Keyword(null, "src", "src", -1651076051), "https://s3.amazonaws.com/github/ribbons/forkme_left_orange_ff7600.png"], null)], null)], null);
};
demo.demo = function demo__$1() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.nav", "div.nav", -1805454552), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.nav", "ul.nav", 845787189), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "li.brand", "li.brand", -1938290661), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["demo/intro/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(reagentdemo.intro.main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: intro/main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol("intro", "main", "intro/main", -310329058, null))))));
      }
      var old__3529__auto__ = reagentdemo.intro.main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5649 = function(old__3529__auto__, f__3528__auto__) {
          return function() {
            return reagentdemo.intro.main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__);
        G__5649["name"] = reagentdemo.intro.main.name;
        G__5649["fvar"] = true;
        return G__5649;
      }();
      reagentdemo.intro.main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["demo/intro/main"] = v__3530__auto__;
    }
  }()], null), "Reagent:"], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["demo/intro/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(reagentdemo.intro.main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: intro/main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol("intro", "main", "intro/main", -310329058, null))))));
      }
      var old__3529__auto__ = reagentdemo.intro.main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5650 = function(old__3529__auto__, f__3528__auto__) {
          return function() {
            return reagentdemo.intro.main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__);
        G__5650["name"] = reagentdemo.intro.main.name;
        G__5650["fvar"] = true;
        return G__5650;
      }();
      reagentdemo.intro.main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["demo/intro/main"] = v__3530__auto__;
    }
  }()], null), "Intro"], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagentdemo.page.link, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), function() {
    var f__3528__auto__ = reagent.interop.fvars["demo/news/main"];
    if (!(f__3528__auto__ == null)) {
      return f__3528__auto__;
    } else {
      if (!(reagentdemo.news.main == null)) {
      } else {
        throw new Error("Assert failed: undefined fn: news/main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol("news", "main", "news/main", -480713481, null))))));
      }
      var old__3529__auto__ = reagentdemo.news.main["-fvar"];
      var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
        var G__5651 = function(old__3529__auto__, f__3528__auto__) {
          return function() {
            return reagentdemo.news.main.apply(null, arguments);
          };
        }(old__3529__auto__, f__3528__auto__);
        G__5651["name"] = reagentdemo.news.main.name;
        G__5651["fvar"] = true;
        return G__5651;
      }();
      reagentdemo.news.main["-fvar"] = v__3530__auto__;
      return reagent.interop.fvars["demo/news/main"] = v__3530__auto__;
    }
  }()], null), "News"], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), demo.github, "GitHub"], null)], null)], null)], null), function() {
    var comp = cljs.core.get.call(null, cljs.core.deref.call(null, reagentdemo.page.page_map), cljs.core.deref.call(null, reagentdemo.page.page), function() {
      var f__3528__auto__ = reagent.interop.fvars["demo/intro/main"];
      if (!(f__3528__auto__ == null)) {
        return f__3528__auto__;
      } else {
        if (!(reagentdemo.intro.main == null)) {
        } else {
          throw new Error("Assert failed: undefined fn: intro/main\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "not", "clojure.core/not", 2621194, null), cljs.core.list(new cljs.core.Symbol("clojure.core", "nil?", "clojure.core/nil?", 842444475, null), new cljs.core.Symbol("intro", "main", "intro/main", -310329058, null))))));
        }
        var old__3529__auto__ = reagentdemo.intro.main["-fvar"];
        var v__3530__auto__ = !(old__3529__auto__ == null) ? old__3529__auto__ : function() {
          var G__5652 = function(old__3529__auto__, f__3528__auto__) {
            return function() {
              return reagentdemo.intro.main.apply(null, arguments);
            };
          }(old__3529__auto__, f__3528__auto__);
          G__5652["name"] = reagentdemo.intro.main.name;
          G__5652["fvar"] = true;
          return G__5652;
        }();
        reagentdemo.intro.main["-fvar"] = v__3530__auto__;
        return reagent.interop.fvars["demo/intro/main"] = v__3530__auto__;
      }
    }());
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp], null);
  }(), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [demo.github_badge], null)], null);
};
demo.mountdemo = function mountdemo(p) {
  if (cljs.core.truth_(p)) {
    reagentdemo.page.set_start_page.call(null, p);
  } else {
  }
  return reagent.core.render_component.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [demo.demo], null), document.body);
};
goog.exportSymbol("demo.mountdemo", demo.mountdemo);
demo.gen_page = function gen_page(p, timestamp) {
  cljs.core.reset_BANG_.call(null, reagentdemo.page.page, p);
  var body = reagent.core.render_component_to_string.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [demo.demo], null));
  var title = cljs.core.deref.call(null, reagentdemo.page.title_atom);
  var load_page = function() {
    var G__5654 = p;
    switch(G__5654) {
      case "index.html":
        return "";
        break;
      default:
        return p;
    }
  }();
  return "\x3c!doctype html\x3e\n\x3chtml\x3e\n  \x3chead\x3e\n    \x3cmeta charset\x3d'utf-8'\x3e\n    \x3ctitle\x3e" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(title) + "\x3c/title\x3e\n    \x3cmeta name\x3d'viewport' content\x3d'width\x3ddevice-width, initial-scale\x3d1.0' /\x3e\n    \x3clink rel\x3d'stylesheet' href\x3d'" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reagentdemo.page.prefix.call(null, "assets/demo.css")) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(timestamp) + "'\x3e\n  \x3c/head\x3e\n  \x3cbody\x3e\n    " + 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(body) + "\n    \x3cscript type\x3d'text/javascript'\n      src\x3d'" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reagentdemo.page.prefix.call(null, "assets/demo.js")) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(timestamp) + "'\x3e\x3c/script\x3e\n    \x3cscript type\x3d'text/javascript'\x3e\n      setTimeout(function() {demo.mountdemo('" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(load_page) + "')}, 200);\n    \x3c/script\x3e\n  \x3c/body\x3e\n\x3c/html\x3e";
};
demo.genpages = function genpages() {
  var timestamp = "?" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(Date.now());
  return cljs.core.clj__GT_js.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(timestamp) {
    return function(p1__5656_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__5656_SHARP_, demo.gen_page.call(null, p1__5656_SHARP_, timestamp)], null);
    };
  }(timestamp), cljs.core.keys.call(null, cljs.core.deref.call(null, reagentdemo.page.page_map)))));
};
goog.exportSymbol("demo.genpages", demo.genpages);
